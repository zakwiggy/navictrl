   1              		.cpu arm9e
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.file	"91x_rtc.c"
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.align	2
  22              		.global	BYTEToBCD2
  24              	BYTEToBCD2:
  25              	.LFB0:
  26              		.file 1 "libstr91x/src/91x_rtc.c"
   1:libstr91x/src/91x_rtc.c **** /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
   2:libstr91x/src/91x_rtc.c **** * File Name          : 91x_rtc.c
   3:libstr91x/src/91x_rtc.c **** * Author             : MCD Application Team
   4:libstr91x/src/91x_rtc.c **** * Version            : V2.1
   5:libstr91x/src/91x_rtc.c **** * Date               : 12/22/2008
   6:libstr91x/src/91x_rtc.c **** * Description        : This file provides the RTC library firmware functions
   7:libstr91x/src/91x_rtc.c **** ********************************************************************************
   8:libstr91x/src/91x_rtc.c **** * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH
   9:libstr91x/src/91x_rtc.c **** * CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS
  10:libstr91x/src/91x_rtc.c **** * A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
  11:libstr91x/src/91x_rtc.c **** * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT
  12:libstr91x/src/91x_rtc.c **** * OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION
  13:libstr91x/src/91x_rtc.c **** * CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  14:libstr91x/src/91x_rtc.c **** *******************************************************************************/
  15:libstr91x/src/91x_rtc.c **** 
  16:libstr91x/src/91x_rtc.c **** /* Includes ------------------------------------------------------------------*/
  17:libstr91x/src/91x_rtc.c **** #include "91x_rtc.h"
  18:libstr91x/src/91x_rtc.c **** #include "91x_scu.h"
  19:libstr91x/src/91x_rtc.c **** 
  20:libstr91x/src/91x_rtc.c **** /* Include of other module interface headers ---------------------------------*/
  21:libstr91x/src/91x_rtc.c **** /* Local includes ------------------------------------------------------------*/
  22:libstr91x/src/91x_rtc.c **** /* Private typedef -----------------------------------------------------------*/
  23:libstr91x/src/91x_rtc.c **** /* Private define ------------------------------------------------------------*/
  24:libstr91x/src/91x_rtc.c **** /* Private macro -------------------------------------------------------------*/
  25:libstr91x/src/91x_rtc.c **** /* Private variables ---------------------------------------------------------*/
  26:libstr91x/src/91x_rtc.c **** /* Private function prototypes -----------------------------------------------*/
  27:libstr91x/src/91x_rtc.c **** u8 BYTEToBCD2(u8 value);
  28:libstr91x/src/91x_rtc.c **** u16 WORDToBCD3(u16 value);
  29:libstr91x/src/91x_rtc.c **** u8 BCD2ToBYTE(u8 value);
  30:libstr91x/src/91x_rtc.c **** u16 BCD3ToBYTE(u16 value);
  31:libstr91x/src/91x_rtc.c **** /* Interface functions -------------------------------------------------------*/
  32:libstr91x/src/91x_rtc.c **** /* Private functions ---------------------------------------------------------*/
  33:libstr91x/src/91x_rtc.c **** 
  34:libstr91x/src/91x_rtc.c **** /*******************************************************************************
  35:libstr91x/src/91x_rtc.c **** * Function Name  : BYTEToBCD2
  36:libstr91x/src/91x_rtc.c **** * Description    : Converts a 2 digit decimal to BCD format
  37:libstr91x/src/91x_rtc.c **** * Input          : None
  38:libstr91x/src/91x_rtc.c **** * Output         : None
  39:libstr91x/src/91x_rtc.c **** * Return         : Converted byte
  40:libstr91x/src/91x_rtc.c **** *******************************************************************************/
  41:libstr91x/src/91x_rtc.c **** u8 BYTEToBCD2(u8 value)
  42:libstr91x/src/91x_rtc.c **** {
  27              		.loc 1 42 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  43:libstr91x/src/91x_rtc.c ****   u8 bcdhigh = 0;
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
  33              		.loc 1 44 0
  34 0000 090050E3 		cmp	r0, #9
  35 0004 0030A093 		movls	r3, #0
  36 0008 0800009A 		bls	.L2
  37 000c 0030A0E3 		mov	r3, #0
  38              	.LVL1:
  39              	.L3:
  45:libstr91x/src/91x_rtc.c ****   {
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
  40              		.loc 1 47 0
  41 0010 0A0040E2 		sub	r0, r0, #10
  42 0014 FF0000E2 		and	r0, r0, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
  43              		.loc 1 46 0
  44 0018 013083E2 		add	r3, r3, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
  45              		.loc 1 44 0
  46 001c 090050E3 		cmp	r0, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
  47              		.loc 1 46 0
  48 0020 FF3003E2 		and	r3, r3, #255
  49              	.LVL2:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
  50              		.loc 1 44 0
  51 0024 F9FFFF8A 		bhi	.L3
  52 0028 0312A0E1 		mov	r1, r3, asl #4
  53 002c FF3001E2 		and	r3, r1, #255
  54              	.LVL3:
  55              	.L2:
  48:libstr91x/src/91x_rtc.c ****   }
  49:libstr91x/src/91x_rtc.c ****   return  (bcdhigh << 4) | value;
  50:libstr91x/src/91x_rtc.c **** }
  56              		.loc 1 50 0
  57 0030 030080E1 		orr	r0, r0, r3
  58 0034 1EFF2FE1 		bx	lr
  59              		.cfi_endproc
  60              	.LFE0:
  62              		.align	2
  63              		.global	WORDToBCD3
  65              	WORDToBCD3:
  66              	.LFB1:
  51:libstr91x/src/91x_rtc.c **** /*******************************************************************************
  52:libstr91x/src/91x_rtc.c **** * Function Name  : WORDToBCD3
  53:libstr91x/src/91x_rtc.c **** * Description    : Converts a 3 digit decimal to BCD format
  54:libstr91x/src/91x_rtc.c **** * Input          : None
  55:libstr91x/src/91x_rtc.c **** * Output         : None
  56:libstr91x/src/91x_rtc.c **** * Return         : Converted word
  57:libstr91x/src/91x_rtc.c **** *******************************************************************************/
  58:libstr91x/src/91x_rtc.c **** u16 WORDToBCD3(u16 value)
  59:libstr91x/src/91x_rtc.c **** {
  67              		.loc 1 59 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72              	.LVL4:
  60:libstr91x/src/91x_rtc.c **** 	u16 bcdhigh = 0;
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
  73              		.loc 1 61 0
  74 0038 630050E3 		cmp	r0, #99
  75 003c 0030A093 		movls	r3, #0
  76 0040 1B00009A 		bls	.L8
  77 0044 641040E2 		sub	r1, r0, #100
  78 0048 0108A0E1 		mov	r0, r1, asl #16
  79              	.LVL5:
  80 004c F0209FE5 		ldr	r2, .L27
  81 0050 2008A0E1 		mov	r0, r0, lsr #16
  82 0054 901282E0 		umull	r1, r2, r0, r2
  83              	.LVL6:
  84 0058 630050E3 		cmp	r0, #99
  85 005c A232A0E1 		mov	r3, r2, lsr #5
  86 0060 012003E2 		and	r2, r3, #1
  62:libstr91x/src/91x_rtc.c **** 	{
  63:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
  87              		.loc 1 63 0
  88 0064 0130A0E3 		mov	r3, #1
  89              	.LVL7:
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
  90              		.loc 1 61 0
  91 0068 0F00009A 		bls	.L26
  92 006c 000052E3 		cmp	r2, #0
  93 0070 0500000A 		beq	.L9
  64:libstr91x/src/91x_rtc.c **** 		value -= 100;
  94              		.loc 1 64 0
  95 0074 643040E2 		sub	r3, r0, #100
  96 0078 0328A0E1 		mov	r2, r3, asl #16
  97 007c 2208A0E1 		mov	r0, r2, lsr #16
  98              	.LVL8:
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
  99              		.loc 1 61 0
 100 0080 630050E3 		cmp	r0, #99
  63:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 101              		.loc 1 63 0
 102 0084 0230A0E3 		mov	r3, #2
 103              	.LVL9:
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
 104              		.loc 1 61 0
 105 0088 0700009A 		bls	.L26
 106              	.LVL10:
 107              	.L9:
 108              		.loc 1 64 0
 109 008c 0008A0E1 		mov	r0, r0, asl #16
 110 0090 322740E2 		sub	r2, r0, #13107200
  63:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 111              		.loc 1 63 0
 112 0094 0338A0E1 		mov	r3, r3, asl #16
 113              		.loc 1 64 0
 114 0098 2208A0E1 		mov	r0, r2, lsr #16
  63:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 115              		.loc 1 63 0
 116 009c 02C883E2 		add	ip, r3, #131072
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
 117              		.loc 1 61 0
 118 00a0 630050E3 		cmp	r0, #99
  63:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 119              		.loc 1 63 0
 120 00a4 2C38A0E1 		mov	r3, ip, lsr #16
 121              	.LVL11:
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
 122              		.loc 1 61 0
 123 00a8 F7FFFF8A 		bhi	.L9
 124              	.LVL12:
 125              	.L26:
 126 00ac 031AA0E1 		mov	r1, r3, asl #20
 127 00b0 2138A0E1 		mov	r3, r1, lsr #16
 128              	.L8:
 129              	.LVL13:
  65:libstr91x/src/91x_rtc.c **** 	}
  66:libstr91x/src/91x_rtc.c **** 	bcdhigh <<= 4;
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 130              		.loc 1 67 0
 131 00b4 090050E3 		cmp	r0, #9
 132 00b8 1D00009A 		bls	.L10
 133 00bc 0A1040E2 		sub	r1, r0, #10
 134 00c0 0108A0E1 		mov	r0, r1, asl #16
 135              	.LVL14:
 136 00c4 7CC09FE5 		ldr	ip, .L27+4
 137 00c8 2008A0E1 		mov	r0, r0, lsr #16
 138 00cc 901C8CE0 		umull	r1, ip, r0, ip
 139              	.LVL15:
  68:libstr91x/src/91x_rtc.c **** 	{
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 140              		.loc 1 69 0
 141 00d0 013083E2 		add	r3, r3, #1
 142              	.LVL16:
 143 00d4 AC21A0E1 		mov	r2, ip, lsr #3
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 144              		.loc 1 67 0
 145 00d8 090050E3 		cmp	r0, #9
 146              		.loc 1 69 0
 147 00dc 03C8A0E1 		mov	ip, r3, asl #16
 148 00e0 012002E2 		and	r2, r2, #1
 149 00e4 2C38A0E1 		mov	r3, ip, lsr #16
 150              	.LVL17:
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 151              		.loc 1 67 0
 152 00e8 1100009A 		bls	.L10
 153 00ec 000052E3 		cmp	r2, #0
 154 00f0 0700000A 		beq	.L13
  70:libstr91x/src/91x_rtc.c **** 		value -= 10;
 155              		.loc 1 70 0
 156 00f4 0A1040E2 		sub	r1, r0, #10
 157 00f8 0108A0E1 		mov	r0, r1, asl #16
 158              	.LVL18:
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 159              		.loc 1 69 0
 160 00fc 01C083E2 		add	ip, r3, #1
 161              		.loc 1 70 0
 162 0100 2008A0E1 		mov	r0, r0, lsr #16
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 163              		.loc 1 69 0
 164 0104 0C38A0E1 		mov	r3, ip, asl #16
 165              	.LVL19:
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 166              		.loc 1 67 0
 167 0108 090050E3 		cmp	r0, #9
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 168              		.loc 1 69 0
 169 010c 2338A0E1 		mov	r3, r3, lsr #16
 170              	.LVL20:
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 171              		.loc 1 67 0
 172 0110 0700009A 		bls	.L10
 173              	.LVL21:
 174              	.L13:
 175              		.loc 1 70 0
 176 0114 0008A0E1 		mov	r0, r0, asl #16
 177 0118 05C740E2 		sub	ip, r0, #1310720
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 178              		.loc 1 69 0
 179 011c 0338A0E1 		mov	r3, r3, asl #16
 180              		.loc 1 70 0
 181 0120 2C08A0E1 		mov	r0, ip, lsr #16
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 182              		.loc 1 69 0
 183 0124 022883E2 		add	r2, r3, #131072
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 184              		.loc 1 67 0
 185 0128 090050E3 		cmp	r0, #9
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 186              		.loc 1 69 0
 187 012c 2238A0E1 		mov	r3, r2, lsr #16
 188              	.LVL22:
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 189              		.loc 1 67 0
 190 0130 F7FFFF8A 		bhi	.L13
 191              	.LVL23:
 192              	.L10:
  71:libstr91x/src/91x_rtc.c **** 	}
  72:libstr91x/src/91x_rtc.c **** 	return  (bcdhigh << 4) | value;
 193              		.loc 1 72 0
 194 0134 032280E1 		orr	r2, r0, r3, asl #4
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 195              		.loc 1 67 0
 196 0138 0218A0E1 		mov	r1, r2, asl #16
  73:libstr91x/src/91x_rtc.c **** }
 197              		.loc 1 73 0
 198 013c 2108A0E1 		mov	r0, r1, lsr #16
 199 0140 1EFF2FE1 		bx	lr
 200              	.L28:
 201              		.align	2
 202              	.L27:
 203 0144 1F85EB51 		.word	1374389535
 204 0148 CDCCCCCC 		.word	-858993459
 205              		.cfi_endproc
 206              	.LFE1:
 208              		.align	2
 209              		.global	BCD3ToWORD
 211              	BCD3ToWORD:
 212              	.LFB2:
  74:libstr91x/src/91x_rtc.c **** 
  75:libstr91x/src/91x_rtc.c **** /*******************************************************************************
  76:libstr91x/src/91x_rtc.c **** * Function Name  : BCD3ToWORD
  77:libstr91x/src/91x_rtc.c **** * Description    : convert from 3 digit BCD to Binary
  78:libstr91x/src/91x_rtc.c **** * Input          : None
  79:libstr91x/src/91x_rtc.c **** * Output         : None
  80:libstr91x/src/91x_rtc.c **** * Return         : Converted word
  81:libstr91x/src/91x_rtc.c **** *******************************************************************************/
  82:libstr91x/src/91x_rtc.c **** u16 BCD3ToWORD(u16 value)
  83:libstr91x/src/91x_rtc.c **** {
 213              		.loc 1 83 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218              	.LVL24:
  84:libstr91x/src/91x_rtc.c ****   return (u16)((((value&0xF00)>>8)*100) + (((value&0x0F0)>>4)*10) + (value&0x0F));
 219              		.loc 1 84 0
 220 014c 0F3C00E2 		and	r3, r0, #3840
 221 0150 F02000E2 		and	r2, r0, #240
 222 0154 4314A0E1 		mov	r1, r3, asr #8
 223 0158 42C2A0E1 		mov	ip, r2, asr #4
 224 015c 013181E0 		add	r3, r1, r1, asl #2
 225 0160 0C218CE0 		add	r2, ip, ip, asl #2
 226 0164 8210A0E1 		mov	r1, r2, asl #1
 227 0168 03C183E0 		add	ip, r3, r3, asl #2
 228 016c 0F2000E2 		and	r2, r0, #15
 229 0170 0C3181E0 		add	r3, r1, ip, asl #2
 230 0174 021083E0 		add	r1, r3, r2
 231 0178 0108A0E1 		mov	r0, r1, asl #16
 232              	.LVL25:
  85:libstr91x/src/91x_rtc.c **** }
 233              		.loc 1 85 0
 234 017c 2008A0E1 		mov	r0, r0, lsr #16
 235 0180 1EFF2FE1 		bx	lr
 236              		.cfi_endproc
 237              	.LFE2:
 239              		.align	2
 240              		.global	BCD2ToBYTE
 242              	BCD2ToBYTE:
 243              	.LFB3:
  86:libstr91x/src/91x_rtc.c **** 
  87:libstr91x/src/91x_rtc.c **** /*******************************************************************************
  88:libstr91x/src/91x_rtc.c **** * Function Name  : BCD2ToBYTE
  89:libstr91x/src/91x_rtc.c **** * Description    : convert from 2 digit BCD to Binary
  90:libstr91x/src/91x_rtc.c **** * Input          : None
  91:libstr91x/src/91x_rtc.c **** * Output         : None
  92:libstr91x/src/91x_rtc.c **** * Return         : Converted word
  93:libstr91x/src/91x_rtc.c **** *******************************************************************************/
  94:libstr91x/src/91x_rtc.c **** u8 BCD2ToBYTE(u8 value)
  95:libstr91x/src/91x_rtc.c **** {
 244              		.loc 1 95 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 249              	.LVL26:
  96:libstr91x/src/91x_rtc.c ****   u32 tmp;
  97:libstr91x/src/91x_rtc.c ****   tmp= ((value&0xF0)>>4)*10;
 250              		.loc 1 97 0
 251 0184 2022A0E1 		mov	r2, r0, lsr #4
 252 0188 023182E0 		add	r3, r2, r2, asl #2
  98:libstr91x/src/91x_rtc.c ****   return (u8)(tmp+ (value&0x0F));	
 253              		.loc 1 98 0
 254 018c 0F1000E2 		and	r1, r0, #15
  95:libstr91x/src/91x_rtc.c **** {
 255              		.loc 1 95 0
 256 0190 830081E0 		add	r0, r1, r3, asl #1
 257              	.LVL27:
  99:libstr91x/src/91x_rtc.c **** }
 258              		.loc 1 99 0
 259 0194 FF0000E2 		and	r0, r0, #255
 260 0198 1EFF2FE1 		bx	lr
 261              		.cfi_endproc
 262              	.LFE3:
 264              		.align	2
 265              		.global	RTC_DeInit
 267              	RTC_DeInit:
 268              	.LFB4:
 100:libstr91x/src/91x_rtc.c **** 
 101:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 102:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_DeInit
 103:libstr91x/src/91x_rtc.c **** * Description    : Resets the RTC peripheral registers
 104:libstr91x/src/91x_rtc.c **** * Input          : None
 105:libstr91x/src/91x_rtc.c **** * Output         : None
 106:libstr91x/src/91x_rtc.c **** * Return         : None
 107:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 108:libstr91x/src/91x_rtc.c **** void RTC_DeInit(void)
 109:libstr91x/src/91x_rtc.c **** {
 269              		.loc 1 109 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273 019c 10402DE9 		stmfd	sp!, {r4, lr}
 274              	.LCFI0:
 275              		.cfi_def_cfa_offset 8
 110:libstr91x/src/91x_rtc.c **** 	SCU_APBPeriphReset(__RTC,ENABLE);
 276              		.loc 1 110 0
 277 01a0 0104A0E3 		mov	r0, #16777216
 278 01a4 0110A0E3 		mov	r1, #1
 279              		.cfi_offset 14, -4
 280              		.cfi_offset 4, -8
 281 01a8 FEFFFFEB 		bl	SCU_APBPeriphReset
 111:libstr91x/src/91x_rtc.c **** 	SCU_APBPeriphReset(__RTC,DISABLE);
 282              		.loc 1 111 0
 283 01ac 0104A0E3 		mov	r0, #16777216
 284 01b0 0010A0E3 		mov	r1, #0
 112:libstr91x/src/91x_rtc.c **** }
 285              		.loc 1 112 0
 286 01b4 1040BDE8 		ldmfd	sp!, {r4, lr}
 111:libstr91x/src/91x_rtc.c **** 	SCU_APBPeriphReset(__RTC,DISABLE);
 287              		.loc 1 111 0
 288 01b8 FEFFFFEA 		b	SCU_APBPeriphReset
 289              		.cfi_endproc
 290              	.LFE4:
 292              		.align	2
 293              		.global	RTC_SetDate
 295              	RTC_SetDate:
 296              	.LFB5:
 113:libstr91x/src/91x_rtc.c **** 
 114:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 115:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_SetDate
 116:libstr91x/src/91x_rtc.c **** * Description    : Sets the Date register
 117:libstr91x/src/91x_rtc.c **** * Input          : struct of type RTC_DATE
 118:libstr91x/src/91x_rtc.c **** * Output         : None
 119:libstr91x/src/91x_rtc.c **** * Return         : None
 120:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 121:libstr91x/src/91x_rtc.c **** void RTC_SetDate(RTC_DATE Date)
 122:libstr91x/src/91x_rtc.c **** {
 297              		.loc 1 122 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 8
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 301              		@ link register save eliminated.
 302              	.LVL28:
 303 01bc 08D04DE2 		sub	sp, sp, #8
 304              	.LCFI1:
 305              		.cfi_def_cfa_offset 8
 306              		.loc 1 122 0
 307 01c0 0D20A0E1 		mov	r2, sp
 308 01c4 030082E8 		stmia	r2, {r0, r1}
 123:libstr91x/src/91x_rtc.c **** 	u32 tmp = 0;
 124:libstr91x/src/91x_rtc.c **** 	
 125:libstr91x/src/91x_rtc.c **** 	RTC->CR |=0x80;  /*Enable write operation in DTR register*/
 309              		.loc 1 125 0
 310 01c8 90119FE5 		ldr	r1, .L53
 126:libstr91x/src/91x_rtc.c **** 	RTC->DTR = 0;
 311              		.loc 1 126 0
 312 01cc 0020A0E3 		mov	r2, #0
 125:libstr91x/src/91x_rtc.c **** 	RTC->CR |=0x80;  /*Enable write operation in DTR register*/
 313              		.loc 1 125 0
 314 01d0 0C0091E5 		ldr	r0, [r1, #12]
 315 01d4 803080E3 		orr	r3, r0, #128
 316 01d8 0C3081E5 		str	r3, [r1, #12]
 317              		.loc 1 126 0
 318 01dc 042081E5 		str	r2, [r1, #4]
 127:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Date.century);
 319              		.loc 1 127 0
 320 01e0 0030DDE5 		ldrb	r3, [sp, #0]	@ zero_extendqisi2
 321              	.LVL29:
 322              	.LBB54:
 323              	.LBB55:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 324              		.loc 1 44 0
 325 01e4 090053E3 		cmp	r3, #9
 326 01e8 0700009A 		bls	.L33
 327              	.LVL30:
 328              	.L34:
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
 329              		.loc 1 47 0
 330 01ec 0A1043E2 		sub	r1, r3, #10
 331 01f0 FF3001E2 		and	r3, r1, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 332              		.loc 1 46 0
 333 01f4 01C082E2 		add	ip, r2, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 334              		.loc 1 44 0
 335 01f8 090053E3 		cmp	r3, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 336              		.loc 1 46 0
 337 01fc FF200CE2 		and	r2, ip, #255
 338              	.LVL31:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 339              		.loc 1 44 0
 340 0200 F9FFFF8A 		bhi	.L34
 341 0204 0202A0E1 		mov	r0, r2, asl #4
 342 0208 FF2000E2 		and	r2, r0, #255
 343              	.LVL32:
 344              	.L33:
 345              	.LBE55:
 346              	.LBE54:
 128:libstr91x/src/91x_rtc.c **** 	RTC->DTR|=tmp<<24;
 347              		.loc 1 128 0
 348 020c 4CC19FE5 		ldr	ip, .L53
 127:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Date.century);
 349              		.loc 1 127 0
 350 0210 021083E1 		orr	r1, r3, r2
 351              		.loc 1 128 0
 352 0214 04009CE5 		ldr	r0, [ip, #4]
 353 0218 013C80E1 		orr	r3, r0, r1, asl #24
 354              	.LVL33:
 355 021c 04308CE5 		str	r3, [ip, #4]
 129:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Date.year);
 356              		.loc 1 129 0
 357 0220 0130DDE5 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 358              	.LVL34:
 359              	.LBB56:
 360              	.LBB57:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 361              		.loc 1 44 0
 362 0224 090053E3 		cmp	r3, #9
 363 0228 0020A093 		movls	r2, #0
 364 022c 0800009A 		bls	.L35
 365 0230 0020A0E3 		mov	r2, #0
 366              	.LVL35:
 367              	.L36:
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
 368              		.loc 1 47 0
 369 0234 0AC043E2 		sub	ip, r3, #10
 370 0238 FF300CE2 		and	r3, ip, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 371              		.loc 1 46 0
 372 023c 012082E2 		add	r2, r2, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 373              		.loc 1 44 0
 374 0240 090053E3 		cmp	r3, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 375              		.loc 1 46 0
 376 0244 FF2002E2 		and	r2, r2, #255
 377              	.LVL36:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 378              		.loc 1 44 0
 379 0248 F9FFFF8A 		bhi	.L36
 380 024c 0212A0E1 		mov	r1, r2, asl #4
 381 0250 FF2001E2 		and	r2, r1, #255
 382              	.LVL37:
 383              	.L35:
 384              	.LBE57:
 385              	.LBE56:
 130:libstr91x/src/91x_rtc.c **** 	RTC->DTR|=tmp<<16;
 386              		.loc 1 130 0
 387 0254 04C19FE5 		ldr	ip, .L53
 129:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Date.year);
 388              		.loc 1 129 0
 389 0258 021083E1 		orr	r1, r3, r2
 390              		.loc 1 130 0
 391 025c 04009CE5 		ldr	r0, [ip, #4]
 392 0260 013880E1 		orr	r3, r0, r1, asl #16
 393              	.LVL38:
 394 0264 04308CE5 		str	r3, [ip, #4]
 131:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Date.month);
 395              		.loc 1 131 0
 396 0268 0230DDE5 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 397              	.LVL39:
 398              	.LBB58:
 399              	.LBB59:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 400              		.loc 1 44 0
 401 026c 090053E3 		cmp	r3, #9
 402 0270 0020A093 		movls	r2, #0
 403 0274 0800009A 		bls	.L37
 404 0278 0020A0E3 		mov	r2, #0
 405              	.LVL40:
 406              	.L38:
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
 407              		.loc 1 47 0
 408 027c 0AC043E2 		sub	ip, r3, #10
 409 0280 FF300CE2 		and	r3, ip, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 410              		.loc 1 46 0
 411 0284 012082E2 		add	r2, r2, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 412              		.loc 1 44 0
 413 0288 090053E3 		cmp	r3, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 414              		.loc 1 46 0
 415 028c FF2002E2 		and	r2, r2, #255
 416              	.LVL41:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 417              		.loc 1 44 0
 418 0290 F9FFFF8A 		bhi	.L38
 419 0294 0212A0E1 		mov	r1, r2, asl #4
 420 0298 FF2001E2 		and	r2, r1, #255
 421              	.LVL42:
 422              	.L37:
 423              	.LBE59:
 424              	.LBE58:
 132:libstr91x/src/91x_rtc.c **** 	RTC->DTR|=tmp<<8;
 425              		.loc 1 132 0
 426 029c BCC09FE5 		ldr	ip, .L53
 131:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Date.month);
 427              		.loc 1 131 0
 428 02a0 021083E1 		orr	r1, r3, r2
 429              		.loc 1 132 0
 430 02a4 04009CE5 		ldr	r0, [ip, #4]
 431 02a8 013480E1 		orr	r3, r0, r1, asl #8
 432              	.LVL43:
 433 02ac 04308CE5 		str	r3, [ip, #4]
 133:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Date.weekday);
 434              		.loc 1 133 0
 435 02b0 0430DDE5 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 436              	.LVL44:
 437              	.LBB60:
 438              	.LBB61:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 439              		.loc 1 44 0
 440 02b4 090053E3 		cmp	r3, #9
 441 02b8 0020A093 		movls	r2, #0
 442 02bc 0800009A 		bls	.L39
 443 02c0 0020A0E3 		mov	r2, #0
 444              	.LVL45:
 445              	.L40:
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
 446              		.loc 1 47 0
 447 02c4 0AC043E2 		sub	ip, r3, #10
 448 02c8 FF300CE2 		and	r3, ip, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 449              		.loc 1 46 0
 450 02cc 012082E2 		add	r2, r2, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 451              		.loc 1 44 0
 452 02d0 090053E3 		cmp	r3, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 453              		.loc 1 46 0
 454 02d4 FF2002E2 		and	r2, r2, #255
 455              	.LVL46:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 456              		.loc 1 44 0
 457 02d8 F9FFFF8A 		bhi	.L40
 458 02dc 0212A0E1 		mov	r1, r2, asl #4
 459 02e0 FF2001E2 		and	r2, r1, #255
 460              	.LVL47:
 461              	.L39:
 462              	.LBE61:
 463              	.LBE60:
 134:libstr91x/src/91x_rtc.c **** 	RTC->DTR|=tmp;
 464              		.loc 1 134 0
 465 02e4 74C09FE5 		ldr	ip, .L53
 133:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Date.weekday);
 466              		.loc 1 133 0
 467 02e8 023083E1 		orr	r3, r3, r2
 468              	.LVL48:
 469              		.loc 1 134 0
 470 02ec 04009CE5 		ldr	r0, [ip, #4]
 471 02f0 001083E1 		orr	r1, r3, r0
 472 02f4 04108CE5 		str	r1, [ip, #4]
 135:libstr91x/src/91x_rtc.c ****         RTC->TR &=0xFFFFFF;
 473              		.loc 1 135 0
 474 02f8 00009CE5 		ldr	r0, [ip, #0]
 475 02fc FF34C0E3 		bic	r3, r0, #-16777216
 476 0300 00308CE5 		str	r3, [ip, #0]
 136:libstr91x/src/91x_rtc.c ****         tmp = BYTEToBCD2(Date.day);
 477              		.loc 1 136 0
 478 0304 0330DDE5 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 479              	.LVL49:
 480              	.LBB62:
 481              	.LBB63:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 482              		.loc 1 44 0
 483 0308 090053E3 		cmp	r3, #9
 484 030c 0020A093 		movls	r2, #0
 485 0310 0800009A 		bls	.L41
 486 0314 0020A0E3 		mov	r2, #0
 487              	.LVL50:
 488              	.L42:
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
 489              		.loc 1 47 0
 490 0318 0AC043E2 		sub	ip, r3, #10
 491 031c FF300CE2 		and	r3, ip, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 492              		.loc 1 46 0
 493 0320 012082E2 		add	r2, r2, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 494              		.loc 1 44 0
 495 0324 090053E3 		cmp	r3, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 496              		.loc 1 46 0
 497 0328 FF2002E2 		and	r2, r2, #255
 498              	.LVL51:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 499              		.loc 1 44 0
 500 032c F9FFFF8A 		bhi	.L42
 501 0330 0212A0E1 		mov	r1, r2, asl #4
 502 0334 FF2001E2 		and	r2, r1, #255
 503              	.LVL52:
 504              	.L41:
 505              	.LBE63:
 506              	.LBE62:
 137:libstr91x/src/91x_rtc.c **** 	RTC->TR|=tmp<<24;
 507              		.loc 1 137 0
 508 0338 20C09FE5 		ldr	ip, .L53
 136:libstr91x/src/91x_rtc.c ****         tmp = BYTEToBCD2(Date.day);
 509              		.loc 1 136 0
 510 033c 021083E1 		orr	r1, r3, r2
 511              		.loc 1 137 0
 512 0340 00309CE5 		ldr	r3, [ip, #0]
 513              	.LVL53:
 514 0344 012C83E1 		orr	r2, r3, r1, asl #24
 515 0348 00208CE5 		str	r2, [ip, #0]
 138:libstr91x/src/91x_rtc.c **** 	RTC->CR &=~0x80; /*Disable write operation in DTR register*/
 516              		.loc 1 138 0
 517 034c 0C009CE5 		ldr	r0, [ip, #12]
 518 0350 8030C0E3 		bic	r3, r0, #128
 519 0354 0C308CE5 		str	r3, [ip, #12]
 139:libstr91x/src/91x_rtc.c **** }
 520              		.loc 1 139 0
 521 0358 08D08DE2 		add	sp, sp, #8
 522 035c 1EFF2FE1 		bx	lr
 523              	.L54:
 524              		.align	2
 525              	.L53:
 526 0360 0010005C 		.word	1543507968
 527              		.cfi_endproc
 528              	.LFE5:
 530              		.align	2
 531              		.global	RTC_SetTime
 533              	RTC_SetTime:
 534              	.LFB6:
 140:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 141:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_SetTime
 142:libstr91x/src/91x_rtc.c **** * Description    : Sets the Time register
 143:libstr91x/src/91x_rtc.c **** * Input          : struct of type RTC_TIME
 144:libstr91x/src/91x_rtc.c **** * Output         : None
 145:libstr91x/src/91x_rtc.c **** * Return         : None
 146:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 147:libstr91x/src/91x_rtc.c **** void RTC_SetTime(RTC_TIME Time)
 148:libstr91x/src/91x_rtc.c **** {
 535              		.loc 1 148 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 8
 538              		@ frame_needed = 0, uses_anonymous_args = 0
 539              		@ link register save eliminated.
 540              	.LVL54:
 541 0364 08D04DE2 		sub	sp, sp, #8
 542              	.LCFI2:
 543              		.cfi_def_cfa_offset 8
 544              		.loc 1 148 0
 545 0368 0DC0A0E1 		mov	ip, sp
 546 036c 03008CE8 		stmia	ip, {r0, r1}
 149:libstr91x/src/91x_rtc.c ****         u32 tmp = 0;
 150:libstr91x/src/91x_rtc.c **** 	
 151:libstr91x/src/91x_rtc.c **** 	RTC->CR |=0x80;  /*Enable write operation in TR register*/
 547              		.loc 1 151 0
 548 0370 1C329FE5 		ldr	r3, .L87
 549 0374 0C1093E5 		ldr	r1, [r3, #12]
 550 0378 800081E3 		orr	r0, r1, #128
 551 037c 0C0083E5 		str	r0, [r3, #12]
 152:libstr91x/src/91x_rtc.c **** 	RTC->TR &= 0xFF000000;
 552              		.loc 1 152 0
 553 0380 002093E5 		ldr	r2, [r3, #0]
 554 0384 FF2402E2 		and	r2, r2, #-16777216
 555 0388 002083E5 		str	r2, [r3, #0]
 153:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Time.hours);
 556              		.loc 1 153 0
 557 038c 0030DDE5 		ldrb	r3, [sp, #0]	@ zero_extendqisi2
 558              	.LVL55:
 559              	.LBB64:
 560              	.LBB65:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 561              		.loc 1 44 0
 562 0390 090053E3 		cmp	r3, #9
 563 0394 0020A093 		movls	r2, #0
 564 0398 0800009A 		bls	.L56
 565 039c 0020A0E3 		mov	r2, #0
 566              	.LVL56:
 567              	.L57:
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
 568              		.loc 1 47 0
 569 03a0 0A3043E2 		sub	r3, r3, #10
 570 03a4 FF3003E2 		and	r3, r3, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 571              		.loc 1 46 0
 572 03a8 012082E2 		add	r2, r2, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 573              		.loc 1 44 0
 574 03ac 090053E3 		cmp	r3, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 575              		.loc 1 46 0
 576 03b0 FF2002E2 		and	r2, r2, #255
 577              	.LVL57:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 578              		.loc 1 44 0
 579 03b4 F9FFFF8A 		bhi	.L57
 580 03b8 0202A0E1 		mov	r0, r2, asl #4
 581 03bc FF2000E2 		and	r2, r0, #255
 582              	.LVL58:
 583              	.L56:
 584              	.LBE65:
 585              	.LBE64:
 154:libstr91x/src/91x_rtc.c **** 	RTC->TR|=tmp<<16;
 586              		.loc 1 154 0
 587 03c0 CC119FE5 		ldr	r1, .L87
 153:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Time.hours);
 588              		.loc 1 153 0
 589 03c4 023083E1 		orr	r3, r3, r2
 590              	.LVL59:
 591              		.loc 1 154 0
 592 03c8 000091E5 		ldr	r0, [r1, #0]
 593 03cc 03C880E1 		orr	ip, r0, r3, asl #16
 594 03d0 00C081E5 		str	ip, [r1, #0]
 155:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Time.minutes);
 595              		.loc 1 155 0
 596 03d4 0130DDE5 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 597              	.LVL60:
 598              	.LBB66:
 599              	.LBB67:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 600              		.loc 1 44 0
 601 03d8 090053E3 		cmp	r3, #9
 602 03dc 0020A093 		movls	r2, #0
 603 03e0 0800009A 		bls	.L58
 604 03e4 0020A0E3 		mov	r2, #0
 605              	.LVL61:
 606              	.L59:
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
 607              		.loc 1 47 0
 608 03e8 0A1043E2 		sub	r1, r3, #10
 609 03ec FF3001E2 		and	r3, r1, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 610              		.loc 1 46 0
 611 03f0 012082E2 		add	r2, r2, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 612              		.loc 1 44 0
 613 03f4 090053E3 		cmp	r3, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 614              		.loc 1 46 0
 615 03f8 FF2002E2 		and	r2, r2, #255
 616              	.LVL62:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 617              		.loc 1 44 0
 618 03fc F9FFFF8A 		bhi	.L59
 619 0400 02C2A0E1 		mov	ip, r2, asl #4
 620 0404 FF200CE2 		and	r2, ip, #255
 621              	.LVL63:
 622              	.L58:
 623              	.LBE67:
 624              	.LBE66:
 156:libstr91x/src/91x_rtc.c **** 	RTC->TR|=tmp<<8;
 625              		.loc 1 156 0
 626 0408 84119FE5 		ldr	r1, .L87
 155:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Time.minutes);
 627              		.loc 1 155 0
 628 040c 022083E1 		orr	r2, r3, r2
 629              	.LVL64:
 630              		.loc 1 156 0
 631 0410 000091E5 		ldr	r0, [r1, #0]
 632 0414 023480E1 		orr	r3, r0, r2, asl #8
 633 0418 003081E5 		str	r3, [r1, #0]
 157:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Time.seconds);
 634              		.loc 1 157 0
 635 041c 0230DDE5 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 636              	.LVL65:
 637              	.LBB68:
 638              	.LBB69:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 639              		.loc 1 44 0
 640 0420 090053E3 		cmp	r3, #9
 641 0424 0000A093 		movls	r0, #0
 642 0428 0800009A 		bls	.L60
 643 042c 0020A0E3 		mov	r2, #0
 644              	.LVL66:
 645              	.L61:
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
 646              		.loc 1 47 0
 647 0430 0AC043E2 		sub	ip, r3, #10
 648 0434 FF300CE2 		and	r3, ip, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 649              		.loc 1 46 0
 650 0438 010082E2 		add	r0, r2, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 651              		.loc 1 44 0
 652 043c 090053E3 		cmp	r3, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 653              		.loc 1 46 0
 654 0440 FF2000E2 		and	r2, r0, #255
 655              	.LVL67:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 656              		.loc 1 44 0
 657 0444 F9FFFF8A 		bhi	.L61
 658 0448 0212A0E1 		mov	r1, r2, asl #4
 659 044c FF0001E2 		and	r0, r1, #255
 660              	.LVL68:
 661              	.L60:
 662              	.LBE69:
 663              	.LBE68:
 158:libstr91x/src/91x_rtc.c **** 	RTC->TR|=tmp;
 664              		.loc 1 158 0
 665 0450 3C119FE5 		ldr	r1, .L87
 157:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Time.seconds);
 666              		.loc 1 157 0
 667 0454 002083E1 		orr	r2, r3, r0
 668              		.loc 1 158 0
 669 0458 00C091E5 		ldr	ip, [r1, #0]
 159:libstr91x/src/91x_rtc.c ****         RTC->MILR = 0;
 160:libstr91x/src/91x_rtc.c **** 	RTC->MILR |= WORDToBCD3(Time.milliseconds);
 670              		.loc 1 160 0
 671 045c B430DDE1 		ldrh	r3, [sp, #4]
 672              	.LVL69:
 158:libstr91x/src/91x_rtc.c **** 	RTC->TR|=tmp;
 673              		.loc 1 158 0
 674 0460 0C0082E1 		orr	r0, r2, ip
 159:libstr91x/src/91x_rtc.c ****         RTC->MILR = 0;
 675              		.loc 1 159 0
 676 0464 0020A0E3 		mov	r2, #0
 158:libstr91x/src/91x_rtc.c **** 	RTC->TR|=tmp;
 677              		.loc 1 158 0
 678 0468 000081E5 		str	r0, [r1, #0]
 679              	.LBB70:
 680              	.LBB71:
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
 681              		.loc 1 61 0
 682 046c 630053E3 		cmp	r3, #99
 683              	.LBE71:
 684              	.LBE70:
 159:libstr91x/src/91x_rtc.c ****         RTC->MILR = 0;
 685              		.loc 1 159 0
 686 0470 142081E5 		str	r2, [r1, #20]
 687              		.loc 1 160 0
 688 0474 141091E5 		ldr	r1, [r1, #20]
 689              	.LBB73:
 690              	.LBB72:
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
 691              		.loc 1 61 0
 692 0478 1B00009A 		bls	.L62
 693 047c 64C043E2 		sub	ip, r3, #100
 694 0480 0C38A0E1 		mov	r3, ip, asl #16
 695              	.LVL70:
 696 0484 0C219FE5 		ldr	r2, .L87+4
 697 0488 2338A0E1 		mov	r3, r3, lsr #16
 698 048c 930282E0 		umull	r0, r2, r3, r2
 699 0490 630053E3 		cmp	r3, #99
 700 0494 A202A0E1 		mov	r0, r2, lsr #5
 701 0498 010000E2 		and	r0, r0, #1
  63:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 702              		.loc 1 63 0
 703 049c 0120A0E3 		mov	r2, #1
 704              	.LVL71:
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
 705              		.loc 1 61 0
 706 04a0 0F00009A 		bls	.L86
 707 04a4 000050E3 		cmp	r0, #0
 708 04a8 0500000A 		beq	.L63
  64:libstr91x/src/91x_rtc.c **** 		value -= 100;
 709              		.loc 1 64 0
 710 04ac 64C043E2 		sub	ip, r3, #100
 711 04b0 0C28A0E1 		mov	r2, ip, asl #16
 712 04b4 2238A0E1 		mov	r3, r2, lsr #16
 713              	.LVL72:
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
 714              		.loc 1 61 0
 715 04b8 630053E3 		cmp	r3, #99
  63:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 716              		.loc 1 63 0
 717 04bc 0220A0E3 		mov	r2, #2
 718              	.LVL73:
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
 719              		.loc 1 61 0
 720 04c0 0700009A 		bls	.L86
 721              	.LVL74:
 722              	.L63:
  64:libstr91x/src/91x_rtc.c **** 		value -= 100;
 723              		.loc 1 64 0
 724 04c4 03C8A0E1 		mov	ip, r3, asl #16
 725 04c8 32374CE2 		sub	r3, ip, #13107200
  63:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 726              		.loc 1 63 0
 727 04cc 0228A0E1 		mov	r2, r2, asl #16
  64:libstr91x/src/91x_rtc.c **** 		value -= 100;
 728              		.loc 1 64 0
 729 04d0 2338A0E1 		mov	r3, r3, lsr #16
  63:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 730              		.loc 1 63 0
 731 04d4 020882E2 		add	r0, r2, #131072
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
 732              		.loc 1 61 0
 733 04d8 630053E3 		cmp	r3, #99
  63:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 734              		.loc 1 63 0
 735 04dc 2028A0E1 		mov	r2, r0, lsr #16
 736              	.LVL75:
  61:libstr91x/src/91x_rtc.c **** 	while (value >= 100)
 737              		.loc 1 61 0
 738 04e0 F7FFFF8A 		bhi	.L63
 739              	.LVL76:
 740              	.L86:
 741 04e4 020AA0E1 		mov	r0, r2, asl #20
 742 04e8 2028A0E1 		mov	r2, r0, lsr #16
 743              	.L62:
 744              	.LVL77:
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 745              		.loc 1 67 0
 746 04ec 090053E3 		cmp	r3, #9
 747 04f0 1D00009A 		bls	.L64
 748 04f4 0AC043E2 		sub	ip, r3, #10
 749 04f8 0C38A0E1 		mov	r3, ip, asl #16
 750              	.LVL78:
 751 04fc 98009FE5 		ldr	r0, .L87+8
 752 0500 2338A0E1 		mov	r3, r3, lsr #16
 753 0504 93C080E0 		umull	ip, r0, r3, r0
 754              	.LVL79:
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 755              		.loc 1 69 0
 756 0508 012082E2 		add	r2, r2, #1
 757              	.LVL80:
 758 050c A0C1A0E1 		mov	ip, r0, lsr #3
 759 0510 0228A0E1 		mov	r2, r2, asl #16
 760              	.LVL81:
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 761              		.loc 1 67 0
 762 0514 090053E3 		cmp	r3, #9
 763 0518 01000CE2 		and	r0, ip, #1
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 764              		.loc 1 69 0
 765 051c 2228A0E1 		mov	r2, r2, lsr #16
 766              	.LVL82:
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 767              		.loc 1 67 0
 768 0520 1100009A 		bls	.L64
 769 0524 000050E3 		cmp	r0, #0
 770 0528 0700000A 		beq	.L70
  70:libstr91x/src/91x_rtc.c **** 		value -= 10;
 771              		.loc 1 70 0
 772 052c 0A0043E2 		sub	r0, r3, #10
 773 0530 0038A0E1 		mov	r3, r0, asl #16
 774              	.LVL83:
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 775              		.loc 1 69 0
 776 0534 01C082E2 		add	ip, r2, #1
  70:libstr91x/src/91x_rtc.c **** 		value -= 10;
 777              		.loc 1 70 0
 778 0538 2338A0E1 		mov	r3, r3, lsr #16
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 779              		.loc 1 69 0
 780 053c 0C28A0E1 		mov	r2, ip, asl #16
 781              	.LVL84:
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 782              		.loc 1 67 0
 783 0540 090053E3 		cmp	r3, #9
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 784              		.loc 1 69 0
 785 0544 2228A0E1 		mov	r2, r2, lsr #16
 786              	.LVL85:
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 787              		.loc 1 67 0
 788 0548 0700009A 		bls	.L64
 789              	.LVL86:
 790              	.L70:
  70:libstr91x/src/91x_rtc.c **** 		value -= 10;
 791              		.loc 1 70 0
 792 054c 03C8A0E1 		mov	ip, r3, asl #16
 793 0550 05374CE2 		sub	r3, ip, #1310720
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 794              		.loc 1 69 0
 795 0554 0208A0E1 		mov	r0, r2, asl #16
  70:libstr91x/src/91x_rtc.c **** 		value -= 10;
 796              		.loc 1 70 0
 797 0558 2338A0E1 		mov	r3, r3, lsr #16
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 798              		.loc 1 69 0
 799 055c 022880E2 		add	r2, r0, #131072
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 800              		.loc 1 67 0
 801 0560 090053E3 		cmp	r3, #9
  69:libstr91x/src/91x_rtc.c **** 		bcdhigh++;
 802              		.loc 1 69 0
 803 0564 2228A0E1 		mov	r2, r2, lsr #16
 804              	.LVL87:
  67:libstr91x/src/91x_rtc.c **** 	while (value >= 10)
 805              		.loc 1 67 0
 806 0568 F7FFFF8A 		bhi	.L70
 807              	.LVL88:
 808              	.L64:
  72:libstr91x/src/91x_rtc.c **** 	return  (bcdhigh << 4) | value;
 809              		.loc 1 72 0
 810 056c 020283E1 		orr	r0, r3, r2, asl #4
 811              	.LBE72:
 812              	.LBE73:
 813              		.loc 1 160 0
 814 0570 00C8A0E1 		mov	ip, r0, asl #16
 815 0574 18209FE5 		ldr	r2, .L87
 816 0578 2C3881E1 		orr	r3, r1, ip, lsr #16
 817 057c 143082E5 		str	r3, [r2, #20]
 161:libstr91x/src/91x_rtc.c **** 	RTC->CR &=~0x80; /*Disable write operation in TR register*/
 818              		.loc 1 161 0
 819 0580 0C0092E5 		ldr	r0, [r2, #12]
 820 0584 8010C0E3 		bic	r1, r0, #128
 821 0588 0C1082E5 		str	r1, [r2, #12]
 162:libstr91x/src/91x_rtc.c **** }
 822              		.loc 1 162 0
 823 058c 08D08DE2 		add	sp, sp, #8
 824 0590 1EFF2FE1 		bx	lr
 825              	.L88:
 826              		.align	2
 827              	.L87:
 828 0594 0010005C 		.word	1543507968
 829 0598 1F85EB51 		.word	1374389535
 830 059c CDCCCCCC 		.word	-858993459
 831              		.cfi_endproc
 832              	.LFE6:
 834              		.align	2
 835              		.global	RTC_SetAlarm
 837              	RTC_SetAlarm:
 838              	.LFB7:
 163:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 164:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_SetAlarm
 165:libstr91x/src/91x_rtc.c **** * Description    : Sets the Alarm register
 166:libstr91x/src/91x_rtc.c **** * Input          : Struct of type RTC_ALARM
 167:libstr91x/src/91x_rtc.c **** * Output         : Date
 168:libstr91x/src/91x_rtc.c **** * Return         : None
 169:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 170:libstr91x/src/91x_rtc.c **** void RTC_SetAlarm(RTC_ALARM Alarm)
 171:libstr91x/src/91x_rtc.c **** {
 839              		.loc 1 171 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 8
 842              		@ frame_needed = 0, uses_anonymous_args = 0
 843              		@ link register save eliminated.
 844              	.LVL89:
 172:libstr91x/src/91x_rtc.c **** 	u32 tmp = 0;
 173:libstr91x/src/91x_rtc.c **** 
 174:libstr91x/src/91x_rtc.c ****         RTC->CR |=0x80;  /*Enable write operation in ATR register*/
 845              		.loc 1 174 0
 846 05a0 44319FE5 		ldr	r3, .L106
 171:libstr91x/src/91x_rtc.c **** {
 847              		.loc 1 171 0
 848 05a4 08D04DE2 		sub	sp, sp, #8
 849              	.LCFI3:
 850              		.cfi_def_cfa_offset 8
 171:libstr91x/src/91x_rtc.c **** {
 851              		.loc 1 171 0
 852 05a8 04008DE5 		str	r0, [sp, #4]
 853              		.loc 1 174 0
 854 05ac 0C0093E5 		ldr	r0, [r3, #12]
 175:libstr91x/src/91x_rtc.c ****         RTC->ATR = 0;
 855              		.loc 1 175 0
 856 05b0 0020A0E3 		mov	r2, #0
 174:libstr91x/src/91x_rtc.c ****         RTC->CR |=0x80;  /*Enable write operation in ATR register*/
 857              		.loc 1 174 0
 858 05b4 801080E3 		orr	r1, r0, #128
 859 05b8 0C1083E5 		str	r1, [r3, #12]
 860              		.loc 1 175 0
 861 05bc 082083E5 		str	r2, [r3, #8]
 176:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Alarm.day);
 862              		.loc 1 176 0
 863 05c0 0430DDE5 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 864              	.LVL90:
 865              	.LBB74:
 866              	.LBB75:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 867              		.loc 1 44 0
 868 05c4 090053E3 		cmp	r3, #9
 869 05c8 0700009A 		bls	.L90
 870              	.LVL91:
 871              	.L91:
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
 872              		.loc 1 47 0
 873 05cc 0AC043E2 		sub	ip, r3, #10
 874 05d0 FF300CE2 		and	r3, ip, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 875              		.loc 1 46 0
 876 05d4 012082E2 		add	r2, r2, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 877              		.loc 1 44 0
 878 05d8 090053E3 		cmp	r3, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 879              		.loc 1 46 0
 880 05dc FF2002E2 		and	r2, r2, #255
 881              	.LVL92:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 882              		.loc 1 44 0
 883 05e0 F9FFFF8A 		bhi	.L91
 884 05e4 0212A0E1 		mov	r1, r2, asl #4
 885 05e8 FF2001E2 		and	r2, r1, #255
 886              	.LVL93:
 887              	.L90:
 888              	.LBE75:
 889              	.LBE74:
 177:libstr91x/src/91x_rtc.c **** 	RTC->ATR|=tmp<<24;
 890              		.loc 1 177 0
 891 05ec F8C09FE5 		ldr	ip, .L106
 176:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Alarm.day);
 892              		.loc 1 176 0
 893 05f0 021083E1 		orr	r1, r3, r2
 894              		.loc 1 177 0
 895 05f4 08009CE5 		ldr	r0, [ip, #8]
 896 05f8 013C80E1 		orr	r3, r0, r1, asl #24
 897              	.LVL94:
 898 05fc 08308CE5 		str	r3, [ip, #8]
 178:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Alarm.hours);
 899              		.loc 1 178 0
 900 0600 0530DDE5 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 901              	.LVL95:
 902              	.LBB76:
 903              	.LBB77:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 904              		.loc 1 44 0
 905 0604 090053E3 		cmp	r3, #9
 906 0608 0020A093 		movls	r2, #0
 907 060c 0800009A 		bls	.L92
 908 0610 0020A0E3 		mov	r2, #0
 909              	.LVL96:
 910              	.L93:
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
 911              		.loc 1 47 0
 912 0614 0AC043E2 		sub	ip, r3, #10
 913 0618 FF300CE2 		and	r3, ip, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 914              		.loc 1 46 0
 915 061c 012082E2 		add	r2, r2, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 916              		.loc 1 44 0
 917 0620 090053E3 		cmp	r3, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 918              		.loc 1 46 0
 919 0624 FF2002E2 		and	r2, r2, #255
 920              	.LVL97:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 921              		.loc 1 44 0
 922 0628 F9FFFF8A 		bhi	.L93
 923 062c 0212A0E1 		mov	r1, r2, asl #4
 924 0630 FF2001E2 		and	r2, r1, #255
 925              	.LVL98:
 926              	.L92:
 927              	.LBE77:
 928              	.LBE76:
 179:libstr91x/src/91x_rtc.c **** 	RTC->ATR|=tmp<<16;
 929              		.loc 1 179 0
 930 0634 B0C09FE5 		ldr	ip, .L106
 178:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Alarm.hours);
 931              		.loc 1 178 0
 932 0638 021083E1 		orr	r1, r3, r2
 933              		.loc 1 179 0
 934 063c 08009CE5 		ldr	r0, [ip, #8]
 935 0640 013880E1 		orr	r3, r0, r1, asl #16
 936              	.LVL99:
 937 0644 08308CE5 		str	r3, [ip, #8]
 180:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Alarm.minutes);
 938              		.loc 1 180 0
 939 0648 0630DDE5 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 940              	.LVL100:
 941              	.LBB78:
 942              	.LBB79:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 943              		.loc 1 44 0
 944 064c 090053E3 		cmp	r3, #9
 945 0650 0020A093 		movls	r2, #0
 946 0654 0800009A 		bls	.L94
 947 0658 0020A0E3 		mov	r2, #0
 948              	.LVL101:
 949              	.L95:
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
 950              		.loc 1 47 0
 951 065c 0AC043E2 		sub	ip, r3, #10
 952 0660 FF300CE2 		and	r3, ip, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 953              		.loc 1 46 0
 954 0664 012082E2 		add	r2, r2, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 955              		.loc 1 44 0
 956 0668 090053E3 		cmp	r3, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 957              		.loc 1 46 0
 958 066c FF2002E2 		and	r2, r2, #255
 959              	.LVL102:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 960              		.loc 1 44 0
 961 0670 F9FFFF8A 		bhi	.L95
 962 0674 0212A0E1 		mov	r1, r2, asl #4
 963 0678 FF2001E2 		and	r2, r1, #255
 964              	.LVL103:
 965              	.L94:
 966              	.LBE79:
 967              	.LBE78:
 181:libstr91x/src/91x_rtc.c **** 	RTC->ATR|=tmp<<8;
 968              		.loc 1 181 0
 969 067c 68C09FE5 		ldr	ip, .L106
 180:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Alarm.minutes);
 970              		.loc 1 180 0
 971 0680 021083E1 		orr	r1, r3, r2
 972              		.loc 1 181 0
 973 0684 08009CE5 		ldr	r0, [ip, #8]
 974 0688 013480E1 		orr	r3, r0, r1, asl #8
 975              	.LVL104:
 976 068c 08308CE5 		str	r3, [ip, #8]
 182:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Alarm.seconds);
 977              		.loc 1 182 0
 978 0690 0730DDE5 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 979              	.LVL105:
 980              	.LBB80:
 981              	.LBB81:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 982              		.loc 1 44 0
 983 0694 090053E3 		cmp	r3, #9
 984 0698 0020A093 		movls	r2, #0
 985 069c 0800009A 		bls	.L96
 986 06a0 0020A0E3 		mov	r2, #0
 987              	.LVL106:
 988              	.L97:
  47:libstr91x/src/91x_rtc.c ****     value -= 10;
 989              		.loc 1 47 0
 990 06a4 0AC043E2 		sub	ip, r3, #10
 991 06a8 FF300CE2 		and	r3, ip, #255
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 992              		.loc 1 46 0
 993 06ac 012082E2 		add	r2, r2, #1
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 994              		.loc 1 44 0
 995 06b0 090053E3 		cmp	r3, #9
  46:libstr91x/src/91x_rtc.c ****     bcdhigh++;
 996              		.loc 1 46 0
 997 06b4 FF2002E2 		and	r2, r2, #255
 998              	.LVL107:
  44:libstr91x/src/91x_rtc.c ****   while (value >= 10)
 999              		.loc 1 44 0
 1000 06b8 F9FFFF8A 		bhi	.L97
 1001 06bc 0212A0E1 		mov	r1, r2, asl #4
 1002 06c0 FF2001E2 		and	r2, r1, #255
 1003              	.LVL108:
 1004              	.L96:
 1005              	.LBE81:
 1006              	.LBE80:
 183:libstr91x/src/91x_rtc.c **** 	RTC->ATR|=tmp;
 1007              		.loc 1 183 0
 1008 06c4 20C09FE5 		ldr	ip, .L106
 182:libstr91x/src/91x_rtc.c **** 	tmp = BYTEToBCD2(Alarm.seconds);
 1009              		.loc 1 182 0
 1010 06c8 021083E1 		orr	r1, r3, r2
 1011              		.loc 1 183 0
 1012 06cc 08309CE5 		ldr	r3, [ip, #8]
 1013              	.LVL109:
 1014 06d0 032081E1 		orr	r2, r1, r3
 1015 06d4 08208CE5 		str	r2, [ip, #8]
 184:libstr91x/src/91x_rtc.c **** 	RTC->CR &=~0x80; /*Disable write operation in ATR register*/
 1016              		.loc 1 184 0
 1017 06d8 0C009CE5 		ldr	r0, [ip, #12]
 1018 06dc 8030C0E3 		bic	r3, r0, #128
 1019 06e0 0C308CE5 		str	r3, [ip, #12]
 185:libstr91x/src/91x_rtc.c **** }
 1020              		.loc 1 185 0
 1021 06e4 08D08DE2 		add	sp, sp, #8
 1022 06e8 1EFF2FE1 		bx	lr
 1023              	.L107:
 1024              		.align	2
 1025              	.L106:
 1026 06ec 0010005C 		.word	1543507968
 1027              		.cfi_endproc
 1028              	.LFE7:
 1030              		.align	2
 1031              		.global	RTC_GetDate
 1033              	RTC_GetDate:
 1034              	.LFB8:
 186:libstr91x/src/91x_rtc.c **** 
 187:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 188:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_GetDate
 189:libstr91x/src/91x_rtc.c **** * Description    : Gets RTC date in BCD coded or BINARY code
 190:libstr91x/src/91x_rtc.c **** * Input          : -Format: BCD or BINARY
 191:libstr91x/src/91x_rtc.c **** *                  -Date: pointer to structure of type RTC_DATE to be filled by function
 192:libstr91x/src/91x_rtc.c **** * Output         : None
 193:libstr91x/src/91x_rtc.c **** * Return         : None
 194:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 195:libstr91x/src/91x_rtc.c **** void RTC_GetDate(u8 Format, RTC_DATE * Date)
 196:libstr91x/src/91x_rtc.c **** {
 1035              		.loc 1 196 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 0
 1038              		@ frame_needed = 0, uses_anonymous_args = 0
 1039              		@ link register save eliminated.
 1040              	.LVL110:
 1041 06f0 F0052DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, sl}
 1042              	.LCFI4:
 1043              		.cfi_def_cfa_offset 24
 197:libstr91x/src/91x_rtc.c **** 	Date->century = (u8)((RTC->DTR&0xFF000000)>>24);
 1044              		.loc 1 197 0
 1045 06f4 BC309FE5 		ldr	r3, .L110
 198:libstr91x/src/91x_rtc.c **** 	Date->year = (u8)((RTC->DTR&0x00FF0000)>>16);
 199:libstr91x/src/91x_rtc.c **** 	Date->month = (u8)((RTC->DTR&0x00001F00)>>8);
 200:libstr91x/src/91x_rtc.c ****         Date->day = (u8)((RTC->TR&0x3F000000)>>24);
 201:libstr91x/src/91x_rtc.c **** 	Date->weekday = (u8)(RTC->DTR&0xF);
 202:libstr91x/src/91x_rtc.c **** 	if (Format == BINARY)
 1046              		.loc 1 202 0
 1047 06f8 000050E3 		cmp	r0, #0
 197:libstr91x/src/91x_rtc.c **** 	Date->century = (u8)((RTC->DTR&0xFF000000)>>24);
 1048              		.loc 1 197 0
 1049 06fc 042093E5 		ldr	r2, [r3, #4]
 1050 0700 222CA0E1 		mov	r2, r2, lsr #24
 1051 0704 FF7002E2 		and	r7, r2, #255
 1052              		.cfi_offset 10, -4
 1053              		.cfi_offset 8, -8
 1054              		.cfi_offset 7, -12
 1055              		.cfi_offset 6, -16
 1056              		.cfi_offset 5, -20
 1057              		.cfi_offset 4, -24
 1058 0708 0070C1E5 		strb	r7, [r1, #0]
 198:libstr91x/src/91x_rtc.c **** 	Date->year = (u8)((RTC->DTR&0x00FF0000)>>16);
 1059              		.loc 1 198 0
 1060 070c 046093E5 		ldr	r6, [r3, #4]
 1061 0710 FF4806E2 		and	r4, r6, #16711680
 1062 0714 2448A0E1 		mov	r4, r4, lsr #16
 1063 0718 FF6004E2 		and	r6, r4, #255
 1064 071c 0160C1E5 		strb	r6, [r1, #1]
 199:libstr91x/src/91x_rtc.c **** 	Date->month = (u8)((RTC->DTR&0x00001F00)>>8);
 1065              		.loc 1 199 0
 1066 0720 048093E5 		ldr	r8, [r3, #4]
 1067 0724 1FCC08E2 		and	ip, r8, #7936
 1068 0728 2CC4A0E1 		mov	ip, ip, lsr #8
 1069 072c FF800CE2 		and	r8, ip, #255
 1070 0730 0280C1E5 		strb	r8, [r1, #2]
 200:libstr91x/src/91x_rtc.c ****         Date->day = (u8)((RTC->TR&0x3F000000)>>24);
 1071              		.loc 1 200 0
 1072 0734 005093E5 		ldr	r5, [r3, #0]
 1073 0738 3F0405E2 		and	r0, r5, #1056964608
 1074              	.LVL111:
 1075 073c 200CA0E1 		mov	r0, r0, lsr #24
 1076 0740 FF5000E2 		and	r5, r0, #255
 1077 0744 0350C1E5 		strb	r5, [r1, #3]
 201:libstr91x/src/91x_rtc.c **** 	Date->weekday = (u8)(RTC->DTR&0xF);
 1078              		.loc 1 201 0
 1079 0748 04A093E5 		ldr	sl, [r3, #4]
 1080 074c 0F300AE2 		and	r3, sl, #15
 1081 0750 03A0A0E1 		mov	sl, r3
 1082 0754 0430C1E5 		strb	r3, [r1, #4]
 1083              		.loc 1 202 0
 1084 0758 1400001A 		bne	.L108
 1085              	.LVL112:
 1086              	.LBB82:
 1087              	.LBB84:
  97:libstr91x/src/91x_rtc.c ****   tmp= ((value&0xF0)>>4)*10;
 1088              		.loc 1 97 0
 1089 075c 2882A0E1 		mov	r8, r8, lsr #4
 1090 0760 0831A0E1 		mov	r3, r8, asl #2
 1091              	.LBE84:
 1092              	.LBE82:
 1093              	.LBB87:
 1094              	.LBB89:
 1095 0764 2552A0E1 		mov	r5, r5, lsr #4
 1096              	.LBE89:
 1097              	.LBE87:
 1098              	.LBB91:
 1099              	.LBB93:
 1100 0768 2772A0E1 		mov	r7, r7, lsr #4
 1101              	.LVL113:
 1102              	.LBE93:
 1103              	.LBE91:
 1104              	.LBB95:
 1105              	.LBB97:
 1106 076c 2662A0E1 		mov	r6, r6, lsr #4
 1107              	.LBE97:
 1108              	.LBE95:
 1109              	.LBB99:
 1110              	.LBB85:
 1111 0770 088083E0 		add	r8, r3, r8
 1112              	.LBE85:
 1113              	.LBE99:
 1114              	.LBB100:
 1115              	.LBB92:
 1116 0774 077187E0 		add	r7, r7, r7, asl #2
  98:libstr91x/src/91x_rtc.c ****   return (u8)(tmp+ (value&0x0F));	
 1117              		.loc 1 98 0
 1118 0778 0F2002E2 		and	r2, r2, #15
 1119              	.LBE92:
 1120              	.LBE100:
 1121              	.LBB101:
 1122              	.LBB96:
  97:libstr91x/src/91x_rtc.c ****   tmp= ((value&0xF0)>>4)*10;
 1123              		.loc 1 97 0
 1124 077c 066186E0 		add	r6, r6, r6, asl #2
  98:libstr91x/src/91x_rtc.c ****   return (u8)(tmp+ (value&0x0F));	
 1125              		.loc 1 98 0
 1126 0780 0F4004E2 		and	r4, r4, #15
 1127              	.LBE96:
 1128              	.LBE101:
 1129              	.LBB102:
 1130              	.LBB83:
 1131 0784 0FC00CE2 		and	ip, ip, #15
 1132              	.LBE83:
 1133              	.LBE102:
 1134              	.LBB103:
 1135              	.LBB88:
  97:libstr91x/src/91x_rtc.c ****   tmp= ((value&0xF0)>>4)*10;
 1136              		.loc 1 97 0
 1137 0788 053185E0 		add	r3, r5, r5, asl #2
  98:libstr91x/src/91x_rtc.c ****   return (u8)(tmp+ (value&0x0F));	
 1138              		.loc 1 98 0
 1139 078c 0F0000E2 		and	r0, r0, #15
 1140              	.LBE88:
 1141              	.LBE103:
 1142              	.LBB104:
 1143              	.LBB94:
 1144 0790 877082E0 		add	r7, r2, r7, asl #1
 1145              	.LBE94:
 1146              	.LBE104:
 1147              	.LBB105:
 1148              	.LBB98:
 1149 0794 866084E0 		add	r6, r4, r6, asl #1
 1150              	.LBE98:
 1151              	.LBE105:
 1152              	.LBB106:
 1153              	.LBB86:
 1154 0798 88808CE0 		add	r8, ip, r8, asl #1
 1155              	.LBE86:
 1156              	.LBE106:
 1157              	.LBB107:
 1158              	.LBB90:
 1159 079c 835080E0 		add	r5, r0, r3, asl #1
 1160              	.LBE90:
 1161              	.LBE107:
 203:libstr91x/src/91x_rtc.c **** 	{
 204:libstr91x/src/91x_rtc.c **** 		Date->century = BCD2ToBYTE(Date->century);
 1162              		.loc 1 204 0
 1163 07a0 0070C1E5 		strb	r7, [r1, #0]
 205:libstr91x/src/91x_rtc.c **** 		Date->year = BCD2ToBYTE(Date->year);
 1164              		.loc 1 205 0
 1165 07a4 0160C1E5 		strb	r6, [r1, #1]
 206:libstr91x/src/91x_rtc.c **** 		Date->month = BCD2ToBYTE(Date->month);
 1166              		.loc 1 206 0
 1167 07a8 0280C1E5 		strb	r8, [r1, #2]
 207:libstr91x/src/91x_rtc.c ****                 Date->day = BCD2ToBYTE(Date->day);
 1168              		.loc 1 207 0
 1169 07ac 0350C1E5 		strb	r5, [r1, #3]
 1170              	.LVL114:
 1171              	.L108:
 208:libstr91x/src/91x_rtc.c **** 		Date->weekday = BCD2ToBYTE(Date->weekday);
 209:libstr91x/src/91x_rtc.c **** 	}
 210:libstr91x/src/91x_rtc.c **** }
 1172              		.loc 1 210 0
 1173 07b0 F005BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, sl}
 1174 07b4 1EFF2FE1 		bx	lr
 1175              	.L111:
 1176              		.align	2
 1177              	.L110:
 1178 07b8 0010005C 		.word	1543507968
 1179              		.cfi_endproc
 1180              	.LFE8:
 1182              		.align	2
 1183              		.global	RTC_GetTime
 1185              	RTC_GetTime:
 1186              	.LFB9:
 211:libstr91x/src/91x_rtc.c **** 
 212:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 213:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_GetTime
 214:libstr91x/src/91x_rtc.c **** * Description    : Gets TIME in BCD coded or BINARY code
 215:libstr91x/src/91x_rtc.c **** * Input          : -Format: BCD or BINARY
 216:libstr91x/src/91x_rtc.c **** *                  -Time : pointer to structure of type RTC_TIME to be filled by function
 217:libstr91x/src/91x_rtc.c **** * Output         : Time
 218:libstr91x/src/91x_rtc.c **** * Return         : None
 219:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 220:libstr91x/src/91x_rtc.c **** void RTC_GetTime(u8 Format, RTC_TIME * Time)
 221:libstr91x/src/91x_rtc.c **** {
 1187              		.loc 1 221 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 0
 1190              		@ frame_needed = 0, uses_anonymous_args = 0
 1191              		@ link register save eliminated.
 1192              	.LVL115:
 1193 07bc F0012DE9 		stmfd	sp!, {r4, r5, r6, r7, r8}
 1194              	.LCFI5:
 1195              		.cfi_def_cfa_offset 20
 222:libstr91x/src/91x_rtc.c **** 	
 223:libstr91x/src/91x_rtc.c **** 	Time->hours = (u8)((RTC->TR&0x003F0000)>>16);
 1196              		.loc 1 223 0
 1197 07c0 B8309FE5 		ldr	r3, .L114
 224:libstr91x/src/91x_rtc.c **** 	Time->minutes = (u8)((RTC->TR&0x00007F00)>>8);
 225:libstr91x/src/91x_rtc.c **** 	Time->seconds = (u8)(RTC->TR&0x7F);
 226:libstr91x/src/91x_rtc.c ****         Time->milliseconds =(u16)(RTC->MILR&0xFFF);
 227:libstr91x/src/91x_rtc.c **** 	if (Format == BINARY)
 1198              		.loc 1 227 0
 1199 07c4 000050E3 		cmp	r0, #0
 223:libstr91x/src/91x_rtc.c **** 	Time->hours = (u8)((RTC->TR&0x003F0000)>>16);
 1200              		.loc 1 223 0
 1201 07c8 004093E5 		ldr	r4, [r3, #0]
 1202              		.cfi_offset 8, -4
 1203              		.cfi_offset 7, -8
 1204              		.cfi_offset 6, -12
 1205              		.cfi_offset 5, -16
 1206              		.cfi_offset 4, -20
 1207 07cc 3F2804E2 		and	r2, r4, #4128768
 1208 07d0 2228A0E1 		mov	r2, r2, lsr #16
 1209 07d4 FF6002E2 		and	r6, r2, #255
 1210 07d8 0060C1E5 		strb	r6, [r1, #0]
 224:libstr91x/src/91x_rtc.c **** 	Time->minutes = (u8)((RTC->TR&0x00007F00)>>8);
 1211              		.loc 1 224 0
 1212 07dc 000093E5 		ldr	r0, [r3, #0]
 1213              	.LVL116:
 1214 07e0 7FCC00E2 		and	ip, r0, #32512
 1215 07e4 2CC4A0E1 		mov	ip, ip, lsr #8
 1216 07e8 FF500CE2 		and	r5, ip, #255
 1217 07ec 0150C1E5 		strb	r5, [r1, #1]
 225:libstr91x/src/91x_rtc.c **** 	Time->seconds = (u8)(RTC->TR&0x7F);
 1218              		.loc 1 225 0
 1219 07f0 000093E5 		ldr	r0, [r3, #0]
 1220 07f4 7F4000E2 		and	r4, r0, #127
 1221 07f8 0240C1E5 		strb	r4, [r1, #2]
 226:libstr91x/src/91x_rtc.c ****         Time->milliseconds =(u16)(RTC->MILR&0xFFF);
 1222              		.loc 1 226 0
 1223 07fc 143093E5 		ldr	r3, [r3, #20]
 1224 0800 033AA0E1 		mov	r3, r3, asl #20
 1225 0804 233AA0E1 		mov	r3, r3, lsr #20
 1226 0808 B430C1E1 		strh	r3, [r1, #4]	@ movhi
 1227              		.loc 1 227 0
 1228 080c 1900001A 		bne	.L112
 1229              	.LVL117:
 1230              	.LBB108:
 1231              	.LBB110:
  84:libstr91x/src/91x_rtc.c ****   return (u16)((((value&0xF00)>>8)*100) + (((value&0x0F0)>>4)*10) + (value&0x0F));
 1232              		.loc 1 84 0
 1233 0810 F08003E2 		and	r8, r3, #240
 1234 0814 2374A0E1 		mov	r7, r3, lsr #8
 1235 0818 4882A0E1 		mov	r8, r8, asr #4
 1236 081c 077187E0 		add	r7, r7, r7, asl #2
 1237 0820 088188E0 		add	r8, r8, r8, asl #2
 1238              	.LBE110:
 1239              	.LBE108:
 1240              	.LBB113:
 1241              	.LBB115:
  97:libstr91x/src/91x_rtc.c ****   tmp= ((value&0xF0)>>4)*10;
 1242              		.loc 1 97 0
 1243 0824 2662A0E1 		mov	r6, r6, lsr #4
 1244              	.LVL118:
 1245              	.LBE115:
 1246              	.LBE113:
 1247              	.LBB117:
 1248              	.LBB119:
 1249 0828 2552A0E1 		mov	r5, r5, lsr #4
 1250              	.LBE119:
 1251              	.LBE117:
 1252              	.LBB121:
 1253              	.LBB123:
 1254 082c 2442A0E1 		mov	r4, r4, lsr #4
 1255              	.LBE123:
 1256              	.LBE121:
 1257              	.LBB125:
 1258              	.LBB111:
  84:libstr91x/src/91x_rtc.c ****   return (u16)((((value&0xF00)>>8)*100) + (((value&0x0F0)>>4)*10) + (value&0x0F));
 1259              		.loc 1 84 0
 1260 0830 077187E0 		add	r7, r7, r7, asl #2
 1261 0834 8880A0E1 		mov	r8, r8, asl #1
 1262              	.LBE111:
 1263              	.LBE125:
 1264              	.LBB126:
 1265              	.LBB114:
  97:libstr91x/src/91x_rtc.c ****   tmp= ((value&0xF0)>>4)*10;
 1266              		.loc 1 97 0
 1267 0838 066186E0 		add	r6, r6, r6, asl #2
  98:libstr91x/src/91x_rtc.c ****   return (u8)(tmp+ (value&0x0F));	
 1268              		.loc 1 98 0
 1269 083c 0F2002E2 		and	r2, r2, #15
 1270              	.LBE114:
 1271              	.LBE126:
 1272              	.LBB127:
 1273              	.LBB118:
  97:libstr91x/src/91x_rtc.c ****   tmp= ((value&0xF0)>>4)*10;
 1274              		.loc 1 97 0
 1275 0840 055185E0 		add	r5, r5, r5, asl #2
  98:libstr91x/src/91x_rtc.c ****   return (u8)(tmp+ (value&0x0F));	
 1276              		.loc 1 98 0
 1277 0844 0FC00CE2 		and	ip, ip, #15
 1278              	.LBE118:
 1279              	.LBE127:
 1280              	.LBB128:
 1281              	.LBB122:
  97:libstr91x/src/91x_rtc.c ****   tmp= ((value&0xF0)>>4)*10;
 1282              		.loc 1 97 0
 1283 0848 044184E0 		add	r4, r4, r4, asl #2
  98:libstr91x/src/91x_rtc.c ****   return (u8)(tmp+ (value&0x0F));	
 1284              		.loc 1 98 0
 1285 084c 0F0000E2 		and	r0, r0, #15
 1286              	.LBE122:
 1287              	.LBE128:
 1288              	.LBB129:
 1289              	.LBB109:
  84:libstr91x/src/91x_rtc.c ****   return (u16)((((value&0xF00)>>8)*100) + (((value&0x0F0)>>4)*10) + (value&0x0F));
 1290              		.loc 1 84 0
 1291 0850 077188E0 		add	r7, r8, r7, asl #2
 1292 0854 0F3003E2 		and	r3, r3, #15
 1293              	.LBE109:
 1294              	.LBE129:
 1295              	.LBB130:
 1296              	.LBB116:
  98:libstr91x/src/91x_rtc.c ****   return (u8)(tmp+ (value&0x0F));	
 1297              		.loc 1 98 0
 1298 0858 866082E0 		add	r6, r2, r6, asl #1
 1299              	.LBE116:
 1300              	.LBE130:
 1301              	.LBB131:
 1302              	.LBB120:
 1303 085c 85508CE0 		add	r5, ip, r5, asl #1
 1304              	.LBE120:
 1305              	.LBE131:
 1306              	.LBB132:
 1307              	.LBB124:
 1308 0860 844080E0 		add	r4, r0, r4, asl #1
 1309              	.LBE124:
 1310              	.LBE132:
 1311              	.LBB133:
 1312              	.LBB112:
  84:libstr91x/src/91x_rtc.c ****   return (u16)((((value&0xF00)>>8)*100) + (((value&0x0F0)>>4)*10) + (value&0x0F));
 1313              		.loc 1 84 0
 1314 0864 033087E0 		add	r3, r7, r3
 1315              	.LBE112:
 1316              	.LBE133:
 228:libstr91x/src/91x_rtc.c **** 	{
 229:libstr91x/src/91x_rtc.c **** 		Time->hours = BCD2ToBYTE(Time->hours);
 1317              		.loc 1 229 0
 1318 0868 0060C1E5 		strb	r6, [r1, #0]
 230:libstr91x/src/91x_rtc.c **** 		Time->minutes = BCD2ToBYTE(Time->minutes);
 1319              		.loc 1 230 0
 1320 086c 0150C1E5 		strb	r5, [r1, #1]
 231:libstr91x/src/91x_rtc.c ****                 Time->seconds = BCD2ToBYTE(Time->seconds);
 1321              		.loc 1 231 0
 1322 0870 0240C1E5 		strb	r4, [r1, #2]
 232:libstr91x/src/91x_rtc.c ****                 Time->milliseconds = BCD3ToWORD(Time->milliseconds);
 1323              		.loc 1 232 0
 1324 0874 B430C1E1 		strh	r3, [r1, #4]	@ movhi
 1325              	.L112:
 233:libstr91x/src/91x_rtc.c **** 	}
 234:libstr91x/src/91x_rtc.c **** }
 1326              		.loc 1 234 0
 1327 0878 F001BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8}
 1328 087c 1EFF2FE1 		bx	lr
 1329              	.L115:
 1330              		.align	2
 1331              	.L114:
 1332 0880 0010005C 		.word	1543507968
 1333              		.cfi_endproc
 1334              	.LFE9:
 1336              		.align	2
 1337              		.global	RTC_GetAlarm
 1339              	RTC_GetAlarm:
 1340              	.LFB10:
 235:libstr91x/src/91x_rtc.c **** 
 236:libstr91x/src/91x_rtc.c **** 
 237:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 238:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_GetAlarm
 239:libstr91x/src/91x_rtc.c **** * Description    : Gets the RTC Alarm in BCD or BINARY code
 240:libstr91x/src/91x_rtc.c **** * Input          : -Format: BCD or BINARY
 241:libstr91x/src/91x_rtc.c **** *                  -Alarm : pointer to structure of type RTC_ALARM to be filled by function
 242:libstr91x/src/91x_rtc.c **** * Output         : Alarm
 243:libstr91x/src/91x_rtc.c **** * Return         : None
 244:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 245:libstr91x/src/91x_rtc.c **** void RTC_GetAlarm(u8 Format,RTC_ALARM * Alarm)
 246:libstr91x/src/91x_rtc.c **** {
 1341              		.loc 1 246 0
 1342              		.cfi_startproc
 1343              		@ args = 0, pretend = 0, frame = 0
 1344              		@ frame_needed = 0, uses_anonymous_args = 0
 1345              		@ link register save eliminated.
 1346              	.LVL119:
 1347 0884 F0002DE9 		stmfd	sp!, {r4, r5, r6, r7}
 1348              	.LCFI6:
 1349              		.cfi_def_cfa_offset 16
 247:libstr91x/src/91x_rtc.c ****         Alarm->day = (u8)((RTC->ATR&0x3F000000)>>24);
 1350              		.loc 1 247 0
 1351 0888 A4309FE5 		ldr	r3, .L118
 248:libstr91x/src/91x_rtc.c **** 	Alarm->hours = (u8)((RTC->ATR&0x003F0000)>>16);
 249:libstr91x/src/91x_rtc.c **** 	Alarm->minutes = (u8)((RTC->ATR&0x00007F00)>>8);
 250:libstr91x/src/91x_rtc.c **** 	Alarm->seconds = (u8)((RTC->ATR)&0x7F);
 251:libstr91x/src/91x_rtc.c **** 	if (Format == BINARY)
 1352              		.loc 1 251 0
 1353 088c 000050E3 		cmp	r0, #0
 247:libstr91x/src/91x_rtc.c ****         Alarm->day = (u8)((RTC->ATR&0x3F000000)>>24);
 1354              		.loc 1 247 0
 1355 0890 086093E5 		ldr	r6, [r3, #8]
 1356              		.cfi_offset 7, -4
 1357              		.cfi_offset 6, -8
 1358              		.cfi_offset 5, -12
 1359              		.cfi_offset 4, -16
 1360 0894 3F2406E2 		and	r2, r6, #1056964608
 1361 0898 222CA0E1 		mov	r2, r2, lsr #24
 1362 089c FF7002E2 		and	r7, r2, #255
 1363 08a0 0070C1E5 		strb	r7, [r1, #0]
 248:libstr91x/src/91x_rtc.c **** 	Alarm->hours = (u8)((RTC->ATR&0x003F0000)>>16);
 1364              		.loc 1 248 0
 1365 08a4 085093E5 		ldr	r5, [r3, #8]
 1366 08a8 3FC805E2 		and	ip, r5, #4128768
 1367 08ac 2CC8A0E1 		mov	ip, ip, lsr #16
 1368 08b0 FF600CE2 		and	r6, ip, #255
 1369 08b4 0160C1E5 		strb	r6, [r1, #1]
 249:libstr91x/src/91x_rtc.c **** 	Alarm->minutes = (u8)((RTC->ATR&0x00007F00)>>8);
 1370              		.loc 1 249 0
 1371 08b8 084093E5 		ldr	r4, [r3, #8]
 1372 08bc 7F0C04E2 		and	r0, r4, #32512
 1373              	.LVL120:
 1374 08c0 2004A0E1 		mov	r0, r0, lsr #8
 1375 08c4 FF5000E2 		and	r5, r0, #255
 1376 08c8 0250C1E5 		strb	r5, [r1, #2]
 250:libstr91x/src/91x_rtc.c **** 	Alarm->seconds = (u8)((RTC->ATR)&0x7F);
 1377              		.loc 1 250 0
 1378 08cc 083093E5 		ldr	r3, [r3, #8]
 1379 08d0 7F4003E2 		and	r4, r3, #127
 1380 08d4 0340C1E5 		strb	r4, [r1, #3]
 1381              		.loc 1 251 0
 1382 08d8 1300001A 		bne	.L116
 1383              	.LVL121:
 1384              	.LBB134:
 1385              	.LBB136:
  97:libstr91x/src/91x_rtc.c ****   tmp= ((value&0xF0)>>4)*10;
 1386              		.loc 1 97 0
 1387 08dc 2772A0E1 		mov	r7, r7, lsr #4
 1388              	.LVL122:
 1389              	.LBE136:
 1390              	.LBE134:
 1391              	.LBB138:
 1392              	.LBB140:
 1393 08e0 2662A0E1 		mov	r6, r6, lsr #4
 1394              	.LBE140:
 1395              	.LBE138:
 1396              	.LBB142:
 1397              	.LBB144:
 1398 08e4 2552A0E1 		mov	r5, r5, lsr #4
 1399              	.LBE144:
 1400              	.LBE142:
 1401              	.LBB146:
 1402              	.LBB148:
 1403 08e8 2442A0E1 		mov	r4, r4, lsr #4
 1404              	.LBE148:
 1405              	.LBE146:
 1406              	.LBB150:
 1407              	.LBB135:
 1408 08ec 077187E0 		add	r7, r7, r7, asl #2
  98:libstr91x/src/91x_rtc.c ****   return (u8)(tmp+ (value&0x0F));	
 1409              		.loc 1 98 0
 1410 08f0 0F2002E2 		and	r2, r2, #15
 1411              	.LVL123:
 1412              	.LBE135:
 1413              	.LBE150:
 1414              	.LBB151:
 1415              	.LBB139:
  97:libstr91x/src/91x_rtc.c ****   tmp= ((value&0xF0)>>4)*10;
 1416              		.loc 1 97 0
 1417 08f4 066186E0 		add	r6, r6, r6, asl #2
  98:libstr91x/src/91x_rtc.c ****   return (u8)(tmp+ (value&0x0F));	
 1418              		.loc 1 98 0
 1419 08f8 0FC00CE2 		and	ip, ip, #15
 1420              	.LBE139:
 1421              	.LBE151:
 1422              	.LBB152:
 1423              	.LBB143:
  97:libstr91x/src/91x_rtc.c ****   tmp= ((value&0xF0)>>4)*10;
 1424              		.loc 1 97 0
 1425 08fc 055185E0 		add	r5, r5, r5, asl #2
  98:libstr91x/src/91x_rtc.c ****   return (u8)(tmp+ (value&0x0F));	
 1426              		.loc 1 98 0
 1427 0900 0F0000E2 		and	r0, r0, #15
 1428              	.LBE143:
 1429              	.LBE152:
 1430              	.LBB153:
 1431              	.LBB147:
  97:libstr91x/src/91x_rtc.c ****   tmp= ((value&0xF0)>>4)*10;
 1432              		.loc 1 97 0
 1433 0904 044184E0 		add	r4, r4, r4, asl #2
  98:libstr91x/src/91x_rtc.c ****   return (u8)(tmp+ (value&0x0F));	
 1434              		.loc 1 98 0
 1435 0908 0F3003E2 		and	r3, r3, #15
 1436              	.LBE147:
 1437              	.LBE153:
 1438              	.LBB154:
 1439              	.LBB137:
 1440 090c 877082E0 		add	r7, r2, r7, asl #1
 1441              	.LBE137:
 1442              	.LBE154:
 1443              	.LBB155:
 1444              	.LBB141:
 1445 0910 86608CE0 		add	r6, ip, r6, asl #1
 1446              	.LBE141:
 1447              	.LBE155:
 1448              	.LBB156:
 1449              	.LBB145:
 1450 0914 855080E0 		add	r5, r0, r5, asl #1
 1451              	.LBE145:
 1452              	.LBE156:
 1453              	.LBB157:
 1454              	.LBB149:
 1455 0918 844083E0 		add	r4, r3, r4, asl #1
 1456              	.LBE149:
 1457              	.LBE157:
 252:libstr91x/src/91x_rtc.c **** 	{
 253:libstr91x/src/91x_rtc.c **** 		Alarm->day = BCD2ToBYTE(Alarm->day);
 1458              		.loc 1 253 0
 1459 091c 0070C1E5 		strb	r7, [r1, #0]
 254:libstr91x/src/91x_rtc.c **** 		Alarm->hours = BCD2ToBYTE(Alarm->hours);
 1460              		.loc 1 254 0
 1461 0920 0160C1E5 		strb	r6, [r1, #1]
 255:libstr91x/src/91x_rtc.c **** 		Alarm->minutes = BCD2ToBYTE(Alarm->minutes);
 1462              		.loc 1 255 0
 1463 0924 0250C1E5 		strb	r5, [r1, #2]
 256:libstr91x/src/91x_rtc.c **** 		Alarm->seconds = BCD2ToBYTE(Alarm->seconds);
 1464              		.loc 1 256 0
 1465 0928 0340C1E5 		strb	r4, [r1, #3]
 1466              	.L116:
 257:libstr91x/src/91x_rtc.c **** 	}
 258:libstr91x/src/91x_rtc.c **** }
 1467              		.loc 1 258 0
 1468 092c F000BDE8 		ldmfd	sp!, {r4, r5, r6, r7}
 1469 0930 1EFF2FE1 		bx	lr
 1470              	.L119:
 1471              		.align	2
 1472              	.L118:
 1473 0934 0010005C 		.word	1543507968
 1474              		.cfi_endproc
 1475              	.LFE10:
 1477              		.align	2
 1478              		.global	RTC_TamperConfig
 1480              	RTC_TamperConfig:
 1481              	.LFB11:
 259:libstr91x/src/91x_rtc.c **** 
 260:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 261:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_TamperConfig
 262:libstr91x/src/91x_rtc.c **** * Description    : configures the Tamper mode and tamper polarity
 263:libstr91x/src/91x_rtc.c **** * Input          : -TamperMode: RTC_TamperMode_Edge or RTC_TamperMode_Level
 264:libstr91x/src/91x_rtc.c **** *                  -TamperPol : RTC_TamperPol_Low or RTC_TamperMode_High
 265:libstr91x/src/91x_rtc.c **** * Output         : None
 266:libstr91x/src/91x_rtc.c **** * Return         : None
 267:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 268:libstr91x/src/91x_rtc.c **** void RTC_TamperConfig(u32 TamperMode, u32 TamperPol)
 269:libstr91x/src/91x_rtc.c **** {
 1482              		.loc 1 269 0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 0
 1485              		@ frame_needed = 0, uses_anonymous_args = 0
 1486              		@ link register save eliminated.
 1487              	.LVL124:
 270:libstr91x/src/91x_rtc.c **** 	RTC->CR&=RTC_TamperMode_Edge;
 1488              		.loc 1 270 0
 1489 0938 3C309FE5 		ldr	r3, .L123
 271:libstr91x/src/91x_rtc.c **** 	if (TamperMode!=RTC_TamperMode_Edge)
 1490              		.loc 1 271 0
 1491 093c 110070E3 		cmn	r0, #17
 270:libstr91x/src/91x_rtc.c **** 	RTC->CR&=RTC_TamperMode_Edge;
 1492              		.loc 1 270 0
 1493 0940 0C2093E5 		ldr	r2, [r3, #12]
 1494 0944 10C0C2E3 		bic	ip, r2, #16
 1495 0948 0CC083E5 		str	ip, [r3, #12]
 272:libstr91x/src/91x_rtc.c **** 	RTC->CR|=RTC_TamperMode_Level;
 1496              		.loc 1 272 0
 1497 094c 0CC09315 		ldrne	ip, [r3, #12]
 1498 0950 10C08C13 		orrne	ip, ip, #16
 1499 0954 0CC08315 		strne	ip, [r3, #12]
 273:libstr91x/src/91x_rtc.c **** 	
 274:libstr91x/src/91x_rtc.c **** 	RTC->CR&=RTC_TamperPol_Low;
 1500              		.loc 1 274 0
 1501 0958 1C309FE5 		ldr	r3, .L123
 275:libstr91x/src/91x_rtc.c **** 	if (TamperPol!=RTC_TamperPol_Low)
 1502              		.loc 1 275 0
 1503 095c 050071E3 		cmn	r1, #5
 274:libstr91x/src/91x_rtc.c **** 	RTC->CR&=RTC_TamperPol_Low;
 1504              		.loc 1 274 0
 1505 0960 0C0093E5 		ldr	r0, [r3, #12]
 1506              	.LVL125:
 1507 0964 0420C0E3 		bic	r2, r0, #4
 1508 0968 0C2083E5 		str	r2, [r3, #12]
 276:libstr91x/src/91x_rtc.c **** 	RTC->CR|=RTC_TamperPol_High;
 1509              		.loc 1 276 0
 1510 096c 0C209315 		ldrne	r2, [r3, #12]
 1511 0970 04208213 		orrne	r2, r2, #4
 1512 0974 0C208315 		strne	r2, [r3, #12]
 1513 0978 1EFF2FE1 		bx	lr
 1514              	.L124:
 1515              		.align	2
 1516              	.L123:
 1517 097c 0010005C 		.word	1543507968
 1518              		.cfi_endproc
 1519              	.LFE11:
 1521              		.align	2
 1522              		.global	RTC_TamperCmd
 1524              	RTC_TamperCmd:
 1525              	.LFB12:
 277:libstr91x/src/91x_rtc.c **** }
 278:libstr91x/src/91x_rtc.c **** 
 279:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 280:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_TamperCmd
 281:libstr91x/src/91x_rtc.c **** * Description    : Enable or Disable Tamper
 282:libstr91x/src/91x_rtc.c **** * Input          : NewState: ENABLE or DISABLE
 283:libstr91x/src/91x_rtc.c **** * Output         : None
 284:libstr91x/src/91x_rtc.c **** * Return         : None
 285:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 286:libstr91x/src/91x_rtc.c **** void RTC_TamperCmd(FunctionalState NewState)
 287:libstr91x/src/91x_rtc.c **** {
 1526              		.loc 1 287 0
 1527              		.cfi_startproc
 1528              		@ args = 0, pretend = 0, frame = 0
 1529              		@ frame_needed = 0, uses_anonymous_args = 0
 1530              		@ link register save eliminated.
 1531              	.LVL126:
 288:libstr91x/src/91x_rtc.c **** 	RTC->CR&=0xFFFFFFFE;
 1532              		.loc 1 288 0
 1533 0980 1C309FE5 		ldr	r3, .L127
 289:libstr91x/src/91x_rtc.c **** 	if (NewState==ENABLE)
 1534              		.loc 1 289 0
 1535 0984 010050E3 		cmp	r0, #1
 288:libstr91x/src/91x_rtc.c **** 	RTC->CR&=0xFFFFFFFE;
 1536              		.loc 1 288 0
 1537 0988 0C0093E5 		ldr	r0, [r3, #12]
 1538              	.LVL127:
 1539 098c 0120C0E3 		bic	r2, r0, #1
 1540 0990 0C2083E5 		str	r2, [r3, #12]
 290:libstr91x/src/91x_rtc.c **** 	RTC->CR|=0x1;
 1541              		.loc 1 290 0
 1542 0994 0C209305 		ldreq	r2, [r3, #12]
 1543 0998 01208203 		orreq	r2, r2, #1
 1544 099c 0C208305 		streq	r2, [r3, #12]
 1545 09a0 1EFF2FE1 		bx	lr
 1546              	.L128:
 1547              		.align	2
 1548              	.L127:
 1549 09a4 0010005C 		.word	1543507968
 1550              		.cfi_endproc
 1551              	.LFE12:
 1553              		.align	2
 1554              		.global	RTC_AlarmCmd
 1556              	RTC_AlarmCmd:
 1557              	.LFB13:
 291:libstr91x/src/91x_rtc.c **** }
 292:libstr91x/src/91x_rtc.c **** 
 293:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 294:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_AlarmCmd
 295:libstr91x/src/91x_rtc.c **** * Description    : Enable or Disable Alarm
 296:libstr91x/src/91x_rtc.c **** * Input          : NewState: ENABLE or DISABLE
 297:libstr91x/src/91x_rtc.c **** * Output         : None
 298:libstr91x/src/91x_rtc.c **** * Return         : None
 299:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 300:libstr91x/src/91x_rtc.c **** void RTC_AlarmCmd(FunctionalState NewState)
 301:libstr91x/src/91x_rtc.c **** {
 1558              		.loc 1 301 0
 1559              		.cfi_startproc
 1560              		@ args = 0, pretend = 0, frame = 0
 1561              		@ frame_needed = 0, uses_anonymous_args = 0
 1562              		@ link register save eliminated.
 1563              	.LVL128:
 302:libstr91x/src/91x_rtc.c **** 	RTC->CR&=~0x100000;
 1564              		.loc 1 302 0
 1565 09a8 1C309FE5 		ldr	r3, .L131
 303:libstr91x/src/91x_rtc.c **** 	if (NewState==ENABLE)
 1566              		.loc 1 303 0
 1567 09ac 010050E3 		cmp	r0, #1
 302:libstr91x/src/91x_rtc.c **** 	RTC->CR&=~0x100000;
 1568              		.loc 1 302 0
 1569 09b0 0C0093E5 		ldr	r0, [r3, #12]
 1570              	.LVL129:
 1571 09b4 0126C0E3 		bic	r2, r0, #1048576
 1572 09b8 0C2083E5 		str	r2, [r3, #12]
 304:libstr91x/src/91x_rtc.c **** 	RTC->CR|=0x100000;
 1573              		.loc 1 304 0
 1574 09bc 0C209305 		ldreq	r2, [r3, #12]
 1575 09c0 01268203 		orreq	r2, r2, #1048576
 1576 09c4 0C208305 		streq	r2, [r3, #12]
 1577 09c8 1EFF2FE1 		bx	lr
 1578              	.L132:
 1579              		.align	2
 1580              	.L131:
 1581 09cc 0010005C 		.word	1543507968
 1582              		.cfi_endproc
 1583              	.LFE13:
 1585              		.align	2
 1586              		.global	RTC_CalibClockCmd
 1588              	RTC_CalibClockCmd:
 1589              	.LFB14:
 305:libstr91x/src/91x_rtc.c **** }
 306:libstr91x/src/91x_rtc.c **** 
 307:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 308:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_CalibClockCmd
 309:libstr91x/src/91x_rtc.c **** * Description    : Enable or Disable RTC Calibration Clock Output
 310:libstr91x/src/91x_rtc.c **** * Input          : NewState: ENABLE or DISABLE
 311:libstr91x/src/91x_rtc.c **** * Output         : None
 312:libstr91x/src/91x_rtc.c **** * Return         : None
 313:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 314:libstr91x/src/91x_rtc.c **** void RTC_CalibClockCmd(FunctionalState NewState)
 315:libstr91x/src/91x_rtc.c **** {
 1590              		.loc 1 315 0
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 0
 1593              		@ frame_needed = 0, uses_anonymous_args = 0
 1594              		@ link register save eliminated.
 1595              	.LVL130:
 316:libstr91x/src/91x_rtc.c **** 	RTC->CR&=~0x40;
 1596              		.loc 1 316 0
 1597 09d0 1C309FE5 		ldr	r3, .L135
 317:libstr91x/src/91x_rtc.c **** 	if (NewState ==ENABLE)
 1598              		.loc 1 317 0
 1599 09d4 010050E3 		cmp	r0, #1
 316:libstr91x/src/91x_rtc.c **** 	RTC->CR&=~0x40;
 1600              		.loc 1 316 0
 1601 09d8 0C0093E5 		ldr	r0, [r3, #12]
 1602              	.LVL131:
 1603 09dc 4020C0E3 		bic	r2, r0, #64
 1604 09e0 0C2083E5 		str	r2, [r3, #12]
 318:libstr91x/src/91x_rtc.c **** 	RTC->CR|=0x40;
 1605              		.loc 1 318 0
 1606 09e4 0C209305 		ldreq	r2, [r3, #12]
 1607 09e8 40208203 		orreq	r2, r2, #64
 1608 09ec 0C208305 		streq	r2, [r3, #12]
 1609 09f0 1EFF2FE1 		bx	lr
 1610              	.L136:
 1611              		.align	2
 1612              	.L135:
 1613 09f4 0010005C 		.word	1543507968
 1614              		.cfi_endproc
 1615              	.LFE14:
 1617              		.align	2
 1618              		.global	RTC_SRAMBattPowerCmd
 1620              	RTC_SRAMBattPowerCmd:
 1621              	.LFB15:
 319:libstr91x/src/91x_rtc.c **** }
 320:libstr91x/src/91x_rtc.c **** 
 321:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 322:libstr91x/src/91x_rtc.c **** * Function Name  : SRAMBattPowerCmd
 323:libstr91x/src/91x_rtc.c **** * Description    : Enable or Disable SRAM backup Power by VBATT
 324:libstr91x/src/91x_rtc.c **** * Input          : NewState : ENABLE or DISABLE
 325:libstr91x/src/91x_rtc.c **** * Output         : None
 326:libstr91x/src/91x_rtc.c **** * Return         : None
 327:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 328:libstr91x/src/91x_rtc.c **** void RTC_SRAMBattPowerCmd(FunctionalState NewState)
 329:libstr91x/src/91x_rtc.c **** {
 1622              		.loc 1 329 0
 1623              		.cfi_startproc
 1624              		@ args = 0, pretend = 0, frame = 0
 1625              		@ frame_needed = 0, uses_anonymous_args = 0
 1626              		@ link register save eliminated.
 1627              	.LVL132:
 330:libstr91x/src/91x_rtc.c **** 	RTC->CR&=~0x8;
 1628              		.loc 1 330 0
 1629 09f8 1C309FE5 		ldr	r3, .L139
 331:libstr91x/src/91x_rtc.c **** 	if (NewState ==ENABLE)
 1630              		.loc 1 331 0
 1631 09fc 010050E3 		cmp	r0, #1
 330:libstr91x/src/91x_rtc.c **** 	RTC->CR&=~0x8;
 1632              		.loc 1 330 0
 1633 0a00 0C0093E5 		ldr	r0, [r3, #12]
 1634              	.LVL133:
 1635 0a04 0820C0E3 		bic	r2, r0, #8
 1636 0a08 0C2083E5 		str	r2, [r3, #12]
 332:libstr91x/src/91x_rtc.c **** 	RTC->CR|=0x8;
 1637              		.loc 1 332 0
 1638 0a0c 0C209305 		ldreq	r2, [r3, #12]
 1639 0a10 08208203 		orreq	r2, r2, #8
 1640 0a14 0C208305 		streq	r2, [r3, #12]
 1641 0a18 1EFF2FE1 		bx	lr
 1642              	.L140:
 1643              		.align	2
 1644              	.L139:
 1645 0a1c 0010005C 		.word	1543507968
 1646              		.cfi_endproc
 1647              	.LFE15:
 1649              		.align	2
 1650              		.global	RTC_PeriodicIntConfig
 1652              	RTC_PeriodicIntConfig:
 1653              	.LFB16:
 333:libstr91x/src/91x_rtc.c **** }
 334:libstr91x/src/91x_rtc.c **** 
 335:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 336:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_PeridicIntConfig
 337:libstr91x/src/91x_rtc.c **** * Description    : Select a Periodic CLock
 338:libstr91x/src/91x_rtc.c **** * Input          : PeriodicClock
 339:libstr91x/src/91x_rtc.c **** * Output         : None
 340:libstr91x/src/91x_rtc.c **** * Return         : None
 341:libstr91x/src/91x_rtc.c **** * Note           : When PeriodicClock = RTC_Per_DISABLE the Periodic clock generation
 342:libstr91x/src/91x_rtc.c **** *                  will be disabled.
 343:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 344:libstr91x/src/91x_rtc.c **** void RTC_PeriodicIntConfig(u32 PeriodicClock)
 345:libstr91x/src/91x_rtc.c **** {
 1654              		.loc 1 345 0
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 0
 1657              		@ frame_needed = 0, uses_anonymous_args = 0
 1658              		@ link register save eliminated.
 1659              	.LVL134:
 346:libstr91x/src/91x_rtc.c **** 	RTC->CR &=~0xF0000;
 1660              		.loc 1 346 0
 1661 0a20 18309FE5 		ldr	r3, .L142
 1662 0a24 0C2093E5 		ldr	r2, [r3, #12]
 1663 0a28 0FC8C2E3 		bic	ip, r2, #983040
 1664 0a2c 0CC083E5 		str	ip, [r3, #12]
 347:libstr91x/src/91x_rtc.c **** 	RTC->CR|=PeriodicClock;
 1665              		.loc 1 347 0
 1666 0a30 0C1093E5 		ldr	r1, [r3, #12]
 1667 0a34 012080E1 		orr	r2, r0, r1
 1668 0a38 0C2083E5 		str	r2, [r3, #12]
 348:libstr91x/src/91x_rtc.c **** }
 1669              		.loc 1 348 0
 1670 0a3c 1EFF2FE1 		bx	lr
 1671              	.L143:
 1672              		.align	2
 1673              	.L142:
 1674 0a40 0010005C 		.word	1543507968
 1675              		.cfi_endproc
 1676              	.LFE16:
 1678              		.align	2
 1679              		.global	RTC_ITConfig
 1681              	RTC_ITConfig:
 1682              	.LFB17:
 349:libstr91x/src/91x_rtc.c **** 
 350:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 351:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_ITConfig
 352:libstr91x/src/91x_rtc.c **** * Description    : Enable or Disable an interrupt
 353:libstr91x/src/91x_rtc.c **** * Input          : -RTC_IT : RTC interrupt
 354:libstr91x/src/91x_rtc.c **** *                  -Newstate: Enable or Disable
 355:libstr91x/src/91x_rtc.c **** * Output         : None
 356:libstr91x/src/91x_rtc.c **** * Return         : None
 357:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 358:libstr91x/src/91x_rtc.c **** void RTC_ITConfig(u32 RTC_IT, FunctionalState NewState)
 359:libstr91x/src/91x_rtc.c **** {
 1683              		.loc 1 359 0
 1684              		.cfi_startproc
 1685              		@ args = 0, pretend = 0, frame = 0
 1686              		@ frame_needed = 0, uses_anonymous_args = 0
 1687              		@ link register save eliminated.
 1688              	.LVL135:
 360:libstr91x/src/91x_rtc.c **** 	RTC->CR&=~RTC_IT;
 1689              		.loc 1 360 0
 1690 0a44 1C309FE5 		ldr	r3, .L146
 361:libstr91x/src/91x_rtc.c **** 	if (NewState==ENABLE)
 1691              		.loc 1 361 0
 1692 0a48 010051E3 		cmp	r1, #1
 360:libstr91x/src/91x_rtc.c **** 	RTC->CR&=~RTC_IT;
 1693              		.loc 1 360 0
 1694 0a4c 0CC093E5 		ldr	ip, [r3, #12]
 1695 0a50 0020CCE1 		bic	r2, ip, r0
 1696 0a54 0C2083E5 		str	r2, [r3, #12]
 362:libstr91x/src/91x_rtc.c **** 	RTC->CR|=RTC_IT;
 1697              		.loc 1 362 0
 1698 0a58 0C209305 		ldreq	r2, [r3, #12]
 1699 0a5c 02008001 		orreq	r0, r0, r2
 1700              	.LVL136:
 1701 0a60 0C008305 		streq	r0, [r3, #12]
 1702 0a64 1EFF2FE1 		bx	lr
 1703              	.L147:
 1704              		.align	2
 1705              	.L146:
 1706 0a68 0010005C 		.word	1543507968
 1707              		.cfi_endproc
 1708              	.LFE17:
 1710              		.align	2
 1711              		.global	RTC_GetFlagStatus
 1713              	RTC_GetFlagStatus:
 1714              	.LFB18:
 363:libstr91x/src/91x_rtc.c **** }
 364:libstr91x/src/91x_rtc.c **** 
 365:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 366:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_GetFlagStatus
 367:libstr91x/src/91x_rtc.c **** * Description    : Gets a RTC flag status 
 368:libstr91x/src/91x_rtc.c **** * Input          : RTC_FLAG
 369:libstr91x/src/91x_rtc.c **** * Output         : None
 370:libstr91x/src/91x_rtc.c **** * Return         : FlagStatus :SET or RESET
 371:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 372:libstr91x/src/91x_rtc.c **** FlagStatus RTC_GetFlagStatus(u32 RTC_FLAG)
 373:libstr91x/src/91x_rtc.c **** {
 1715              		.loc 1 373 0
 1716              		.cfi_startproc
 1717              		@ args = 0, pretend = 0, frame = 0
 1718              		@ frame_needed = 0, uses_anonymous_args = 0
 1719              		@ link register save eliminated.
 1720              	.LVL137:
 374:libstr91x/src/91x_rtc.c **** 	if (RTC->SR&RTC_FLAG) return SET;
 1721              		.loc 1 374 0
 1722 0a6c 10109FE5 		ldr	r1, .L149
 1723 0a70 103091E5 		ldr	r3, [r1, #16]
 1724 0a74 030010E1 		tst	r0, r3
 375:libstr91x/src/91x_rtc.c **** 	else return RESET;
 376:libstr91x/src/91x_rtc.c **** }
 1725              		.loc 1 376 0
 1726 0a78 0000A003 		moveq	r0, #0
 1727 0a7c 0100A013 		movne	r0, #1
 1728              	.LVL138:
 1729 0a80 1EFF2FE1 		bx	lr
 1730              	.L150:
 1731              		.align	2
 1732              	.L149:
 1733 0a84 0010005C 		.word	1543507968
 1734              		.cfi_endproc
 1735              	.LFE18:
 1737              		.align	2
 1738              		.global	RTC_ClearFlag
 1740              	RTC_ClearFlag:
 1741              	.LFB19:
 377:libstr91x/src/91x_rtc.c **** 
 378:libstr91x/src/91x_rtc.c **** /*******************************************************************************
 379:libstr91x/src/91x_rtc.c **** * Function Name  : RTC_ClearFlag
 380:libstr91x/src/91x_rtc.c **** * Description    : Clears a RTC flag
 381:libstr91x/src/91x_rtc.c **** * Input          : RTC_FLAG
 382:libstr91x/src/91x_rtc.c **** * Output         : None
 383:libstr91x/src/91x_rtc.c **** * Return         : None
 384:libstr91x/src/91x_rtc.c **** * Note           : Before clearing the RTC Periodic Flag you need to disable the 
 385:libstr91x/src/91x_rtc.c **** *                  Periodic interrupt generation, to do this use function 
 386:libstr91x/src/91x_rtc.c **** *                  RTC_PeriodicIntConfig(RTC_Per_DISABLE)
 387:libstr91x/src/91x_rtc.c **** *******************************************************************************/
 388:libstr91x/src/91x_rtc.c **** void RTC_ClearFlag(u32 RTC_FLAG)
 389:libstr91x/src/91x_rtc.c **** {
 1742              		.loc 1 389 0
 1743              		.cfi_startproc
 1744              		@ args = 0, pretend = 0, frame = 8
 1745              		@ frame_needed = 0, uses_anonymous_args = 0
 1746              		@ link register save eliminated.
 1747              	.LVL139:
 1748 0a88 08D04DE2 		sub	sp, sp, #8
 1749              	.LCFI7:
 1750              		.cfi_def_cfa_offset 8
 390:libstr91x/src/91x_rtc.c ****   vu32 tmp=0;
 1751              		.loc 1 390 0
 1752 0a8c 0030A0E3 		mov	r3, #0
 391:libstr91x/src/91x_rtc.c ****   if (RTC_FLAG == RTC_FLAG_Per)  tmp=RTC->SR; 
 1753              		.loc 1 391 0
 1754 0a90 020150E3 		cmp	r0, #-2147483648
 390:libstr91x/src/91x_rtc.c ****   vu32 tmp=0;
 1755              		.loc 1 390 0
 1756 0a94 04308DE5 		str	r3, [sp, #4]
 1757              	.LVL140:
 1758              		.loc 1 391 0
 1759 0a98 0800000A 		beq	.L155
 392:libstr91x/src/91x_rtc.c ****   else if (RTC_FLAG == RTC_FLAG_Alarm) RTC->CR&=~0x100000;
 1760              		.loc 1 392 0
 1761 0a9c 010150E3 		cmp	r0, #1073741824
 1762 0aa0 0A00000A 		beq	.L156
 393:libstr91x/src/91x_rtc.c ****   else if (RTC_FLAG == RTC_FLAG_Tamper) RTC->CR&=~0x1;
 1763              		.loc 1 393 0
 1764 0aa4 010250E3 		cmp	r0, #268435456
 1765 0aa8 34309F05 		ldreq	r3, .L157
 1766 0aac 0C209305 		ldreq	r2, [r3, #12]
 1767 0ab0 0120C203 		biceq	r2, r2, #1
 1768 0ab4 0C208305 		streq	r2, [r3, #12]
 1769              	.LVL141:
 1770              	.L151:
 394:libstr91x/src/91x_rtc.c **** }
 1771              		.loc 1 394 0
 1772 0ab8 08D08DE2 		add	sp, sp, #8
 1773 0abc 1EFF2FE1 		bx	lr
 1774              	.LVL142:
 1775              	.L155:
 391:libstr91x/src/91x_rtc.c ****   if (RTC_FLAG == RTC_FLAG_Per)  tmp=RTC->SR; 
 1776              		.loc 1 391 0 discriminator 1
 1777 0ac0 1C009FE5 		ldr	r0, .L157
 1778              	.LVL143:
 1779 0ac4 103090E5 		ldr	r3, [r0, #16]
 1780              	.LVL144:
 1781 0ac8 04308DE5 		str	r3, [sp, #4]
 1782 0acc F9FFFFEA 		b	.L151
 1783              	.LVL145:
 1784              	.L156:
 392:libstr91x/src/91x_rtc.c ****   else if (RTC_FLAG == RTC_FLAG_Alarm) RTC->CR&=~0x100000;
 1785              		.loc 1 392 0 discriminator 1
 1786 0ad0 0C109FE5 		ldr	r1, .L157
 1787 0ad4 0CC091E5 		ldr	ip, [r1, #12]
 1788 0ad8 0126CCE3 		bic	r2, ip, #1048576
 1789 0adc 0C2081E5 		str	r2, [r1, #12]
 1790 0ae0 F4FFFFEA 		b	.L151
 1791              	.L158:
 1792              		.align	2
 1793              	.L157:
 1794 0ae4 0010005C 		.word	1543507968
 1795              		.cfi_endproc
 1796              	.LFE19:
 1798              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 91x_rtc.c
     /tmp/ccYtU57T.s:21     .text:00000000 $a
     /tmp/ccYtU57T.s:24     .text:00000000 BYTEToBCD2
     /tmp/ccYtU57T.s:65     .text:00000038 WORDToBCD3
     /tmp/ccYtU57T.s:203    .text:00000144 $d
     /tmp/ccYtU57T.s:208    .text:0000014c $a
     /tmp/ccYtU57T.s:211    .text:0000014c BCD3ToWORD
     /tmp/ccYtU57T.s:242    .text:00000184 BCD2ToBYTE
     /tmp/ccYtU57T.s:267    .text:0000019c RTC_DeInit
     /tmp/ccYtU57T.s:295    .text:000001bc RTC_SetDate
     /tmp/ccYtU57T.s:526    .text:00000360 $d
     /tmp/ccYtU57T.s:530    .text:00000364 $a
     /tmp/ccYtU57T.s:533    .text:00000364 RTC_SetTime
     /tmp/ccYtU57T.s:828    .text:00000594 $d
     /tmp/ccYtU57T.s:834    .text:000005a0 $a
     /tmp/ccYtU57T.s:837    .text:000005a0 RTC_SetAlarm
     /tmp/ccYtU57T.s:1026   .text:000006ec $d
     /tmp/ccYtU57T.s:1030   .text:000006f0 $a
     /tmp/ccYtU57T.s:1033   .text:000006f0 RTC_GetDate
     /tmp/ccYtU57T.s:1178   .text:000007b8 $d
     /tmp/ccYtU57T.s:1182   .text:000007bc $a
     /tmp/ccYtU57T.s:1185   .text:000007bc RTC_GetTime
     /tmp/ccYtU57T.s:1332   .text:00000880 $d
     /tmp/ccYtU57T.s:1336   .text:00000884 $a
     /tmp/ccYtU57T.s:1339   .text:00000884 RTC_GetAlarm
     /tmp/ccYtU57T.s:1473   .text:00000934 $d
     /tmp/ccYtU57T.s:1477   .text:00000938 $a
     /tmp/ccYtU57T.s:1480   .text:00000938 RTC_TamperConfig
     /tmp/ccYtU57T.s:1517   .text:0000097c $d
     /tmp/ccYtU57T.s:1521   .text:00000980 $a
     /tmp/ccYtU57T.s:1524   .text:00000980 RTC_TamperCmd
     /tmp/ccYtU57T.s:1549   .text:000009a4 $d
     /tmp/ccYtU57T.s:1553   .text:000009a8 $a
     /tmp/ccYtU57T.s:1556   .text:000009a8 RTC_AlarmCmd
     /tmp/ccYtU57T.s:1581   .text:000009cc $d
     /tmp/ccYtU57T.s:1585   .text:000009d0 $a
     /tmp/ccYtU57T.s:1588   .text:000009d0 RTC_CalibClockCmd
     /tmp/ccYtU57T.s:1613   .text:000009f4 $d
     /tmp/ccYtU57T.s:1617   .text:000009f8 $a
     /tmp/ccYtU57T.s:1620   .text:000009f8 RTC_SRAMBattPowerCmd
     /tmp/ccYtU57T.s:1645   .text:00000a1c $d
     /tmp/ccYtU57T.s:1649   .text:00000a20 $a
     /tmp/ccYtU57T.s:1652   .text:00000a20 RTC_PeriodicIntConfig
     /tmp/ccYtU57T.s:1674   .text:00000a40 $d
     /tmp/ccYtU57T.s:1678   .text:00000a44 $a
     /tmp/ccYtU57T.s:1681   .text:00000a44 RTC_ITConfig
     /tmp/ccYtU57T.s:1706   .text:00000a68 $d
     /tmp/ccYtU57T.s:1710   .text:00000a6c $a
     /tmp/ccYtU57T.s:1713   .text:00000a6c RTC_GetFlagStatus
     /tmp/ccYtU57T.s:1733   .text:00000a84 $d
     /tmp/ccYtU57T.s:1737   .text:00000a88 $a
     /tmp/ccYtU57T.s:1740   .text:00000a88 RTC_ClearFlag
     /tmp/ccYtU57T.s:1794   .text:00000ae4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SCU_APBPeriphReset
