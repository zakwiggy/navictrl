   1              		.cpu arm9e
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.file	"usb_regs.c"
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.align	2
  22              		.global	SetCNTR
  24              	SetCNTR:
  25              	.LFB0:
  26              		.file 1 "usblibrary/src/usb_regs.c"
   1:usblibrary/src/usb_regs.c **** /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
   2:usblibrary/src/usb_regs.c **** * File Name          : usb_regs.c
   3:usblibrary/src/usb_regs.c **** * Author             : MCD Application Team
   4:usblibrary/src/usb_regs.c **** * Version            : V4.0.0
   5:usblibrary/src/usb_regs.c **** * Date               : 09/29/2008
   6:usblibrary/src/usb_regs.c **** * Description        : Interface functions to USB cell registers.
   7:usblibrary/src/usb_regs.c **** ********************************************************************************
   8:usblibrary/src/usb_regs.c **** * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
   9:usblibrary/src/usb_regs.c **** * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  10:usblibrary/src/usb_regs.c **** * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  11:usblibrary/src/usb_regs.c **** * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  12:usblibrary/src/usb_regs.c **** * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  13:usblibrary/src/usb_regs.c **** * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  14:usblibrary/src/usb_regs.c **** *******************************************************************************/
  15:usblibrary/src/usb_regs.c **** 
  16:usblibrary/src/usb_regs.c **** /* Includes ------------------------------------------------------------------*/
  17:usblibrary/src/usb_regs.c **** #include "usb_lib.h"
  18:usblibrary/src/usb_regs.c **** /* Private typedef -----------------------------------------------------------*/
  19:usblibrary/src/usb_regs.c **** /* Private define ------------------------------------------------------------*/
  20:usblibrary/src/usb_regs.c **** /* Private macro -------------------------------------------------------------*/
  21:usblibrary/src/usb_regs.c **** /* Private variables ---------------------------------------------------------*/
  22:usblibrary/src/usb_regs.c **** /* Extern variables ----------------------------------------------------------*/
  23:usblibrary/src/usb_regs.c **** /* Private function prototypes -----------------------------------------------*/
  24:usblibrary/src/usb_regs.c **** /* Private functions ---------------------------------------------------------*/
  25:usblibrary/src/usb_regs.c **** 
  26:usblibrary/src/usb_regs.c **** /*******************************************************************************
  27:usblibrary/src/usb_regs.c **** * Function Name  : SetCNTR.
  28:usblibrary/src/usb_regs.c **** * Description    : Set the CNTR register value.
  29:usblibrary/src/usb_regs.c **** * Input          : wRegValue: new register value.
  30:usblibrary/src/usb_regs.c **** * Output         : None.
  31:usblibrary/src/usb_regs.c **** * Return         : None.
  32:usblibrary/src/usb_regs.c **** *******************************************************************************/
  33:usblibrary/src/usb_regs.c **** void SetCNTR(u16 wRegValue)
  34:usblibrary/src/usb_regs.c **** {
  27              		.loc 1 34 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  35:usblibrary/src/usb_regs.c ****   _SetCNTR(wRegValue);
  33              		.loc 1 35 0
  34 0000 0632A0E3 		mov	r3, #1610612736
  35 0004 400883E5 		str	r0, [r3, #2112]
  36:usblibrary/src/usb_regs.c **** }
  36              		.loc 1 36 0
  37 0008 1EFF2FE1 		bx	lr
  38              		.cfi_endproc
  39              	.LFE0:
  41              		.align	2
  42              		.global	GetCNTR
  44              	GetCNTR:
  45              	.LFB1:
  37:usblibrary/src/usb_regs.c **** 
  38:usblibrary/src/usb_regs.c **** /*******************************************************************************
  39:usblibrary/src/usb_regs.c **** * Function Name  : GetCNTR.
  40:usblibrary/src/usb_regs.c **** * Description    : returns the CNTR register value.
  41:usblibrary/src/usb_regs.c **** * Input          : None.
  42:usblibrary/src/usb_regs.c **** * Output         : None.
  43:usblibrary/src/usb_regs.c **** * Return         : CNTR register Value.
  44:usblibrary/src/usb_regs.c **** *******************************************************************************/
  45:usblibrary/src/usb_regs.c **** u16 GetCNTR(void)
  46:usblibrary/src/usb_regs.c **** {
  46              		.loc 1 46 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  47:usblibrary/src/usb_regs.c ****   return(_GetCNTR());
  51              		.loc 1 47 0
  52 000c 0632A0E3 		mov	r3, #1610612736
  53 0010 401893E5 		ldr	r1, [r3, #2112]
  54 0014 0108A0E1 		mov	r0, r1, asl #16
  48:usblibrary/src/usb_regs.c **** }
  55              		.loc 1 48 0
  56 0018 2008A0E1 		mov	r0, r0, lsr #16
  57 001c 1EFF2FE1 		bx	lr
  58              		.cfi_endproc
  59              	.LFE1:
  61              		.align	2
  62              		.global	SetISTR
  64              	SetISTR:
  65              	.LFB2:
  49:usblibrary/src/usb_regs.c **** 
  50:usblibrary/src/usb_regs.c **** /*******************************************************************************
  51:usblibrary/src/usb_regs.c **** * Function Name  : SetISTR.
  52:usblibrary/src/usb_regs.c **** * Description    : Set the ISTR register value.
  53:usblibrary/src/usb_regs.c **** * Input          : wRegValue: new register value.
  54:usblibrary/src/usb_regs.c **** * Output         : None.
  55:usblibrary/src/usb_regs.c **** * Return         : None.
  56:usblibrary/src/usb_regs.c **** *******************************************************************************/
  57:usblibrary/src/usb_regs.c **** void SetISTR(u16 wRegValue)
  58:usblibrary/src/usb_regs.c **** {
  66              		.loc 1 58 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		@ link register save eliminated.
  71              	.LVL1:
  59:usblibrary/src/usb_regs.c ****   _SetISTR(wRegValue);
  72              		.loc 1 59 0
  73 0020 0632A0E3 		mov	r3, #1610612736
  74 0024 440883E5 		str	r0, [r3, #2116]
  60:usblibrary/src/usb_regs.c **** }
  75              		.loc 1 60 0
  76 0028 1EFF2FE1 		bx	lr
  77              		.cfi_endproc
  78              	.LFE2:
  80              		.align	2
  81              		.global	GetISTR
  83              	GetISTR:
  84              	.LFB3:
  61:usblibrary/src/usb_regs.c **** 
  62:usblibrary/src/usb_regs.c **** /*******************************************************************************
  63:usblibrary/src/usb_regs.c **** * Function Name  : GetISTR.
  64:usblibrary/src/usb_regs.c **** * Description    : Returns the ISTR register value.
  65:usblibrary/src/usb_regs.c **** * Input          : None.
  66:usblibrary/src/usb_regs.c **** * Output         : None.
  67:usblibrary/src/usb_regs.c **** * Return         : ISTR register Value.
  68:usblibrary/src/usb_regs.c **** *******************************************************************************/
  69:usblibrary/src/usb_regs.c **** u16 GetISTR(void)
  70:usblibrary/src/usb_regs.c **** {
  85              		.loc 1 70 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  71:usblibrary/src/usb_regs.c ****   return(_GetISTR());
  90              		.loc 1 71 0
  91 002c 0632A0E3 		mov	r3, #1610612736
  92 0030 441893E5 		ldr	r1, [r3, #2116]
  93 0034 0108A0E1 		mov	r0, r1, asl #16
  72:usblibrary/src/usb_regs.c **** }
  94              		.loc 1 72 0
  95 0038 2008A0E1 		mov	r0, r0, lsr #16
  96 003c 1EFF2FE1 		bx	lr
  97              		.cfi_endproc
  98              	.LFE3:
 100              		.align	2
 101              		.global	GetFNR
 103              	GetFNR:
 104              	.LFB4:
  73:usblibrary/src/usb_regs.c **** 
  74:usblibrary/src/usb_regs.c **** /*******************************************************************************
  75:usblibrary/src/usb_regs.c **** * Function Name  : GetFNR.
  76:usblibrary/src/usb_regs.c **** * Description    : Returns the FNR register value.
  77:usblibrary/src/usb_regs.c **** * Input          : None.
  78:usblibrary/src/usb_regs.c **** * Output         : None.
  79:usblibrary/src/usb_regs.c **** * Return         : FNR register Value.
  80:usblibrary/src/usb_regs.c **** *******************************************************************************/
  81:usblibrary/src/usb_regs.c **** u16 GetFNR(void)
  82:usblibrary/src/usb_regs.c **** {
 105              		.loc 1 82 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
  83:usblibrary/src/usb_regs.c ****   return(_GetFNR());
 110              		.loc 1 83 0
 111 0040 0632A0E3 		mov	r3, #1610612736
 112 0044 481893E5 		ldr	r1, [r3, #2120]
 113 0048 0108A0E1 		mov	r0, r1, asl #16
  84:usblibrary/src/usb_regs.c **** }
 114              		.loc 1 84 0
 115 004c 2008A0E1 		mov	r0, r0, lsr #16
 116 0050 1EFF2FE1 		bx	lr
 117              		.cfi_endproc
 118              	.LFE4:
 120              		.align	2
 121              		.global	SetDADDR
 123              	SetDADDR:
 124              	.LFB5:
  85:usblibrary/src/usb_regs.c **** 
  86:usblibrary/src/usb_regs.c **** /*******************************************************************************
  87:usblibrary/src/usb_regs.c **** * Function Name  : SetDADDR.
  88:usblibrary/src/usb_regs.c **** * Description    : Set the DADDR register value.
  89:usblibrary/src/usb_regs.c **** * Input          : wRegValue: new register value.
  90:usblibrary/src/usb_regs.c **** * Output         : None.
  91:usblibrary/src/usb_regs.c **** * Return         : None.
  92:usblibrary/src/usb_regs.c **** *******************************************************************************/
  93:usblibrary/src/usb_regs.c **** void SetDADDR(u16 wRegValue)
  94:usblibrary/src/usb_regs.c **** {
 125              		.loc 1 94 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
 130              	.LVL2:
  95:usblibrary/src/usb_regs.c ****   _SetDADDR(wRegValue);
 131              		.loc 1 95 0
 132 0054 0632A0E3 		mov	r3, #1610612736
 133 0058 4C0883E5 		str	r0, [r3, #2124]
  96:usblibrary/src/usb_regs.c **** }
 134              		.loc 1 96 0
 135 005c 1EFF2FE1 		bx	lr
 136              		.cfi_endproc
 137              	.LFE5:
 139              		.align	2
 140              		.global	GetDADDR
 142              	GetDADDR:
 143              	.LFB6:
  97:usblibrary/src/usb_regs.c **** 
  98:usblibrary/src/usb_regs.c **** /*******************************************************************************
  99:usblibrary/src/usb_regs.c **** * Function Name  : GetDADDR.
 100:usblibrary/src/usb_regs.c **** * Description    : Returns the DADDR register value.
 101:usblibrary/src/usb_regs.c **** * Input          : None.
 102:usblibrary/src/usb_regs.c **** * Output         : None.
 103:usblibrary/src/usb_regs.c **** * Return         : DADDR register Value
 104:usblibrary/src/usb_regs.c **** *******************************************************************************/
 105:usblibrary/src/usb_regs.c **** u16 GetDADDR(void)
 106:usblibrary/src/usb_regs.c **** {
 144              		.loc 1 106 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 107:usblibrary/src/usb_regs.c ****   return(_GetDADDR());
 149              		.loc 1 107 0
 150 0060 0632A0E3 		mov	r3, #1610612736
 151 0064 4C1893E5 		ldr	r1, [r3, #2124]
 152 0068 0108A0E1 		mov	r0, r1, asl #16
 108:usblibrary/src/usb_regs.c **** }
 153              		.loc 1 108 0
 154 006c 2008A0E1 		mov	r0, r0, lsr #16
 155 0070 1EFF2FE1 		bx	lr
 156              		.cfi_endproc
 157              	.LFE6:
 159              		.align	2
 160              		.global	SetBTABLE
 162              	SetBTABLE:
 163              	.LFB7:
 109:usblibrary/src/usb_regs.c **** 
 110:usblibrary/src/usb_regs.c **** /*******************************************************************************
 111:usblibrary/src/usb_regs.c **** * Function Name  : SetBTABLE.
 112:usblibrary/src/usb_regs.c **** * Description    : Set the BTABLE.
 113:usblibrary/src/usb_regs.c **** * Input          : wRegValue: New register value.
 114:usblibrary/src/usb_regs.c **** * Output         : None.
 115:usblibrary/src/usb_regs.c **** * Return         : None.
 116:usblibrary/src/usb_regs.c **** *******************************************************************************/
 117:usblibrary/src/usb_regs.c **** void SetBTABLE(u16 wRegValue)
 118:usblibrary/src/usb_regs.c **** {
 164              		.loc 1 118 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169              	.LVL3:
 119:usblibrary/src/usb_regs.c ****   _SetBTABLE(wRegValue);
 170              		.loc 1 119 0
 171 0074 0C109FE5 		ldr	r1, .L9
 172 0078 0622A0E3 		mov	r2, #1610612736
 173 007c 013000E0 		and	r3, r0, r1
 174 0080 503882E5 		str	r3, [r2, #2128]
 120:usblibrary/src/usb_regs.c **** }
 175              		.loc 1 120 0
 176 0084 1EFF2FE1 		bx	lr
 177              	.L10:
 178              		.align	2
 179              	.L9:
 180 0088 F8FF0000 		.word	65528
 181              		.cfi_endproc
 182              	.LFE7:
 184              		.align	2
 185              		.global	GetBTABLE
 187              	GetBTABLE:
 188              	.LFB8:
 121:usblibrary/src/usb_regs.c **** 
 122:usblibrary/src/usb_regs.c **** /*******************************************************************************
 123:usblibrary/src/usb_regs.c **** * Function Name  : GetBTABLE.
 124:usblibrary/src/usb_regs.c **** * Description    : Returns the BTABLE register value.
 125:usblibrary/src/usb_regs.c **** * Input          : None.
 126:usblibrary/src/usb_regs.c **** * Output         : None.
 127:usblibrary/src/usb_regs.c **** * Return         : BTABLE address.
 128:usblibrary/src/usb_regs.c **** *******************************************************************************/
 129:usblibrary/src/usb_regs.c **** u16 GetBTABLE(void)
 130:usblibrary/src/usb_regs.c **** {
 189              		.loc 1 130 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 131:usblibrary/src/usb_regs.c ****   return(_GetBTABLE());
 194              		.loc 1 131 0
 195 008c 0632A0E3 		mov	r3, #1610612736
 196 0090 501893E5 		ldr	r1, [r3, #2128]
 197 0094 0108A0E1 		mov	r0, r1, asl #16
 132:usblibrary/src/usb_regs.c **** }
 198              		.loc 1 132 0
 199 0098 2008A0E1 		mov	r0, r0, lsr #16
 200 009c 1EFF2FE1 		bx	lr
 201              		.cfi_endproc
 202              	.LFE8:
 204              		.align	2
 205              		.global	SetENDPOINT
 207              	SetENDPOINT:
 208              	.LFB9:
 133:usblibrary/src/usb_regs.c **** 
 134:usblibrary/src/usb_regs.c **** /*******************************************************************************
 135:usblibrary/src/usb_regs.c **** * Function Name  : SetENDPOINT.
 136:usblibrary/src/usb_regs.c **** * Description    : Setthe Endpoint register value.
 137:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 138:usblibrary/src/usb_regs.c **** *                  wRegValue.
 139:usblibrary/src/usb_regs.c **** * Output         : None.
 140:usblibrary/src/usb_regs.c **** * Return         : None.
 141:usblibrary/src/usb_regs.c **** *******************************************************************************/
 142:usblibrary/src/usb_regs.c **** void SetENDPOINT(u8 bEpNum, u16 wRegValue)
 143:usblibrary/src/usb_regs.c **** {
 209              		.loc 1 143 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		@ link register save eliminated.
 214              	.LVL4:
 144:usblibrary/src/usb_regs.c ****   _SetENDPOINT(bEpNum, wRegValue);
 215              		.loc 1 144 0
 216 00a0 0021A0E1 		mov	r2, r0, asl #2
 217 00a4 060282E2 		add	r0, r2, #1610612736
 218              	.LVL5:
 219 00a8 001880E5 		str	r1, [r0, #2048]
 145:usblibrary/src/usb_regs.c **** }
 220              		.loc 1 145 0
 221 00ac 1EFF2FE1 		bx	lr
 222              		.cfi_endproc
 223              	.LFE9:
 225              		.align	2
 226              		.global	GetENDPOINT
 228              	GetENDPOINT:
 229              	.LFB10:
 146:usblibrary/src/usb_regs.c **** 
 147:usblibrary/src/usb_regs.c **** /*******************************************************************************
 148:usblibrary/src/usb_regs.c **** * Function Name  : GetENDPOINT.
 149:usblibrary/src/usb_regs.c **** * Description    : Return the Endpoint register value.
 150:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 151:usblibrary/src/usb_regs.c **** * Output         : None.
 152:usblibrary/src/usb_regs.c **** * Return         : Endpoint register value.
 153:usblibrary/src/usb_regs.c **** *******************************************************************************/
 154:usblibrary/src/usb_regs.c **** u16 GetENDPOINT(u8 bEpNum)
 155:usblibrary/src/usb_regs.c **** {
 230              		.loc 1 155 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 235              	.LVL6:
 156:usblibrary/src/usb_regs.c ****   return(_GetENDPOINT(bEpNum));
 236              		.loc 1 156 0
 237 00b0 0031A0E1 		mov	r3, r0, asl #2
 238 00b4 062283E2 		add	r2, r3, #1610612736
 239 00b8 001892E5 		ldr	r1, [r2, #2048]
 240 00bc 0108A0E1 		mov	r0, r1, asl #16
 241              	.LVL7:
 157:usblibrary/src/usb_regs.c **** }
 242              		.loc 1 157 0
 243 00c0 2008A0E1 		mov	r0, r0, lsr #16
 244 00c4 1EFF2FE1 		bx	lr
 245              		.cfi_endproc
 246              	.LFE10:
 248              		.align	2
 249              		.global	SetEPType
 251              	SetEPType:
 252              	.LFB11:
 158:usblibrary/src/usb_regs.c **** 
 159:usblibrary/src/usb_regs.c **** /*******************************************************************************
 160:usblibrary/src/usb_regs.c **** * Function Name  : SetEPType.
 161:usblibrary/src/usb_regs.c **** * Description    : sets the type in the endpoint register.
 162:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 163:usblibrary/src/usb_regs.c **** *                  wType: type definition.
 164:usblibrary/src/usb_regs.c **** * Output         : None.
 165:usblibrary/src/usb_regs.c **** * Return         : None.
 166:usblibrary/src/usb_regs.c **** *******************************************************************************/
 167:usblibrary/src/usb_regs.c **** void SetEPType(u8 bEpNum, u16 wType)
 168:usblibrary/src/usb_regs.c **** {
 253              		.loc 1 168 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257              		@ link register save eliminated.
 258              	.LVL8:
 169:usblibrary/src/usb_regs.c ****   _SetEPType(bEpNum, wType);
 259              		.loc 1 169 0
 260 00c8 0001A0E1 		mov	r0, r0, asl #2
 261              	.LVL9:
 262 00cc 060280E2 		add	r0, r0, #1610612736
 263 00d0 002890E5 		ldr	r2, [r0, #2048]
 264 00d4 763CC2E3 		bic	r3, r2, #30208
 265 00d8 70C0C3E3 		bic	ip, r3, #112
 266 00dc 01208CE1 		orr	r2, ip, r1
 267 00e0 0218A0E1 		mov	r1, r2, asl #16
 268              	.LVL10:
 269 00e4 2138A0E1 		mov	r3, r1, lsr #16
 270 00e8 003880E5 		str	r3, [r0, #2048]
 170:usblibrary/src/usb_regs.c **** }
 271              		.loc 1 170 0
 272 00ec 1EFF2FE1 		bx	lr
 273              		.cfi_endproc
 274              	.LFE11:
 276              		.align	2
 277              		.global	GetEPType
 279              	GetEPType:
 280              	.LFB12:
 171:usblibrary/src/usb_regs.c **** 
 172:usblibrary/src/usb_regs.c **** /*******************************************************************************
 173:usblibrary/src/usb_regs.c **** * Function Name  : GetEPType.
 174:usblibrary/src/usb_regs.c **** * Description    : Returns the endpoint type.
 175:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 176:usblibrary/src/usb_regs.c **** * Output         : None.
 177:usblibrary/src/usb_regs.c **** * Return         : Endpoint Type.
 178:usblibrary/src/usb_regs.c **** *******************************************************************************/
 179:usblibrary/src/usb_regs.c **** u16 GetEPType(u8 bEpNum)
 180:usblibrary/src/usb_regs.c **** {
 281              		.loc 1 180 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 286              	.LVL11:
 181:usblibrary/src/usb_regs.c ****   return(_GetEPType(bEpNum));
 287              		.loc 1 181 0
 288 00f0 0021A0E1 		mov	r2, r0, asl #2
 289 00f4 061282E2 		add	r1, r2, #1610612736
 290 00f8 000891E5 		ldr	r0, [r1, #2048]
 291              	.LVL12:
 182:usblibrary/src/usb_regs.c **** }
 292              		.loc 1 182 0
 293 00fc 060C00E2 		and	r0, r0, #1536
 294 0100 1EFF2FE1 		bx	lr
 295              		.cfi_endproc
 296              	.LFE12:
 298              		.align	2
 299              		.global	SetEPTxStatus
 301              	SetEPTxStatus:
 302              	.LFB13:
 183:usblibrary/src/usb_regs.c **** 
 184:usblibrary/src/usb_regs.c **** /*******************************************************************************
 185:usblibrary/src/usb_regs.c **** * Function Name  : SetEPTxStatus.
 186:usblibrary/src/usb_regs.c **** * Description    : Set the status of Tx endpoint.
 187:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 188:usblibrary/src/usb_regs.c **** *                  wState: new state.
 189:usblibrary/src/usb_regs.c **** * Output         : None.
 190:usblibrary/src/usb_regs.c **** * Return         : None.
 191:usblibrary/src/usb_regs.c **** *******************************************************************************/
 192:usblibrary/src/usb_regs.c **** void SetEPTxStatus(u8 bEpNum, u16 wState)
 193:usblibrary/src/usb_regs.c **** {
 303              		.loc 1 193 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308              	.LVL13:
 309              	.LBB4:
 194:usblibrary/src/usb_regs.c ****   _SetEPTxStatus(bEpNum, wState);
 310              		.loc 1 194 0
 311 0104 0001A0E1 		mov	r0, r0, asl #2
 312              	.LVL14:
 313 0108 060280E2 		add	r0, r0, #1610612736
 314 010c 002890E5 		ldr	r2, [r0, #2048]
 315 0110 18C09FE5 		ldr	ip, .L19
 316 0114 100011E3 		tst	r1, #16
 317 0118 0C3002E0 		and	r3, r2, ip
 318              	.LVL15:
 319 011c 10302312 		eorne	r3, r3, #16
 320              	.LVL16:
 321 0120 200011E3 		tst	r1, #32
 322 0124 20302312 		eorne	r3, r3, #32
 323              	.LVL17:
 324 0128 003880E5 		str	r3, [r0, #2048]
 325              	.LBE4:
 195:usblibrary/src/usb_regs.c **** }
 326              		.loc 1 195 0
 327 012c 1EFF2FE1 		bx	lr
 328              	.L20:
 329              		.align	2
 330              	.L19:
 331 0130 BF8F0000 		.word	36799
 332              		.cfi_endproc
 333              	.LFE13:
 335              		.align	2
 336              		.global	SetEPRxStatus
 338              	SetEPRxStatus:
 339              	.LFB14:
 196:usblibrary/src/usb_regs.c **** 
 197:usblibrary/src/usb_regs.c **** /*******************************************************************************
 198:usblibrary/src/usb_regs.c **** * Function Name  : SetEPRxStatus.
 199:usblibrary/src/usb_regs.c **** * Description    : Set the status of Rx endpoint.
 200:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 201:usblibrary/src/usb_regs.c **** *                  wState: new state.
 202:usblibrary/src/usb_regs.c **** * Output         : None.
 203:usblibrary/src/usb_regs.c **** * Return         : None.
 204:usblibrary/src/usb_regs.c **** *******************************************************************************/
 205:usblibrary/src/usb_regs.c **** void SetEPRxStatus(u8 bEpNum, u16 wState)
 206:usblibrary/src/usb_regs.c **** {
 340              		.loc 1 206 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 0
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344              		@ link register save eliminated.
 345              	.LVL18:
 346              	.LBB5:
 207:usblibrary/src/usb_regs.c ****   _SetEPRxStatus(bEpNum, wState);
 347              		.loc 1 207 0
 348 0134 0001A0E1 		mov	r0, r0, asl #2
 349              	.LVL19:
 350 0138 060280E2 		add	r0, r0, #1610612736
 351 013c 002890E5 		ldr	r2, [r0, #2048]
 352 0140 18C09FE5 		ldr	ip, .L24
 353 0144 010A11E3 		tst	r1, #4096
 354 0148 0C3002E0 		and	r3, r2, ip
 355              	.LVL20:
 356 014c 013A2312 		eorne	r3, r3, #4096
 357              	.LVL21:
 358 0150 020A11E3 		tst	r1, #8192
 359 0154 023A2312 		eorne	r3, r3, #8192
 360              	.LVL22:
 361 0158 003880E5 		str	r3, [r0, #2048]
 362              	.LBE5:
 208:usblibrary/src/usb_regs.c **** }
 363              		.loc 1 208 0
 364 015c 1EFF2FE1 		bx	lr
 365              	.L25:
 366              		.align	2
 367              	.L24:
 368 0160 8FBF0000 		.word	49039
 369              		.cfi_endproc
 370              	.LFE14:
 372              		.align	2
 373              		.global	SetDouBleBuffEPStall
 375              	SetDouBleBuffEPStall:
 376              	.LFB15:
 209:usblibrary/src/usb_regs.c **** 
 210:usblibrary/src/usb_regs.c **** /*******************************************************************************
 211:usblibrary/src/usb_regs.c **** * Function Name  : SetDouBleBuffEPStall.
 212:usblibrary/src/usb_regs.c **** * Description    : sets the status for Double Buffer Endpoint to STALL.
 213:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 214:usblibrary/src/usb_regs.c **** *                  bDir: Endpoint direction.
 215:usblibrary/src/usb_regs.c **** * Output         : None.
 216:usblibrary/src/usb_regs.c **** * Return         : None.
 217:usblibrary/src/usb_regs.c **** *******************************************************************************/
 218:usblibrary/src/usb_regs.c **** void SetDouBleBuffEPStall(u8 bEpNum, u8 bDir)
 219:usblibrary/src/usb_regs.c **** {
 377              		.loc 1 219 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381              		@ link register save eliminated.
 382              	.LVL23:
 383              	.LBB6:
 384              	.LBB7:
 156:usblibrary/src/usb_regs.c ****   return(_GetENDPOINT(bEpNum));
 385              		.loc 1 156 0
 386 0164 0001A0E1 		mov	r0, r0, asl #2
 387              	.LVL24:
 388 0168 060280E2 		add	r0, r0, #1610612736
 389 016c 002890E5 		ldr	r2, [r0, #2048]
 390              	.LBE7:
 391              	.LBE6:
 220:usblibrary/src/usb_regs.c ****   u16 Endpoint_DTOG_Status;
 221:usblibrary/src/usb_regs.c ****   Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
 222:usblibrary/src/usb_regs.c ****   if (bDir == EP_DBUF_OUT)
 392              		.loc 1 222 0
 393 0170 010051E3 		cmp	r1, #1
 394              	.LBB9:
 395              	.LBB8:
 156:usblibrary/src/usb_regs.c ****   return(_GetENDPOINT(bEpNum));
 396              		.loc 1 156 0
 397 0174 0238A0E1 		mov	r3, r2, asl #16
 398 0178 2338A0E1 		mov	r3, r3, lsr #16
 399              	.LBE8:
 400              	.LBE9:
 223:usblibrary/src/usb_regs.c ****   { /* OUT double buffered endpoint */
 224:usblibrary/src/usb_regs.c ****     _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
 401              		.loc 1 224 0
 402 017c 013AC303 		biceq	r3, r3, #4096
 403 0180 00388005 		streq	r3, [r0, #2048]
 222:usblibrary/src/usb_regs.c ****   if (bDir == EP_DBUF_OUT)
 404              		.loc 1 222 0
 405 0184 1EFF2F01 		bxeq	lr
 225:usblibrary/src/usb_regs.c ****   }
 226:usblibrary/src/usb_regs.c ****   else if (bDir == EP_DBUF_IN)
 406              		.loc 1 226 0
 407 0188 020051E3 		cmp	r1, #2
 227:usblibrary/src/usb_regs.c ****   { /* IN double buffered endpoint */
 228:usblibrary/src/usb_regs.c ****     _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
 408              		.loc 1 228 0
 409 018c 1030C303 		biceq	r3, r3, #16
 410 0190 00388005 		streq	r3, [r0, #2048]
 411 0194 1EFF2FE1 		bx	lr
 412              		.cfi_endproc
 413              	.LFE15:
 415              		.align	2
 416              		.global	GetEPTxStatus
 418              	GetEPTxStatus:
 419              	.LFB16:
 229:usblibrary/src/usb_regs.c ****   }
 230:usblibrary/src/usb_regs.c **** }
 231:usblibrary/src/usb_regs.c **** 
 232:usblibrary/src/usb_regs.c **** /*******************************************************************************
 233:usblibrary/src/usb_regs.c **** * Function Name  : GetEPTxStatus.
 234:usblibrary/src/usb_regs.c **** * Description    : Returns the endpoint Tx status.
 235:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 236:usblibrary/src/usb_regs.c **** * Output         : None.
 237:usblibrary/src/usb_regs.c **** * Return         : Endpoint TX Status.
 238:usblibrary/src/usb_regs.c **** *******************************************************************************/
 239:usblibrary/src/usb_regs.c **** u16 GetEPTxStatus(u8 bEpNum)
 240:usblibrary/src/usb_regs.c **** {
 420              		.loc 1 240 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424              		@ link register save eliminated.
 425              	.LVL25:
 241:usblibrary/src/usb_regs.c ****   return(_GetEPTxStatus(bEpNum));
 426              		.loc 1 241 0
 427 0198 0021A0E1 		mov	r2, r0, asl #2
 428 019c 061282E2 		add	r1, r2, #1610612736
 429 01a0 000891E5 		ldr	r0, [r1, #2048]
 430              	.LVL26:
 242:usblibrary/src/usb_regs.c **** }
 431              		.loc 1 242 0
 432 01a4 300000E2 		and	r0, r0, #48
 433 01a8 1EFF2FE1 		bx	lr
 434              		.cfi_endproc
 435              	.LFE16:
 437              		.align	2
 438              		.global	GetEPRxStatus
 440              	GetEPRxStatus:
 441              	.LFB17:
 243:usblibrary/src/usb_regs.c **** 
 244:usblibrary/src/usb_regs.c **** /*******************************************************************************
 245:usblibrary/src/usb_regs.c **** * Function Name  : GetEPRxStatus.
 246:usblibrary/src/usb_regs.c **** * Description    : Returns the endpoint Rx status.
 247:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 248:usblibrary/src/usb_regs.c **** * Output         : None.
 249:usblibrary/src/usb_regs.c **** * Return         : Endpoint RX Status.
 250:usblibrary/src/usb_regs.c **** *******************************************************************************/
 251:usblibrary/src/usb_regs.c **** u16 GetEPRxStatus(u8 bEpNum)
 252:usblibrary/src/usb_regs.c **** {
 442              		.loc 1 252 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 447              	.LVL27:
 253:usblibrary/src/usb_regs.c ****   return(_GetEPRxStatus(bEpNum));
 448              		.loc 1 253 0
 449 01ac 0021A0E1 		mov	r2, r0, asl #2
 450 01b0 061282E2 		add	r1, r2, #1610612736
 451 01b4 000891E5 		ldr	r0, [r1, #2048]
 452              	.LVL28:
 254:usblibrary/src/usb_regs.c **** }
 453              		.loc 1 254 0
 454 01b8 030A00E2 		and	r0, r0, #12288
 455 01bc 1EFF2FE1 		bx	lr
 456              		.cfi_endproc
 457              	.LFE17:
 459              		.align	2
 460              		.global	SetEPTxValid
 462              	SetEPTxValid:
 463              	.LFB18:
 255:usblibrary/src/usb_regs.c **** 
 256:usblibrary/src/usb_regs.c **** /*******************************************************************************
 257:usblibrary/src/usb_regs.c **** * Function Name  : SetEPTxValid.
 258:usblibrary/src/usb_regs.c **** * Description    : Valid the endpoint Tx Status.
 259:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 260:usblibrary/src/usb_regs.c **** * Output         : None.
 261:usblibrary/src/usb_regs.c **** * Return         : None.
 262:usblibrary/src/usb_regs.c **** *******************************************************************************/
 263:usblibrary/src/usb_regs.c **** void SetEPTxValid(u8 bEpNum)
 264:usblibrary/src/usb_regs.c **** {
 464              		.loc 1 264 0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 468              		@ link register save eliminated.
 469              	.LVL29:
 470              	.LBB10:
 265:usblibrary/src/usb_regs.c ****   _SetEPTxStatus(bEpNum, EP_TX_VALID);
 471              		.loc 1 265 0
 472 01c0 0001A0E1 		mov	r0, r0, asl #2
 473              	.LVL30:
 474 01c4 060280E2 		add	r0, r0, #1610612736
 475 01c8 002890E5 		ldr	r2, [r0, #2048]
 476 01cc 0CC09FE5 		ldr	ip, .L33
 477 01d0 0C1002E0 		and	r1, r2, ip
 478              	.LVL31:
 479 01d4 303021E2 		eor	r3, r1, #48
 480 01d8 003880E5 		str	r3, [r0, #2048]
 481              	.LBE10:
 266:usblibrary/src/usb_regs.c **** }
 482              		.loc 1 266 0
 483 01dc 1EFF2FE1 		bx	lr
 484              	.L34:
 485              		.align	2
 486              	.L33:
 487 01e0 BF8F0000 		.word	36799
 488              		.cfi_endproc
 489              	.LFE18:
 491              		.align	2
 492              		.global	SetEPRxValid
 494              	SetEPRxValid:
 495              	.LFB19:
 267:usblibrary/src/usb_regs.c **** 
 268:usblibrary/src/usb_regs.c **** /*******************************************************************************
 269:usblibrary/src/usb_regs.c **** * Function Name  : SetEPRxValid.
 270:usblibrary/src/usb_regs.c **** * Description    : Valid the endpoint Rx Status.
 271:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 272:usblibrary/src/usb_regs.c **** * Output         : None.
 273:usblibrary/src/usb_regs.c **** * Return         : None.
 274:usblibrary/src/usb_regs.c **** *******************************************************************************/
 275:usblibrary/src/usb_regs.c **** void SetEPRxValid(u8 bEpNum)
 276:usblibrary/src/usb_regs.c **** {
 496              		.loc 1 276 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 0, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 501              	.LVL32:
 502              	.LBB11:
 277:usblibrary/src/usb_regs.c ****   _SetEPRxStatus(bEpNum, EP_RX_VALID);
 503              		.loc 1 277 0
 504 01e4 0001A0E1 		mov	r0, r0, asl #2
 505              	.LVL33:
 506 01e8 060280E2 		add	r0, r0, #1610612736
 507 01ec 002890E5 		ldr	r2, [r0, #2048]
 508 01f0 0CC09FE5 		ldr	ip, .L36
 509 01f4 0C1002E0 		and	r1, r2, ip
 510              	.LVL34:
 511 01f8 033A21E2 		eor	r3, r1, #12288
 512 01fc 003880E5 		str	r3, [r0, #2048]
 513              	.LBE11:
 278:usblibrary/src/usb_regs.c **** }
 514              		.loc 1 278 0
 515 0200 1EFF2FE1 		bx	lr
 516              	.L37:
 517              		.align	2
 518              	.L36:
 519 0204 8FBF0000 		.word	49039
 520              		.cfi_endproc
 521              	.LFE19:
 523              		.align	2
 524              		.global	SetEP_KIND
 526              	SetEP_KIND:
 527              	.LFB20:
 279:usblibrary/src/usb_regs.c **** 
 280:usblibrary/src/usb_regs.c **** /*******************************************************************************
 281:usblibrary/src/usb_regs.c **** * Function Name  : SetEP_KIND.
 282:usblibrary/src/usb_regs.c **** * Description    : Clear the EP_KIND bit.
 283:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 284:usblibrary/src/usb_regs.c **** * Output         : None.
 285:usblibrary/src/usb_regs.c **** * Return         : None.
 286:usblibrary/src/usb_regs.c **** *******************************************************************************/
 287:usblibrary/src/usb_regs.c **** void SetEP_KIND(u8 bEpNum)
 288:usblibrary/src/usb_regs.c **** {
 528              		.loc 1 288 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 0, uses_anonymous_args = 0
 532              		@ link register save eliminated.
 533              	.LVL35:
 289:usblibrary/src/usb_regs.c ****   _SetEP_KIND(bEpNum);
 534              		.loc 1 289 0
 535 0208 0001A0E1 		mov	r0, r0, asl #2
 536              	.LVL36:
 537 020c 060280E2 		add	r0, r0, #1610612736
 538 0210 00C890E5 		ldr	ip, [r0, #2048]
 539 0214 0C109FE5 		ldr	r1, .L39
 540 0218 012C8CE3 		orr	r2, ip, #256
 541 021c 013002E0 		and	r3, r2, r1
 542 0220 003880E5 		str	r3, [r0, #2048]
 290:usblibrary/src/usb_regs.c **** }
 543              		.loc 1 290 0
 544 0224 1EFF2FE1 		bx	lr
 545              	.L40:
 546              		.align	2
 547              	.L39:
 548 0228 8F8F0000 		.word	36751
 549              		.cfi_endproc
 550              	.LFE20:
 552              		.align	2
 553              		.global	ClearEP_KIND
 555              	ClearEP_KIND:
 556              	.LFB21:
 291:usblibrary/src/usb_regs.c **** 
 292:usblibrary/src/usb_regs.c **** /*******************************************************************************
 293:usblibrary/src/usb_regs.c **** * Function Name  : ClearEP_KIND.
 294:usblibrary/src/usb_regs.c **** * Description    : set the  EP_KIND bit.
 295:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 296:usblibrary/src/usb_regs.c **** * Output         : None.
 297:usblibrary/src/usb_regs.c **** * Return         : None.
 298:usblibrary/src/usb_regs.c **** *******************************************************************************/
 299:usblibrary/src/usb_regs.c **** void ClearEP_KIND(u8 bEpNum)
 300:usblibrary/src/usb_regs.c **** {
 557              		.loc 1 300 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561              		@ link register save eliminated.
 562              	.LVL37:
 301:usblibrary/src/usb_regs.c ****   _ClearEP_KIND(bEpNum);
 563              		.loc 1 301 0
 564 022c 00C1A0E1 		mov	ip, r0, asl #2
 565 0230 06028CE2 		add	r0, ip, #1610612736
 566              	.LVL38:
 567 0234 002890E5 		ldr	r2, [r0, #2048]
 568 0238 08109FE5 		ldr	r1, .L42
 569 023c 013002E0 		and	r3, r2, r1
 570 0240 003880E5 		str	r3, [r0, #2048]
 302:usblibrary/src/usb_regs.c **** }
 571              		.loc 1 302 0
 572 0244 1EFF2FE1 		bx	lr
 573              	.L43:
 574              		.align	2
 575              	.L42:
 576 0248 8F8E0000 		.word	36495
 577              		.cfi_endproc
 578              	.LFE21:
 580              		.align	2
 581              		.global	Clear_Status_Out
 583              	Clear_Status_Out:
 584              	.LFB22:
 303:usblibrary/src/usb_regs.c **** 
 304:usblibrary/src/usb_regs.c **** /*******************************************************************************
 305:usblibrary/src/usb_regs.c **** * Function Name  : Clear_Status_Out.
 306:usblibrary/src/usb_regs.c **** * Description    : Clear the Status Out of the related Endpoint.
 307:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 308:usblibrary/src/usb_regs.c **** * Output         : None.
 309:usblibrary/src/usb_regs.c **** * Return         : None.
 310:usblibrary/src/usb_regs.c **** *******************************************************************************/
 311:usblibrary/src/usb_regs.c **** void Clear_Status_Out(u8 bEpNum)
 312:usblibrary/src/usb_regs.c **** {
 585              		.loc 1 312 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 590              	.LVL39:
 313:usblibrary/src/usb_regs.c ****   _ClearEP_KIND(bEpNum);
 591              		.loc 1 313 0
 592 024c 00C1A0E1 		mov	ip, r0, asl #2
 593 0250 06028CE2 		add	r0, ip, #1610612736
 594              	.LVL40:
 595 0254 002890E5 		ldr	r2, [r0, #2048]
 596 0258 08109FE5 		ldr	r1, .L45
 597 025c 013002E0 		and	r3, r2, r1
 598 0260 003880E5 		str	r3, [r0, #2048]
 314:usblibrary/src/usb_regs.c **** }
 599              		.loc 1 314 0
 600 0264 1EFF2FE1 		bx	lr
 601              	.L46:
 602              		.align	2
 603              	.L45:
 604 0268 8F8E0000 		.word	36495
 605              		.cfi_endproc
 606              	.LFE22:
 608              		.align	2
 609              		.global	Set_Status_Out
 611              	Set_Status_Out:
 612              	.LFB23:
 315:usblibrary/src/usb_regs.c **** 
 316:usblibrary/src/usb_regs.c **** /*******************************************************************************
 317:usblibrary/src/usb_regs.c **** * Function Name  : Set_Status_Out.
 318:usblibrary/src/usb_regs.c **** * Description    : Set the Status Out of the related Endpoint.
 319:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 320:usblibrary/src/usb_regs.c **** * Output         : None.
 321:usblibrary/src/usb_regs.c **** * Return         : None.
 322:usblibrary/src/usb_regs.c **** *******************************************************************************/
 323:usblibrary/src/usb_regs.c **** void Set_Status_Out(u8 bEpNum)
 324:usblibrary/src/usb_regs.c **** {
 613              		.loc 1 324 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617              		@ link register save eliminated.
 618              	.LVL41:
 325:usblibrary/src/usb_regs.c ****   _SetEP_KIND(bEpNum);
 619              		.loc 1 325 0
 620 026c 0001A0E1 		mov	r0, r0, asl #2
 621              	.LVL42:
 622 0270 060280E2 		add	r0, r0, #1610612736
 623 0274 00C890E5 		ldr	ip, [r0, #2048]
 624 0278 0C109FE5 		ldr	r1, .L48
 625 027c 012C8CE3 		orr	r2, ip, #256
 626 0280 013002E0 		and	r3, r2, r1
 627 0284 003880E5 		str	r3, [r0, #2048]
 326:usblibrary/src/usb_regs.c **** }
 628              		.loc 1 326 0
 629 0288 1EFF2FE1 		bx	lr
 630              	.L49:
 631              		.align	2
 632              	.L48:
 633 028c 8F8F0000 		.word	36751
 634              		.cfi_endproc
 635              	.LFE23:
 637              		.align	2
 638              		.global	SetEPDoubleBuff
 640              	SetEPDoubleBuff:
 641              	.LFB24:
 327:usblibrary/src/usb_regs.c **** 
 328:usblibrary/src/usb_regs.c **** /*******************************************************************************
 329:usblibrary/src/usb_regs.c **** * Function Name  : SetEPDoubleBuff.
 330:usblibrary/src/usb_regs.c **** * Description    : Enable the double buffer feature for the endpoint.
 331:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 332:usblibrary/src/usb_regs.c **** * Output         : None.
 333:usblibrary/src/usb_regs.c **** * Return         : None.
 334:usblibrary/src/usb_regs.c **** *******************************************************************************/
 335:usblibrary/src/usb_regs.c **** void SetEPDoubleBuff(u8 bEpNum)
 336:usblibrary/src/usb_regs.c **** {
 642              		.loc 1 336 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 0
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 646              		@ link register save eliminated.
 647              	.LVL43:
 337:usblibrary/src/usb_regs.c ****   _SetEP_KIND(bEpNum);
 648              		.loc 1 337 0
 649 0290 0001A0E1 		mov	r0, r0, asl #2
 650              	.LVL44:
 651 0294 060280E2 		add	r0, r0, #1610612736
 652 0298 00C890E5 		ldr	ip, [r0, #2048]
 653 029c 0C109FE5 		ldr	r1, .L51
 654 02a0 012C8CE3 		orr	r2, ip, #256
 655 02a4 013002E0 		and	r3, r2, r1
 656 02a8 003880E5 		str	r3, [r0, #2048]
 338:usblibrary/src/usb_regs.c **** }
 657              		.loc 1 338 0
 658 02ac 1EFF2FE1 		bx	lr
 659              	.L52:
 660              		.align	2
 661              	.L51:
 662 02b0 8F8F0000 		.word	36751
 663              		.cfi_endproc
 664              	.LFE24:
 666              		.align	2
 667              		.global	ClearEPDoubleBuff
 669              	ClearEPDoubleBuff:
 670              	.LFB25:
 339:usblibrary/src/usb_regs.c **** 
 340:usblibrary/src/usb_regs.c **** /*******************************************************************************
 341:usblibrary/src/usb_regs.c **** * Function Name  : ClearEPDoubleBuff.
 342:usblibrary/src/usb_regs.c **** * Description    : Disable the double buffer feature for the endpoint.
 343:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 344:usblibrary/src/usb_regs.c **** * Output         : None.
 345:usblibrary/src/usb_regs.c **** * Return         : None.
 346:usblibrary/src/usb_regs.c **** *******************************************************************************/
 347:usblibrary/src/usb_regs.c **** void ClearEPDoubleBuff(u8 bEpNum)
 348:usblibrary/src/usb_regs.c **** {
 671              		.loc 1 348 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675              		@ link register save eliminated.
 676              	.LVL45:
 349:usblibrary/src/usb_regs.c ****   _ClearEP_KIND(bEpNum);
 677              		.loc 1 349 0
 678 02b4 00C1A0E1 		mov	ip, r0, asl #2
 679 02b8 06028CE2 		add	r0, ip, #1610612736
 680              	.LVL46:
 681 02bc 002890E5 		ldr	r2, [r0, #2048]
 682 02c0 08109FE5 		ldr	r1, .L54
 683 02c4 013002E0 		and	r3, r2, r1
 684 02c8 003880E5 		str	r3, [r0, #2048]
 350:usblibrary/src/usb_regs.c **** }
 685              		.loc 1 350 0
 686 02cc 1EFF2FE1 		bx	lr
 687              	.L55:
 688              		.align	2
 689              	.L54:
 690 02d0 8F8E0000 		.word	36495
 691              		.cfi_endproc
 692              	.LFE25:
 694              		.align	2
 695              		.global	GetTxStallStatus
 697              	GetTxStallStatus:
 698              	.LFB26:
 351:usblibrary/src/usb_regs.c **** 
 352:usblibrary/src/usb_regs.c **** /*******************************************************************************
 353:usblibrary/src/usb_regs.c **** * Function Name  : GetTxStallStatus
 354:usblibrary/src/usb_regs.c **** * Description    : Returns the Stall status of the Tx endpoint.
 355:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 356:usblibrary/src/usb_regs.c **** * Output         : None.
 357:usblibrary/src/usb_regs.c **** * Return         : Tx Stall status.
 358:usblibrary/src/usb_regs.c **** *******************************************************************************/
 359:usblibrary/src/usb_regs.c **** u16 GetTxStallStatus(u8 bEpNum)
 360:usblibrary/src/usb_regs.c **** {
 699              		.loc 1 360 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 0
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703              		@ link register save eliminated.
 704              	.LVL47:
 361:usblibrary/src/usb_regs.c ****   return(_GetTxStallStatus(bEpNum));
 705              		.loc 1 361 0
 706 02d4 0001A0E1 		mov	r0, r0, asl #2
 707              	.LVL48:
 708 02d8 06C280E2 		add	ip, r0, #1610612736
 709 02dc 00289CE5 		ldr	r2, [ip, #2048]
 710 02e0 301002E2 		and	r1, r2, #48
 362:usblibrary/src/usb_regs.c **** }
 711              		.loc 1 362 0
 712 02e4 103041E2 		sub	r3, r1, #16
 713 02e8 000073E2 		rsbs	r0, r3, #0
 714 02ec 0300A0E0 		adc	r0, r0, r3
 715 02f0 1EFF2FE1 		bx	lr
 716              		.cfi_endproc
 717              	.LFE26:
 719              		.align	2
 720              		.global	GetRxStallStatus
 722              	GetRxStallStatus:
 723              	.LFB27:
 363:usblibrary/src/usb_regs.c **** 
 364:usblibrary/src/usb_regs.c **** /*******************************************************************************
 365:usblibrary/src/usb_regs.c **** * Function Name  : GetRxStallStatus
 366:usblibrary/src/usb_regs.c **** * Description    : Returns the Stall status of the Rx endpoint.
 367:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 368:usblibrary/src/usb_regs.c **** * Output         : None.
 369:usblibrary/src/usb_regs.c **** * Return         : Rx Stall status.
 370:usblibrary/src/usb_regs.c **** *******************************************************************************/
 371:usblibrary/src/usb_regs.c **** u16 GetRxStallStatus(u8 bEpNum)
 372:usblibrary/src/usb_regs.c **** {
 724              		.loc 1 372 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728              		@ link register save eliminated.
 729              	.LVL49:
 373:usblibrary/src/usb_regs.c ****   return(_GetRxStallStatus(bEpNum));
 730              		.loc 1 373 0
 731 02f4 0001A0E1 		mov	r0, r0, asl #2
 732              	.LVL50:
 733 02f8 06C280E2 		add	ip, r0, #1610612736
 734 02fc 00389CE5 		ldr	r3, [ip, #2048]
 735 0300 031A03E2 		and	r1, r3, #12288
 374:usblibrary/src/usb_regs.c **** }
 736              		.loc 1 374 0
 737 0304 012A41E2 		sub	r2, r1, #4096
 738 0308 000072E2 		rsbs	r0, r2, #0
 739 030c 0200A0E0 		adc	r0, r0, r2
 740 0310 1EFF2FE1 		bx	lr
 741              		.cfi_endproc
 742              	.LFE27:
 744              		.align	2
 745              		.global	ClearEP_CTR_RX
 747              	ClearEP_CTR_RX:
 748              	.LFB28:
 375:usblibrary/src/usb_regs.c **** 
 376:usblibrary/src/usb_regs.c **** /*******************************************************************************
 377:usblibrary/src/usb_regs.c **** * Function Name  : ClearEP_CTR_RX
 378:usblibrary/src/usb_regs.c **** * Description    : Clear the CTR_RX bit.
 379:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 380:usblibrary/src/usb_regs.c **** * Output         : None.
 381:usblibrary/src/usb_regs.c **** * Return         : None.
 382:usblibrary/src/usb_regs.c **** *******************************************************************************/
 383:usblibrary/src/usb_regs.c **** void ClearEP_CTR_RX(u8 bEpNum)
 384:usblibrary/src/usb_regs.c **** {
 749              		.loc 1 384 0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753              		@ link register save eliminated.
 754              	.LVL51:
 385:usblibrary/src/usb_regs.c ****   _ClearEP_CTR_RX(bEpNum);
 755              		.loc 1 385 0
 756 0314 00C1A0E1 		mov	ip, r0, asl #2
 757 0318 06028CE2 		add	r0, ip, #1610612736
 758              	.LVL52:
 759 031c 002890E5 		ldr	r2, [r0, #2048]
 760 0320 08109FE5 		ldr	r1, .L59
 761 0324 013002E0 		and	r3, r2, r1
 762 0328 003880E5 		str	r3, [r0, #2048]
 386:usblibrary/src/usb_regs.c **** }
 763              		.loc 1 386 0
 764 032c 1EFF2FE1 		bx	lr
 765              	.L60:
 766              		.align	2
 767              	.L59:
 768 0330 8F0F0000 		.word	3983
 769              		.cfi_endproc
 770              	.LFE28:
 772              		.align	2
 773              		.global	ClearEP_CTR_TX
 775              	ClearEP_CTR_TX:
 776              	.LFB29:
 387:usblibrary/src/usb_regs.c **** 
 388:usblibrary/src/usb_regs.c **** /*******************************************************************************
 389:usblibrary/src/usb_regs.c **** * Function Name  : ClearEP_CTR_TX
 390:usblibrary/src/usb_regs.c **** * Description    : Clear the CTR_TX bit.
 391:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 392:usblibrary/src/usb_regs.c **** * Output         : None.
 393:usblibrary/src/usb_regs.c **** * Return         : None.
 394:usblibrary/src/usb_regs.c **** *******************************************************************************/
 395:usblibrary/src/usb_regs.c **** void ClearEP_CTR_TX(u8 bEpNum)
 396:usblibrary/src/usb_regs.c **** {
 777              		.loc 1 396 0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 0
 780              		@ frame_needed = 0, uses_anonymous_args = 0
 781              		@ link register save eliminated.
 782              	.LVL53:
 397:usblibrary/src/usb_regs.c ****   _ClearEP_CTR_TX(bEpNum);
 783              		.loc 1 397 0
 784 0334 00C1A0E1 		mov	ip, r0, asl #2
 785 0338 06028CE2 		add	r0, ip, #1610612736
 786              	.LVL54:
 787 033c 002890E5 		ldr	r2, [r0, #2048]
 788 0340 08109FE5 		ldr	r1, .L62
 789 0344 013002E0 		and	r3, r2, r1
 790 0348 003880E5 		str	r3, [r0, #2048]
 398:usblibrary/src/usb_regs.c **** }
 791              		.loc 1 398 0
 792 034c 1EFF2FE1 		bx	lr
 793              	.L63:
 794              		.align	2
 795              	.L62:
 796 0350 0F8F0000 		.word	36623
 797              		.cfi_endproc
 798              	.LFE29:
 800              		.align	2
 801              		.global	ToggleDTOG_RX
 803              	ToggleDTOG_RX:
 804              	.LFB30:
 399:usblibrary/src/usb_regs.c **** 
 400:usblibrary/src/usb_regs.c **** /*******************************************************************************
 401:usblibrary/src/usb_regs.c **** * Function Name  : ToggleDTOG_RX
 402:usblibrary/src/usb_regs.c **** * Description    : Toggle the DTOG_RX bit.
 403:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 404:usblibrary/src/usb_regs.c **** * Output         : None.
 405:usblibrary/src/usb_regs.c **** * Return         : None.
 406:usblibrary/src/usb_regs.c **** *******************************************************************************/
 407:usblibrary/src/usb_regs.c **** void ToggleDTOG_RX(u8 bEpNum)
 408:usblibrary/src/usb_regs.c **** {
 805              		.loc 1 408 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 0
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809              		@ link register save eliminated.
 810              	.LVL55:
 409:usblibrary/src/usb_regs.c ****   _ToggleDTOG_RX(bEpNum);
 811              		.loc 1 409 0
 812 0354 0001A0E1 		mov	r0, r0, asl #2
 813              	.LVL56:
 814 0358 060280E2 		add	r0, r0, #1610612736
 815 035c 002890E5 		ldr	r2, [r0, #2048]
 816 0360 0CC09FE5 		ldr	ip, .L65
 817 0364 0C1002E0 		and	r1, r2, ip
 818 0368 013981E3 		orr	r3, r1, #16384
 819 036c 003880E5 		str	r3, [r0, #2048]
 410:usblibrary/src/usb_regs.c **** }
 820              		.loc 1 410 0
 821 0370 1EFF2FE1 		bx	lr
 822              	.L66:
 823              		.align	2
 824              	.L65:
 825 0374 8F8F0000 		.word	36751
 826              		.cfi_endproc
 827              	.LFE30:
 829              		.align	2
 830              		.global	ToggleDTOG_TX
 832              	ToggleDTOG_TX:
 833              	.LFB31:
 411:usblibrary/src/usb_regs.c **** 
 412:usblibrary/src/usb_regs.c **** /*******************************************************************************
 413:usblibrary/src/usb_regs.c **** * Function Name  : ToggleDTOG_TX
 414:usblibrary/src/usb_regs.c **** * Description    : Toggle the DTOG_TX bit.
 415:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 416:usblibrary/src/usb_regs.c **** * Output         : None.
 417:usblibrary/src/usb_regs.c **** * Return         : None.
 418:usblibrary/src/usb_regs.c **** *******************************************************************************/
 419:usblibrary/src/usb_regs.c **** void ToggleDTOG_TX(u8 bEpNum)
 420:usblibrary/src/usb_regs.c **** {
 834              		.loc 1 420 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839              	.LVL57:
 421:usblibrary/src/usb_regs.c ****   _ToggleDTOG_TX(bEpNum);
 840              		.loc 1 421 0
 841 0378 0001A0E1 		mov	r0, r0, asl #2
 842              	.LVL58:
 843 037c 060280E2 		add	r0, r0, #1610612736
 844 0380 002890E5 		ldr	r2, [r0, #2048]
 845 0384 0CC09FE5 		ldr	ip, .L68
 846 0388 0C1002E0 		and	r1, r2, ip
 847 038c 403081E3 		orr	r3, r1, #64
 848 0390 003880E5 		str	r3, [r0, #2048]
 422:usblibrary/src/usb_regs.c **** }
 849              		.loc 1 422 0
 850 0394 1EFF2FE1 		bx	lr
 851              	.L69:
 852              		.align	2
 853              	.L68:
 854 0398 8F8F0000 		.word	36751
 855              		.cfi_endproc
 856              	.LFE31:
 858              		.align	2
 859              		.global	ClearDTOG_RX
 861              	ClearDTOG_RX:
 862              	.LFB32:
 423:usblibrary/src/usb_regs.c **** 
 424:usblibrary/src/usb_regs.c **** /*******************************************************************************
 425:usblibrary/src/usb_regs.c **** * Function Name  : ClearDTOG_RX.
 426:usblibrary/src/usb_regs.c **** * Description    : Clear the DTOG_RX bit.
 427:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 428:usblibrary/src/usb_regs.c **** * Output         : None.
 429:usblibrary/src/usb_regs.c **** * Return         : None.
 430:usblibrary/src/usb_regs.c **** *******************************************************************************/
 431:usblibrary/src/usb_regs.c **** void ClearDTOG_RX(u8 bEpNum)
 432:usblibrary/src/usb_regs.c **** {
 863              		.loc 1 432 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 0, uses_anonymous_args = 0
 867              		@ link register save eliminated.
 868              	.LVL59:
 433:usblibrary/src/usb_regs.c ****   _ClearDTOG_RX(bEpNum);
 869              		.loc 1 433 0
 870 039c 0011A0E1 		mov	r1, r0, asl #2
 871 03a0 060281E2 		add	r0, r1, #1610612736
 872              	.LVL60:
 873 03a4 003890E5 		ldr	r3, [r0, #2048]
 874 03a8 010913E3 		tst	r3, #16384
 875 03ac 10309F15 		ldrne	r3, .L72
 876 03b0 00289015 		ldrne	r2, [r0, #2048]
 877 03b4 03300210 		andne	r3, r2, r3
 878 03b8 01398313 		orrne	r3, r3, #16384
 879 03bc 00388015 		strne	r3, [r0, #2048]
 880 03c0 1EFF2FE1 		bx	lr
 881              	.L73:
 882              		.align	2
 883              	.L72:
 884 03c4 8F8F0000 		.word	36751
 885              		.cfi_endproc
 886              	.LFE32:
 888              		.align	2
 889              		.global	ClearDTOG_TX
 891              	ClearDTOG_TX:
 892              	.LFB33:
 434:usblibrary/src/usb_regs.c **** }
 435:usblibrary/src/usb_regs.c **** 
 436:usblibrary/src/usb_regs.c **** /*******************************************************************************
 437:usblibrary/src/usb_regs.c **** * Function Name  : ClearDTOG_TX.
 438:usblibrary/src/usb_regs.c **** * Description    : Clear the DTOG_TX bit.
 439:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 440:usblibrary/src/usb_regs.c **** * Output         : None.
 441:usblibrary/src/usb_regs.c **** * Return         : None.
 442:usblibrary/src/usb_regs.c **** *******************************************************************************/
 443:usblibrary/src/usb_regs.c **** void ClearDTOG_TX(u8 bEpNum)
 444:usblibrary/src/usb_regs.c **** {
 893              		.loc 1 444 0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 0
 896              		@ frame_needed = 0, uses_anonymous_args = 0
 897              		@ link register save eliminated.
 898              	.LVL61:
 445:usblibrary/src/usb_regs.c ****   _ClearDTOG_TX(bEpNum);
 899              		.loc 1 445 0
 900 03c8 0011A0E1 		mov	r1, r0, asl #2
 901 03cc 060281E2 		add	r0, r1, #1610612736
 902              	.LVL62:
 903 03d0 003890E5 		ldr	r3, [r0, #2048]
 904 03d4 400013E3 		tst	r3, #64
 905 03d8 10309F15 		ldrne	r3, .L76
 906 03dc 00289015 		ldrne	r2, [r0, #2048]
 907 03e0 03300210 		andne	r3, r2, r3
 908 03e4 40308313 		orrne	r3, r3, #64
 909 03e8 00388015 		strne	r3, [r0, #2048]
 910 03ec 1EFF2FE1 		bx	lr
 911              	.L77:
 912              		.align	2
 913              	.L76:
 914 03f0 8F8F0000 		.word	36751
 915              		.cfi_endproc
 916              	.LFE33:
 918              		.align	2
 919              		.global	SetEPAddress
 921              	SetEPAddress:
 922              	.LFB34:
 446:usblibrary/src/usb_regs.c **** }
 447:usblibrary/src/usb_regs.c **** 
 448:usblibrary/src/usb_regs.c **** /*******************************************************************************
 449:usblibrary/src/usb_regs.c **** * Function Name  : SetEPAddress
 450:usblibrary/src/usb_regs.c **** * Description    : Set the endpoint address.
 451:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 452:usblibrary/src/usb_regs.c **** *                  bAddr: New endpoint address.
 453:usblibrary/src/usb_regs.c **** * Output         : None.
 454:usblibrary/src/usb_regs.c **** * Return         : None.
 455:usblibrary/src/usb_regs.c **** *******************************************************************************/
 456:usblibrary/src/usb_regs.c **** void SetEPAddress(u8 bEpNum, u8 bAddr)
 457:usblibrary/src/usb_regs.c **** {
 923              		.loc 1 457 0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927              		@ link register save eliminated.
 928              	.LVL63:
 458:usblibrary/src/usb_regs.c ****   _SetEPAddress(bEpNum, bAddr);
 929              		.loc 1 458 0
 930 03f4 0001A0E1 		mov	r0, r0, asl #2
 931              	.LVL64:
 932 03f8 060280E2 		add	r0, r0, #1610612736
 933 03fc 003890E5 		ldr	r3, [r0, #2048]
 934 0400 0CC09FE5 		ldr	ip, .L79
 935 0404 0C2003E0 		and	r2, r3, ip
 936 0408 013082E1 		orr	r3, r2, r1
 937 040c 003880E5 		str	r3, [r0, #2048]
 459:usblibrary/src/usb_regs.c **** }
 938              		.loc 1 459 0
 939 0410 1EFF2FE1 		bx	lr
 940              	.L80:
 941              		.align	2
 942              	.L79:
 943 0414 8F8F0000 		.word	36751
 944              		.cfi_endproc
 945              	.LFE34:
 947              		.align	2
 948              		.global	GetEPAddress
 950              	GetEPAddress:
 951              	.LFB35:
 460:usblibrary/src/usb_regs.c **** 
 461:usblibrary/src/usb_regs.c **** /*******************************************************************************
 462:usblibrary/src/usb_regs.c **** * Function Name  : GetEPAddress
 463:usblibrary/src/usb_regs.c **** * Description    : Get the endpoint address.
 464:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 465:usblibrary/src/usb_regs.c **** * Output         : None.
 466:usblibrary/src/usb_regs.c **** * Return         : Endpoint address.
 467:usblibrary/src/usb_regs.c **** *******************************************************************************/
 468:usblibrary/src/usb_regs.c **** u8 GetEPAddress(u8 bEpNum)
 469:usblibrary/src/usb_regs.c **** {
 952              		.loc 1 469 0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              		@ link register save eliminated.
 957              	.LVL65:
 470:usblibrary/src/usb_regs.c ****   return(_GetEPAddress(bEpNum));
 958              		.loc 1 470 0
 959 0418 0021A0E1 		mov	r2, r0, asl #2
 960 041c 061282E2 		add	r1, r2, #1610612736
 961 0420 000891E5 		ldr	r0, [r1, #2048]
 962              	.LVL66:
 471:usblibrary/src/usb_regs.c **** }
 963              		.loc 1 471 0
 964 0424 0F0000E2 		and	r0, r0, #15
 965 0428 1EFF2FE1 		bx	lr
 966              		.cfi_endproc
 967              	.LFE35:
 969              		.align	2
 970              		.global	SetEPTxAddr
 972              	SetEPTxAddr:
 973              	.LFB36:
 472:usblibrary/src/usb_regs.c **** 
 473:usblibrary/src/usb_regs.c **** /*******************************************************************************
 474:usblibrary/src/usb_regs.c **** * Function Name  : SetEPTxAddr
 475:usblibrary/src/usb_regs.c **** * Description    : Set the endpoint Tx buffer address.
 476:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 477:usblibrary/src/usb_regs.c **** *                  wAddr: new address.
 478:usblibrary/src/usb_regs.c **** * Output         : None.
 479:usblibrary/src/usb_regs.c **** * Return         : None.
 480:usblibrary/src/usb_regs.c **** *******************************************************************************/
 481:usblibrary/src/usb_regs.c **** void SetEPTxAddr(u8 bEpNum, u16 wAddr)
 482:usblibrary/src/usb_regs.c **** {
 974              		.loc 1 482 0
 975              		.cfi_startproc
 976              		@ args = 0, pretend = 0, frame = 0
 977              		@ frame_needed = 0, uses_anonymous_args = 0
 978              		@ link register save eliminated.
 979              	.LVL67:
 483:usblibrary/src/usb_regs.c ****   _SetEPTxAddr(bEpNum, wAddr);
 980              		.loc 1 483 0
 981 042c 0632A0E3 		mov	r3, #1610612736
 982 0430 502893E5 		ldr	r2, [r3, #2128]
 482:usblibrary/src/usb_regs.c **** {
 983              		.loc 1 482 0
 984 0434 04402DE5 		str	r4, [sp, #-4]!
 985              	.LCFI0:
 986              		.cfi_def_cfa_offset 4
 987              		.loc 1 483 0
 988 0438 02C8A0E1 		mov	ip, r2, asl #16
 989 043c 2C48A0E1 		mov	r4, ip, lsr #16
 990              		.cfi_offset 4, -4
 991 0440 03C084E0 		add	ip, r4, r3
 992 0444 80419CE7 		ldr	r4, [ip, r0, asl #3]
 993 0448 502893E5 		ldr	r2, [r3, #2128]
 994 044c 2438A0E1 		mov	r3, r4, lsr #16
 995 0450 0228A0E1 		mov	r2, r2, asl #16
 996 0454 0338A0E1 		mov	r3, r3, asl #16
 997 0458 2228A0E1 		mov	r2, r2, lsr #16
 998 045c 80318CE7 		str	r3, [ip, r0, asl #3]
 999 0460 062282E2 		add	r2, r2, #1610612736
 1000 0464 14309FE5 		ldr	r3, .L83
 1001 0468 80C192E7 		ldr	ip, [r2, r0, asl #3]
 1002 046c 031001E0 		and	r1, r1, r3
 1003              	.LVL68:
 1004 0470 01308CE1 		orr	r3, ip, r1
 1005 0474 803182E7 		str	r3, [r2, r0, asl #3]
 484:usblibrary/src/usb_regs.c **** }
 1006              		.loc 1 484 0
 1007 0478 04409DE4 		ldmfd	sp!, {r4}
 1008 047c 1EFF2FE1 		bx	lr
 1009              	.L84:
 1010              		.align	2
 1011              	.L83:
 1012 0480 FCFF0000 		.word	65532
 1013              		.cfi_endproc
 1014              	.LFE36:
 1016              		.align	2
 1017              		.global	SetEPRxAddr
 1019              	SetEPRxAddr:
 1020              	.LFB37:
 485:usblibrary/src/usb_regs.c **** 
 486:usblibrary/src/usb_regs.c **** /*******************************************************************************
 487:usblibrary/src/usb_regs.c **** * Function Name  : SetEPRxAddr
 488:usblibrary/src/usb_regs.c **** * Description    : Set the endpoint Rx buffer address.
 489:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 490:usblibrary/src/usb_regs.c **** *                  wAddr: new address.
 491:usblibrary/src/usb_regs.c **** * Output         : None.
 492:usblibrary/src/usb_regs.c **** * Return         : None.
 493:usblibrary/src/usb_regs.c **** *******************************************************************************/
 494:usblibrary/src/usb_regs.c **** void SetEPRxAddr(u8 bEpNum, u16 wAddr)
 495:usblibrary/src/usb_regs.c **** {
 1021              		.loc 1 495 0
 1022              		.cfi_startproc
 1023              		@ args = 0, pretend = 0, frame = 0
 1024              		@ frame_needed = 0, uses_anonymous_args = 0
 1025              		@ link register save eliminated.
 1026              	.LVL69:
 496:usblibrary/src/usb_regs.c ****   _SetEPRxAddr(bEpNum, wAddr);
 1027              		.loc 1 496 0
 1028 0484 0632A0E3 		mov	r3, #1610612736
 1029 0488 502893E5 		ldr	r2, [r3, #2128]
 1030 048c 503893E5 		ldr	r3, [r3, #2128]
 1031 0490 02C8A0E1 		mov	ip, r2, asl #16
 1032 0494 2C28A0E1 		mov	r2, ip, lsr #16
 1033 0498 062282E2 		add	r2, r2, #1610612736
 1034 049c 80C1A0E1 		mov	ip, r0, asl #3
 1035 04a0 B2C09CE1 		ldrh	ip, [ip, r2]
 1036 04a4 0338A0E1 		mov	r3, r3, asl #16
 1037 04a8 2338A0E1 		mov	r3, r3, lsr #16
 1038 04ac 80C182E7 		str	ip, [r2, r0, asl #3]
 1039 04b0 063283E2 		add	r3, r3, #1610612736
 1040 04b4 80C193E7 		ldr	ip, [r3, r0, asl #3]
 1041 04b8 2111A0E1 		mov	r1, r1, lsr #2
 1042              	.LVL70:
 1043 04bc 01298CE1 		orr	r2, ip, r1, asl #18
 1044 04c0 802183E7 		str	r2, [r3, r0, asl #3]
 497:usblibrary/src/usb_regs.c **** }
 1045              		.loc 1 497 0
 1046 04c4 1EFF2FE1 		bx	lr
 1047              		.cfi_endproc
 1048              	.LFE37:
 1050              		.align	2
 1051              		.global	GetEPTxAddr
 1053              	GetEPTxAddr:
 1054              	.LFB38:
 498:usblibrary/src/usb_regs.c **** 
 499:usblibrary/src/usb_regs.c **** /*******************************************************************************
 500:usblibrary/src/usb_regs.c **** * Function Name  : GetEPTxAddr
 501:usblibrary/src/usb_regs.c **** * Description    : Returns the endpoint Tx buffer address.
 502:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 503:usblibrary/src/usb_regs.c **** * Output         : None.
 504:usblibrary/src/usb_regs.c **** * Return         : Rx buffer address.
 505:usblibrary/src/usb_regs.c **** *******************************************************************************/
 506:usblibrary/src/usb_regs.c **** u16 GetEPTxAddr(u8 bEpNum)
 507:usblibrary/src/usb_regs.c **** {
 1055              		.loc 1 507 0
 1056              		.cfi_startproc
 1057              		@ args = 0, pretend = 0, frame = 0
 1058              		@ frame_needed = 0, uses_anonymous_args = 0
 1059              		@ link register save eliminated.
 1060              	.LVL71:
 508:usblibrary/src/usb_regs.c ****   return(_GetEPTxAddr(bEpNum));
 1061              		.loc 1 508 0
 1062 04c8 0632A0E3 		mov	r3, #1610612736
 1063 04cc 50C893E5 		ldr	ip, [r3, #2128]
 1064 04d0 8021A0E1 		mov	r2, r0, asl #3
 1065 04d4 0C18A0E1 		mov	r1, ip, asl #16
 1066 04d8 210882E0 		add	r0, r2, r1, lsr #16
 1067              	.LVL72:
 1068 04dc 063280E2 		add	r3, r0, #1610612736
 509:usblibrary/src/usb_regs.c **** }
 1069              		.loc 1 509 0
 1070 04e0 B000D3E1 		ldrh	r0, [r3, #0]
 1071 04e4 1EFF2FE1 		bx	lr
 1072              		.cfi_endproc
 1073              	.LFE38:
 1075              		.align	2
 1076              		.global	GetEPRxAddr
 1078              	GetEPRxAddr:
 1079              	.LFB39:
 510:usblibrary/src/usb_regs.c **** 
 511:usblibrary/src/usb_regs.c **** /*******************************************************************************
 512:usblibrary/src/usb_regs.c **** * Function Name  : GetEPRxAddr.
 513:usblibrary/src/usb_regs.c **** * Description    : Returns the endpoint Rx buffer address.
 514:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 515:usblibrary/src/usb_regs.c **** * Output         : None.
 516:usblibrary/src/usb_regs.c **** * Return         : Rx buffer address.
 517:usblibrary/src/usb_regs.c **** *******************************************************************************/
 518:usblibrary/src/usb_regs.c **** u16 GetEPRxAddr(u8 bEpNum)
 519:usblibrary/src/usb_regs.c **** {
 1080              		.loc 1 519 0
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 0
 1083              		@ frame_needed = 0, uses_anonymous_args = 0
 1084              		@ link register save eliminated.
 1085              	.LVL73:
 520:usblibrary/src/usb_regs.c ****   return(_GetEPRxAddr(bEpNum));
 1086              		.loc 1 520 0
 1087 04e8 0632A0E3 		mov	r3, #1610612736
 1088 04ec 50C893E5 		ldr	ip, [r3, #2128]
 1089 04f0 8021A0E1 		mov	r2, r0, asl #3
 1090 04f4 0C18A0E1 		mov	r1, ip, asl #16
 1091 04f8 210882E0 		add	r0, r2, r1, lsr #16
 1092              	.LVL74:
 1093 04fc 063280E2 		add	r3, r0, #1610612736
 521:usblibrary/src/usb_regs.c **** }
 1094              		.loc 1 521 0
 1095 0500 B200D3E1 		ldrh	r0, [r3, #2]
 1096 0504 1EFF2FE1 		bx	lr
 1097              		.cfi_endproc
 1098              	.LFE39:
 1100              		.align	2
 1101              		.global	SetEPTxCount
 1103              	SetEPTxCount:
 1104              	.LFB40:
 522:usblibrary/src/usb_regs.c **** 
 523:usblibrary/src/usb_regs.c **** /*******************************************************************************
 524:usblibrary/src/usb_regs.c **** * Function Name  : SetEPTxCount.
 525:usblibrary/src/usb_regs.c **** * Description    : Set the Tx count.
 526:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 527:usblibrary/src/usb_regs.c **** *                  wCount: new count value.
 528:usblibrary/src/usb_regs.c **** * Output         : None.
 529:usblibrary/src/usb_regs.c **** * Return         : None.
 530:usblibrary/src/usb_regs.c **** *******************************************************************************/
 531:usblibrary/src/usb_regs.c **** void SetEPTxCount(u8 bEpNum, u16 wCount)
 532:usblibrary/src/usb_regs.c **** {
 1105              		.loc 1 532 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 1110              	.LVL75:
 533:usblibrary/src/usb_regs.c ****   _SetEPTxCount(bEpNum, wCount);
 1111              		.loc 1 533 0
 1112 0508 0632A0E3 		mov	r3, #1610612736
 1113 050c 502893E5 		ldr	r2, [r3, #2128]
 1114 0510 503893E5 		ldr	r3, [r3, #2128]
 1115 0514 02C8A0E1 		mov	ip, r2, asl #16
 1116 0518 2C28A0E1 		mov	r2, ip, lsr #16
 1117 051c 462282E2 		add	r2, r2, #1610612740
 1118 0520 80C192E7 		ldr	ip, [r2, r0, asl #3]
 1119 0524 0338A0E1 		mov	r3, r3, asl #16
 1120 0528 FFCFCCE3 		bic	ip, ip, #1020
 1121 052c 03C0CCE3 		bic	ip, ip, #3
 1122 0530 2338A0E1 		mov	r3, r3, lsr #16
 1123 0534 80C182E7 		str	ip, [r2, r0, asl #3]
 1124 0538 463283E2 		add	r3, r3, #1610612740
 1125 053c 80C193E7 		ldr	ip, [r3, r0, asl #3]
 1126 0540 01208CE1 		orr	r2, ip, r1
 1127 0544 802183E7 		str	r2, [r3, r0, asl #3]
 534:usblibrary/src/usb_regs.c **** }
 1128              		.loc 1 534 0
 1129 0548 1EFF2FE1 		bx	lr
 1130              		.cfi_endproc
 1131              	.LFE40:
 1133              		.align	2
 1134              		.global	SetEPRxCount
 1136              	SetEPRxCount:
 1137              	.LFB41:
 535:usblibrary/src/usb_regs.c **** 
 536:usblibrary/src/usb_regs.c **** /*******************************************************************************
 537:usblibrary/src/usb_regs.c **** * Function Name  : SetEPCountRxReg.
 538:usblibrary/src/usb_regs.c **** * Description    : Set the Count Rx Register value.
 539:usblibrary/src/usb_regs.c **** * Input          : *pdwReg: point to the register.
 540:usblibrary/src/usb_regs.c **** *                  wCount: the new register value.
 541:usblibrary/src/usb_regs.c **** * Output         : None.
 542:usblibrary/src/usb_regs.c **** * Return         : None.
 543:usblibrary/src/usb_regs.c **** *******************************************************************************/
 544:usblibrary/src/usb_regs.c **** #ifdef STR7xx
 545:usblibrary/src/usb_regs.c **** void SetEPCountRxReg(u32 *pdwReg, u16 wCount)
 546:usblibrary/src/usb_regs.c **** {
 547:usblibrary/src/usb_regs.c ****   _SetEPCountRxReg(dwReg, wCount);
 548:usblibrary/src/usb_regs.c **** }
 549:usblibrary/src/usb_regs.c **** #endif
 550:usblibrary/src/usb_regs.c **** 
 551:usblibrary/src/usb_regs.c **** /*******************************************************************************
 552:usblibrary/src/usb_regs.c **** * Function Name  : SetEPRxCount.
 553:usblibrary/src/usb_regs.c **** * Description    : Set the Rx count.
 554:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 555:usblibrary/src/usb_regs.c **** *                  wCount: the new count value.
 556:usblibrary/src/usb_regs.c **** * Output         : None.
 557:usblibrary/src/usb_regs.c **** * Return         : None.
 558:usblibrary/src/usb_regs.c **** *******************************************************************************/
 559:usblibrary/src/usb_regs.c **** void SetEPRxCount(u8 bEpNum, u16 wCount)
 560:usblibrary/src/usb_regs.c **** {
 1138              		.loc 1 560 0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 0
 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 1142              		@ link register save eliminated.
 1143              	.LVL76:
 1144              	.LBB12:
 561:usblibrary/src/usb_regs.c ****   _SetEPRxCount(bEpNum, wCount);
 1145              		.loc 1 561 0
 1146 054c 0632A0E3 		mov	r3, #1610612736
 1147 0550 50C893E5 		ldr	ip, [r3, #2128]
 1148              	.LBE12:
 560:usblibrary/src/usb_regs.c **** {
 1149              		.loc 1 560 0
 1150 0554 30002DE9 		stmfd	sp!, {r4, r5}
 1151              	.LCFI1:
 1152              		.cfi_def_cfa_offset 8
 1153              	.LBB13:
 1154              		.loc 1 561 0
 1155 0558 0C58A0E1 		mov	r5, ip, asl #16
 1156              		.cfi_offset 5, -4
 1157              		.cfi_offset 4, -8
 1158 055c 25C8A0E1 		mov	ip, r5, lsr #16
 1159 0560 502893E5 		ldr	r2, [r3, #2128]
 1160 0564 46C28CE2 		add	ip, ip, #1610612740
 1161 0568 80519CE7 		ldr	r5, [ip, r0, asl #3]
 1162 056c 0228A0E1 		mov	r2, r2, asl #16
 1163 0570 0251C5E3 		bic	r5, r5, #-2147483648
 1164 0574 2228A0E1 		mov	r2, r2, lsr #16
 1165 0578 80518CE7 		str	r5, [ip, r0, asl #3]
 1166 057c 462282E2 		add	r2, r2, #1610612740
 1167 0580 50C893E5 		ldr	ip, [r3, #2128]
 1168 0584 805192E7 		ldr	r5, [r2, r0, asl #3]
 1169 0588 3F0051E3 		cmp	r1, #63
 1170 058c 0040A093 		movls	r4, #0
 1171 0590 0241A083 		movhi	r4, #-2147483648
 1172 0594 0CC8A0E1 		mov	ip, ip, asl #16
 1173 0598 044085E1 		orr	r4, r5, r4
 1174 059c 2CC8A0E1 		mov	ip, ip, lsr #16
 1175 05a0 804182E7 		str	r4, [r2, r0, asl #3]
 1176 05a4 46C28CE2 		add	ip, ip, #1610612740
 1177 05a8 502893E5 		ldr	r2, [r3, #2128]
 1178 05ac 80419CE7 		ldr	r4, [ip, r0, asl #3]
 1179 05b0 0228A0E1 		mov	r2, r2, asl #16
 1180 05b4 1F43C4E3 		bic	r4, r4, #2080374784
 1181 05b8 2228A0E1 		mov	r2, r2, lsr #16
 1182 05bc 80418CE7 		str	r4, [ip, r0, asl #3]
 1183 05c0 462282E2 		add	r2, r2, #1610612740
 1184 05c4 503893E5 		ldr	r3, [r3, #2128]
 1185 05c8 80C192E7 		ldr	ip, [r2, r0, asl #3]
 1186 05cc A110A091 		movls	r1, r1, lsr #1
 1187              	.LVL77:
 1188 05d0 2113A081 		movhi	r1, r1, lsr #6
 1189              	.LVL78:
 1190 05d4 0338A0E1 		mov	r3, r3, asl #16
 1191 05d8 011D8CE1 		orr	r1, ip, r1, asl #26
 1192              	.LVL79:
 1193 05dc 2338A0E1 		mov	r3, r3, lsr #16
 1194 05e0 801182E7 		str	r1, [r2, r0, asl #3]
 1195 05e4 463283E2 		add	r3, r3, #1610612740
 1196 05e8 80C193E7 		ldr	ip, [r3, r0, asl #3]
 1197 05ec FF17CCE3 		bic	r1, ip, #66846720
 1198 05f0 0328C1E3 		bic	r2, r1, #196608
 1199 05f4 802183E7 		str	r2, [r3, r0, asl #3]
 1200              	.LBE13:
 562:usblibrary/src/usb_regs.c **** }
 1201              		.loc 1 562 0
 1202 05f8 3000BDE8 		ldmfd	sp!, {r4, r5}
 1203 05fc 1EFF2FE1 		bx	lr
 1204              		.cfi_endproc
 1205              	.LFE41:
 1207              		.align	2
 1208              		.global	GetEPTxCount
 1210              	GetEPTxCount:
 1211              	.LFB42:
 563:usblibrary/src/usb_regs.c **** 
 564:usblibrary/src/usb_regs.c **** /*******************************************************************************
 565:usblibrary/src/usb_regs.c **** * Function Name  : GetEPTxCount.
 566:usblibrary/src/usb_regs.c **** * Description    : Get the Tx count.
 567:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 568:usblibrary/src/usb_regs.c **** * Output         : None.
 569:usblibrary/src/usb_regs.c **** * Return         : Tx count value.
 570:usblibrary/src/usb_regs.c **** *******************************************************************************/
 571:usblibrary/src/usb_regs.c **** u16 GetEPTxCount(u8 bEpNum)
 572:usblibrary/src/usb_regs.c **** {
 1212              		.loc 1 572 0
 1213              		.cfi_startproc
 1214              		@ args = 0, pretend = 0, frame = 0
 1215              		@ frame_needed = 0, uses_anonymous_args = 0
 1216              		@ link register save eliminated.
 1217              	.LVL80:
 573:usblibrary/src/usb_regs.c ****   return(_GetEPTxCount(bEpNum));
 1218              		.loc 1 573 0
 1219 0600 0632A0E3 		mov	r3, #1610612736
 1220 0604 501893E5 		ldr	r1, [r3, #2128]
 1221 0608 8001A0E1 		mov	r0, r0, asl #3
 1222              	.LVL81:
 1223 060c 01C8A0E1 		mov	ip, r1, asl #16
 1224 0610 2C2880E0 		add	r2, r0, ip, lsr #16
 1225 0614 463282E2 		add	r3, r2, #1610612740
 1226 0618 001093E5 		ldr	r1, [r3, #0]
 1227 061c 010BA0E1 		mov	r0, r1, asl #22
 574:usblibrary/src/usb_regs.c **** }
 1228              		.loc 1 574 0
 1229 0620 200BA0E1 		mov	r0, r0, lsr #22
 1230 0624 1EFF2FE1 		bx	lr
 1231              		.cfi_endproc
 1232              	.LFE42:
 1234              		.align	2
 1235              		.global	GetEPRxCount
 1237              	GetEPRxCount:
 1238              	.LFB43:
 575:usblibrary/src/usb_regs.c **** 
 576:usblibrary/src/usb_regs.c **** /*******************************************************************************
 577:usblibrary/src/usb_regs.c **** * Function Name  : GetEPRxCount.
 578:usblibrary/src/usb_regs.c **** * Description    : Get the Rx count.
 579:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 580:usblibrary/src/usb_regs.c **** * Output         : None.
 581:usblibrary/src/usb_regs.c **** * Return         : Rx count value.
 582:usblibrary/src/usb_regs.c **** *******************************************************************************/
 583:usblibrary/src/usb_regs.c **** u16 GetEPRxCount(u8 bEpNum)
 584:usblibrary/src/usb_regs.c **** {
 1239              		.loc 1 584 0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 0
 1242              		@ frame_needed = 0, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 1244              	.LVL82:
 585:usblibrary/src/usb_regs.c ****   return(_GetEPRxCount(bEpNum));
 1245              		.loc 1 585 0
 1246 0628 0632A0E3 		mov	r3, #1610612736
 1247 062c 501893E5 		ldr	r1, [r3, #2128]
 1248 0630 8001A0E1 		mov	r0, r0, asl #3
 1249              	.LVL83:
 1250 0634 01C8A0E1 		mov	ip, r1, asl #16
 1251 0638 2C2880E0 		add	r2, r0, ip, lsr #16
 1252 063c 463282E2 		add	r3, r2, #1610612740
 1253 0640 B210D3E1 		ldrh	r1, [r3, #2]
 586:usblibrary/src/usb_regs.c **** }
 1254              		.loc 1 586 0
 1255 0644 010BA0E1 		mov	r0, r1, asl #22
 1256 0648 200BA0E1 		mov	r0, r0, lsr #22
 1257 064c 1EFF2FE1 		bx	lr
 1258              		.cfi_endproc
 1259              	.LFE43:
 1261              		.align	2
 1262              		.global	SetEPDblBuffAddr
 1264              	SetEPDblBuffAddr:
 1265              	.LFB44:
 587:usblibrary/src/usb_regs.c **** 
 588:usblibrary/src/usb_regs.c **** /*******************************************************************************
 589:usblibrary/src/usb_regs.c **** * Function Name  : SetEPDblBuffAddr.
 590:usblibrary/src/usb_regs.c **** * Description    : Set the addresses of the buffer 0 and 1.
 591:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 592:usblibrary/src/usb_regs.c **** *                  wBuf0Addr: new address of buffer 0.
 593:usblibrary/src/usb_regs.c **** *                  wBuf1Addr: new address of buffer 1.
 594:usblibrary/src/usb_regs.c **** * Output         : None.
 595:usblibrary/src/usb_regs.c **** * Return         : None.
 596:usblibrary/src/usb_regs.c **** *******************************************************************************/
 597:usblibrary/src/usb_regs.c **** void SetEPDblBuffAddr(u8 bEpNum, u16 wBuf0Addr, u16 wBuf1Addr)
 598:usblibrary/src/usb_regs.c **** {
 1266              		.loc 1 598 0
 1267              		.cfi_startproc
 1268              		@ args = 0, pretend = 0, frame = 0
 1269              		@ frame_needed = 0, uses_anonymous_args = 0
 1270              		@ link register save eliminated.
 1271              	.LVL84:
 599:usblibrary/src/usb_regs.c ****   _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
 1272              		.loc 1 599 0
 1273 0650 0632A0E3 		mov	r3, #1610612736
 598:usblibrary/src/usb_regs.c **** {
 1274              		.loc 1 598 0
 1275 0654 70002DE9 		stmfd	sp!, {r4, r5, r6}
 1276              	.LCFI2:
 1277              		.cfi_def_cfa_offset 12
 1278              		.loc 1 599 0
 1279 0658 505893E5 		ldr	r5, [r3, #2128]
 1280              		.cfi_offset 6, -4
 1281              		.cfi_offset 5, -8
 1282              		.cfi_offset 4, -12
 1283 065c 50C893E5 		ldr	ip, [r3, #2128]
 1284 0660 0548A0E1 		mov	r4, r5, asl #16
 1285 0664 2468A0E1 		mov	r6, r4, lsr #16
 1286 0668 036086E0 		add	r6, r6, r3
 1287 066c 805196E7 		ldr	r5, [r6, r0, asl #3]
 1288 0670 0CC8A0E1 		mov	ip, ip, asl #16
 1289 0674 2548A0E1 		mov	r4, r5, lsr #16
 1290 0678 0458A0E1 		mov	r5, r4, asl #16
 1291 067c 2C48A0E1 		mov	r4, ip, lsr #16
 1292 0680 805186E7 		str	r5, [r6, r0, asl #3]
 1293 0684 034084E0 		add	r4, r4, r3
 1294 0688 506893E5 		ldr	r6, [r3, #2128]
 1295 068c 4CC09FE5 		ldr	ip, .L95
 1296 0690 805194E7 		ldr	r5, [r4, r0, asl #3]
 1297 0694 0CC001E0 		and	ip, r1, ip
 1298 0698 0618A0E1 		mov	r1, r6, asl #16
 1299              	.LVL85:
 1300 069c 503893E5 		ldr	r3, [r3, #2128]
 1301 06a0 0CC085E1 		orr	ip, r5, ip
 1302 06a4 2168A0E1 		mov	r6, r1, lsr #16
 1303 06a8 80C184E7 		str	ip, [r4, r0, asl #3]
 1304 06ac 066286E2 		add	r6, r6, #1610612736
 1305 06b0 8011A0E1 		mov	r1, r0, asl #3
 1306 06b4 B61091E1 		ldrh	r1, [r1, r6]
 1307 06b8 03C8A0E1 		mov	ip, r3, asl #16
 1308 06bc 2C38A0E1 		mov	r3, ip, lsr #16
 1309 06c0 801186E7 		str	r1, [r6, r0, asl #3]
 1310 06c4 063283E2 		add	r3, r3, #1610612736
 1311 06c8 80C193E7 		ldr	ip, [r3, r0, asl #3]
 1312 06cc 2221A0E1 		mov	r2, r2, lsr #2
 1313              	.LVL86:
 1314 06d0 02198CE1 		orr	r1, ip, r2, asl #18
 1315 06d4 801183E7 		str	r1, [r3, r0, asl #3]
 600:usblibrary/src/usb_regs.c **** }
 1316              		.loc 1 600 0
 1317 06d8 7000BDE8 		ldmfd	sp!, {r4, r5, r6}
 1318 06dc 1EFF2FE1 		bx	lr
 1319              	.L96:
 1320              		.align	2
 1321              	.L95:
 1322 06e0 FCFF0000 		.word	65532
 1323              		.cfi_endproc
 1324              	.LFE44:
 1326              		.align	2
 1327              		.global	SetEPDblBuf0Addr
 1329              	SetEPDblBuf0Addr:
 1330              	.LFB45:
 601:usblibrary/src/usb_regs.c **** 
 602:usblibrary/src/usb_regs.c **** /*******************************************************************************
 603:usblibrary/src/usb_regs.c **** * Function Name  : SetEPDblBuf0Addr.
 604:usblibrary/src/usb_regs.c **** * Description    : Set the Buffer 1 address.
 605:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 606:usblibrary/src/usb_regs.c **** *                  wBuf0Addr: new address.
 607:usblibrary/src/usb_regs.c **** * Output         : None.
 608:usblibrary/src/usb_regs.c **** * Return         : None.
 609:usblibrary/src/usb_regs.c **** *******************************************************************************/
 610:usblibrary/src/usb_regs.c **** void SetEPDblBuf0Addr(u8 bEpNum, u16 wBuf0Addr)
 611:usblibrary/src/usb_regs.c **** {
 1331              		.loc 1 611 0
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
 1335              		@ link register save eliminated.
 1336              	.LVL87:
 612:usblibrary/src/usb_regs.c ****   _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
 1337              		.loc 1 612 0
 1338 06e4 0632A0E3 		mov	r3, #1610612736
 1339 06e8 502893E5 		ldr	r2, [r3, #2128]
 611:usblibrary/src/usb_regs.c **** {
 1340              		.loc 1 611 0
 1341 06ec 04402DE5 		str	r4, [sp, #-4]!
 1342              	.LCFI3:
 1343              		.cfi_def_cfa_offset 4
 1344              		.loc 1 612 0
 1345 06f0 02C8A0E1 		mov	ip, r2, asl #16
 1346 06f4 2C48A0E1 		mov	r4, ip, lsr #16
 1347              		.cfi_offset 4, -4
 1348 06f8 03C084E0 		add	ip, r4, r3
 1349 06fc 80419CE7 		ldr	r4, [ip, r0, asl #3]
 1350 0700 502893E5 		ldr	r2, [r3, #2128]
 1351 0704 2438A0E1 		mov	r3, r4, lsr #16
 1352 0708 0228A0E1 		mov	r2, r2, asl #16
 1353 070c 0338A0E1 		mov	r3, r3, asl #16
 1354 0710 2228A0E1 		mov	r2, r2, lsr #16
 1355 0714 80318CE7 		str	r3, [ip, r0, asl #3]
 1356 0718 062282E2 		add	r2, r2, #1610612736
 1357 071c 14309FE5 		ldr	r3, .L98
 1358 0720 80C192E7 		ldr	ip, [r2, r0, asl #3]
 1359 0724 031001E0 		and	r1, r1, r3
 1360              	.LVL88:
 1361 0728 01308CE1 		orr	r3, ip, r1
 1362 072c 803182E7 		str	r3, [r2, r0, asl #3]
 613:usblibrary/src/usb_regs.c **** }
 1363              		.loc 1 613 0
 1364 0730 04409DE4 		ldmfd	sp!, {r4}
 1365 0734 1EFF2FE1 		bx	lr
 1366              	.L99:
 1367              		.align	2
 1368              	.L98:
 1369 0738 FCFF0000 		.word	65532
 1370              		.cfi_endproc
 1371              	.LFE45:
 1373              		.align	2
 1374              		.global	SetEPDblBuf1Addr
 1376              	SetEPDblBuf1Addr:
 1377              	.LFB46:
 614:usblibrary/src/usb_regs.c **** 
 615:usblibrary/src/usb_regs.c **** /*******************************************************************************
 616:usblibrary/src/usb_regs.c **** * Function Name  : SetEPDblBuf1Addr.
 617:usblibrary/src/usb_regs.c **** * Description    : Set the Buffer 1 address.
 618:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 619:usblibrary/src/usb_regs.c **** *                  wBuf1Addr: new address.
 620:usblibrary/src/usb_regs.c **** * Output         : None.
 621:usblibrary/src/usb_regs.c **** * Return         : None.
 622:usblibrary/src/usb_regs.c **** *******************************************************************************/
 623:usblibrary/src/usb_regs.c **** void SetEPDblBuf1Addr(u8 bEpNum, u16 wBuf1Addr)
 624:usblibrary/src/usb_regs.c **** {
 1378              		.loc 1 624 0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 0
 1381              		@ frame_needed = 0, uses_anonymous_args = 0
 1382              		@ link register save eliminated.
 1383              	.LVL89:
 625:usblibrary/src/usb_regs.c ****   _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
 1384              		.loc 1 625 0
 1385 073c 0632A0E3 		mov	r3, #1610612736
 1386 0740 502893E5 		ldr	r2, [r3, #2128]
 1387 0744 503893E5 		ldr	r3, [r3, #2128]
 1388 0748 02C8A0E1 		mov	ip, r2, asl #16
 1389 074c 2C28A0E1 		mov	r2, ip, lsr #16
 1390 0750 062282E2 		add	r2, r2, #1610612736
 1391 0754 80C1A0E1 		mov	ip, r0, asl #3
 1392 0758 B2C09CE1 		ldrh	ip, [ip, r2]
 1393 075c 0338A0E1 		mov	r3, r3, asl #16
 1394 0760 2338A0E1 		mov	r3, r3, lsr #16
 1395 0764 80C182E7 		str	ip, [r2, r0, asl #3]
 1396 0768 063283E2 		add	r3, r3, #1610612736
 1397 076c 80C193E7 		ldr	ip, [r3, r0, asl #3]
 1398 0770 2111A0E1 		mov	r1, r1, lsr #2
 1399              	.LVL90:
 1400 0774 01298CE1 		orr	r2, ip, r1, asl #18
 1401 0778 802183E7 		str	r2, [r3, r0, asl #3]
 626:usblibrary/src/usb_regs.c **** }
 1402              		.loc 1 626 0
 1403 077c 1EFF2FE1 		bx	lr
 1404              		.cfi_endproc
 1405              	.LFE46:
 1407              		.align	2
 1408              		.global	GetEPDblBuf0Addr
 1410              	GetEPDblBuf0Addr:
 1411              	.LFB47:
 627:usblibrary/src/usb_regs.c **** 
 628:usblibrary/src/usb_regs.c **** /*******************************************************************************
 629:usblibrary/src/usb_regs.c **** * Function Name  : GetEPDblBuf0Addr.
 630:usblibrary/src/usb_regs.c **** * Description    : Returns the address of the Buffer 0.
 631:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 632:usblibrary/src/usb_regs.c **** * Output         : None.
 633:usblibrary/src/usb_regs.c **** * Return         : None.
 634:usblibrary/src/usb_regs.c **** *******************************************************************************/
 635:usblibrary/src/usb_regs.c **** u16 GetEPDblBuf0Addr(u8 bEpNum)
 636:usblibrary/src/usb_regs.c **** {
 1412              		.loc 1 636 0
 1413              		.cfi_startproc
 1414              		@ args = 0, pretend = 0, frame = 0
 1415              		@ frame_needed = 0, uses_anonymous_args = 0
 1416              		@ link register save eliminated.
 1417              	.LVL91:
 637:usblibrary/src/usb_regs.c ****   return(_GetEPDblBuf0Addr(bEpNum));
 1418              		.loc 1 637 0
 1419 0780 0632A0E3 		mov	r3, #1610612736
 1420 0784 50C893E5 		ldr	ip, [r3, #2128]
 1421 0788 8021A0E1 		mov	r2, r0, asl #3
 1422 078c 0C18A0E1 		mov	r1, ip, asl #16
 1423 0790 210882E0 		add	r0, r2, r1, lsr #16
 1424              	.LVL92:
 1425 0794 063280E2 		add	r3, r0, #1610612736
 638:usblibrary/src/usb_regs.c **** }
 1426              		.loc 1 638 0
 1427 0798 B000D3E1 		ldrh	r0, [r3, #0]
 1428 079c 1EFF2FE1 		bx	lr
 1429              		.cfi_endproc
 1430              	.LFE47:
 1432              		.align	2
 1433              		.global	GetEPDblBuf1Addr
 1435              	GetEPDblBuf1Addr:
 1436              	.LFB48:
 639:usblibrary/src/usb_regs.c **** 
 640:usblibrary/src/usb_regs.c **** /*******************************************************************************
 641:usblibrary/src/usb_regs.c **** * Function Name  : GetEPDblBuf1Addr
 642:usblibrary/src/usb_regs.c **** * Description    : Returns the address of the Buffer 1.
 643:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 644:usblibrary/src/usb_regs.c **** * Output         : None.
 645:usblibrary/src/usb_regs.c **** * Return         : Address of the Buffer 1.
 646:usblibrary/src/usb_regs.c **** *******************************************************************************/
 647:usblibrary/src/usb_regs.c **** u16 GetEPDblBuf1Addr(u8 bEpNum)
 648:usblibrary/src/usb_regs.c **** {
 1437              		.loc 1 648 0
 1438              		.cfi_startproc
 1439              		@ args = 0, pretend = 0, frame = 0
 1440              		@ frame_needed = 0, uses_anonymous_args = 0
 1441              		@ link register save eliminated.
 1442              	.LVL93:
 649:usblibrary/src/usb_regs.c ****   return(_GetEPDblBuf1Addr(bEpNum));
 1443              		.loc 1 649 0
 1444 07a0 0632A0E3 		mov	r3, #1610612736
 1445 07a4 50C893E5 		ldr	ip, [r3, #2128]
 1446 07a8 8021A0E1 		mov	r2, r0, asl #3
 1447 07ac 0C18A0E1 		mov	r1, ip, asl #16
 1448 07b0 210882E0 		add	r0, r2, r1, lsr #16
 1449              	.LVL94:
 1450 07b4 063280E2 		add	r3, r0, #1610612736
 650:usblibrary/src/usb_regs.c **** }
 1451              		.loc 1 650 0
 1452 07b8 B200D3E1 		ldrh	r0, [r3, #2]
 1453 07bc 1EFF2FE1 		bx	lr
 1454              		.cfi_endproc
 1455              	.LFE48:
 1457              		.align	2
 1458              		.global	SetEPDblBuf0Count
 1460              	SetEPDblBuf0Count:
 1461              	.LFB50:
 651:usblibrary/src/usb_regs.c **** 
 652:usblibrary/src/usb_regs.c **** /*******************************************************************************
 653:usblibrary/src/usb_regs.c **** * Function Name  : SetEPDblBuffCount.
 654:usblibrary/src/usb_regs.c **** * Description    : Set the number of bytes for a double Buffer endpoint.
 655:usblibrary/src/usb_regs.c **** * Input          : bEpNum,bDir, wCount.
 656:usblibrary/src/usb_regs.c **** * Output         : None.
 657:usblibrary/src/usb_regs.c **** * Return         : None.
 658:usblibrary/src/usb_regs.c **** *******************************************************************************/
 659:usblibrary/src/usb_regs.c **** void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
 660:usblibrary/src/usb_regs.c **** {
 661:usblibrary/src/usb_regs.c **** #ifdef STR7xx /*STR7xx family */
 662:usblibrary/src/usb_regs.c ****   _SetEPDblBuffCount(bEpNum, bDir, wCount);
 663:usblibrary/src/usb_regs.c **** #endif
 664:usblibrary/src/usb_regs.c **** 
 665:usblibrary/src/usb_regs.c **** #ifdef STR91x /*STR91x family*/
 666:usblibrary/src/usb_regs.c ****   SetEPDblBuf0Count(bEpNum, bDir, wCount);
 667:usblibrary/src/usb_regs.c ****   SetEPDblBuf1Count(bEpNum, bDir, wCount);
 668:usblibrary/src/usb_regs.c **** #endif
 669:usblibrary/src/usb_regs.c **** }
 670:usblibrary/src/usb_regs.c **** 
 671:usblibrary/src/usb_regs.c **** /*******************************************************************************
 672:usblibrary/src/usb_regs.c **** * Function Name  : SetEPDblBuf0Count.
 673:usblibrary/src/usb_regs.c **** * Description    : Set the number of bytes in the buffer 0 of a double Buffer
 674:usblibrary/src/usb_regs.c **** *                  endpoint.
 675:usblibrary/src/usb_regs.c **** * Input          : bEpNum, bDir,  wCount.
 676:usblibrary/src/usb_regs.c **** * Output         : None.
 677:usblibrary/src/usb_regs.c **** * Return         : None.
 678:usblibrary/src/usb_regs.c **** *******************************************************************************/
 679:usblibrary/src/usb_regs.c **** void SetEPDblBuf0Count(u8 bEpNum, u8 bDir, u16 wCount)
 680:usblibrary/src/usb_regs.c **** {
 1462              		.loc 1 680 0
 1463              		.cfi_startproc
 1464              		@ args = 0, pretend = 0, frame = 0
 1465              		@ frame_needed = 0, uses_anonymous_args = 0
 1466              		@ link register save eliminated.
 1467              	.LVL95:
 681:usblibrary/src/usb_regs.c **** #ifdef STR7xx /*STR7xx family */
 682:usblibrary/src/usb_regs.c ****   _SetEPDblBuf0Count(bEpNum, bDir, wCount);
 683:usblibrary/src/usb_regs.c **** #endif
 684:usblibrary/src/usb_regs.c **** 
 685:usblibrary/src/usb_regs.c **** #ifdef STR91x /*STR91x family*/
 686:usblibrary/src/usb_regs.c ****   u32 BLsize = 0;
 687:usblibrary/src/usb_regs.c ****   u32 Blocks;
 688:usblibrary/src/usb_regs.c ****   if (bDir == EP_DBUF_IN)
 1468              		.loc 1 688 0
 1469 07c0 020051E3 		cmp	r1, #2
 680:usblibrary/src/usb_regs.c **** {
 1470              		.loc 1 680 0
 1471 07c4 70002DE9 		stmfd	sp!, {r4, r5, r6}
 1472              	.LCFI4:
 1473              		.cfi_def_cfa_offset 12
 680:usblibrary/src/usb_regs.c **** {
 1474              		.loc 1 680 0
 1475 07c8 0030A0E1 		mov	r3, r0
 1476              		.loc 1 688 0
 1477 07cc 2D00000A 		beq	.L108
 1478              		.cfi_offset 6, -4
 1479              		.cfi_offset 5, -8
 1480              		.cfi_offset 4, -12
 689:usblibrary/src/usb_regs.c ****   {
 690:usblibrary/src/usb_regs.c ****     /* IN double bufferd endpoint */
 691:usblibrary/src/usb_regs.c ****     SetEPTxCount(bEpNum, wCount);
 692:usblibrary/src/usb_regs.c ****   }
 693:usblibrary/src/usb_regs.c ****   else if (bDir == EP_DBUF_OUT)
 1481              		.loc 1 693 0
 1482 07d0 010051E3 		cmp	r1, #1
 1483 07d4 2900001A 		bne	.L103
 694:usblibrary/src/usb_regs.c ****   {
 695:usblibrary/src/usb_regs.c ****     /* OUT double bufferd endpoint */
 696:usblibrary/src/usb_regs.c **** 
 697:usblibrary/src/usb_regs.c ****     if (wCount < 64)
 698:usblibrary/src/usb_regs.c ****     {
 699:usblibrary/src/usb_regs.c ****       Blocks = wCount >> 1;
 700:usblibrary/src/usb_regs.c ****     }
 701:usblibrary/src/usb_regs.c ****     else
 702:usblibrary/src/usb_regs.c ****     {
 703:usblibrary/src/usb_regs.c ****       BLsize = 0x8000;
 704:usblibrary/src/usb_regs.c ****       Blocks = wCount >> 6;
 705:usblibrary/src/usb_regs.c ****     }
 706:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) &= ~0x8000;
 1484              		.loc 1 706 0
 1485 07d8 0612A0E3 		mov	r1, #1610612736
 1486              	.LVL96:
 1487 07dc 504891E5 		ldr	r4, [r1, #2128]
 697:usblibrary/src/usb_regs.c ****     if (wCount < 64)
 1488              		.loc 1 697 0
 1489 07e0 3F0052E3 		cmp	r2, #63
 1490              		.loc 1 706 0
 1491 07e4 04C8A0E1 		mov	ip, r4, asl #16
 699:usblibrary/src/usb_regs.c ****       Blocks = wCount >> 1;
 1492              		.loc 1 699 0
 1493 07e8 A250A091 		movls	r5, r2, lsr #1
 1494              	.LVL97:
 704:usblibrary/src/usb_regs.c ****       Blocks = wCount >> 6;
 1495              		.loc 1 704 0
 1496 07ec 2253A081 		movhi	r5, r2, lsr #6
 1497              	.LVL98:
 1498              		.loc 1 706 0
 1499 07f0 2C28A0E1 		mov	r2, ip, lsr #16
 1500              	.LVL99:
 707:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) |= BLsize;
 1501              		.loc 1 707 0
 1502 07f4 500891E5 		ldr	r0, [r1, #2128]
 1503              	.LVL100:
 706:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) &= ~0x8000;
 1504              		.loc 1 706 0
 1505 07f8 462282E2 		add	r2, r2, #1610612740
 1506 07fc 834192E7 		ldr	r4, [r2, r3, asl #3]
 1507              		.loc 1 707 0
 1508 0800 00C8A0E1 		mov	ip, r0, asl #16
 1509 0804 2C08A0E1 		mov	r0, ip, lsr #16
 706:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) &= ~0x8000;
 1510              		.loc 1 706 0
 1511 0808 0249C4E3 		bic	r4, r4, #32768
 1512 080c 834182E7 		str	r4, [r2, r3, asl #3]
 708:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) &= ~0x7C00;
 1513              		.loc 1 708 0
 1514 0810 50C891E5 		ldr	ip, [r1, #2128]
 707:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) |= BLsize;
 1515              		.loc 1 707 0
 1516 0814 464280E2 		add	r4, r0, #1610612740
 1517 0818 832194E7 		ldr	r2, [r4, r3, asl #3]
 1518              		.loc 1 708 0
 1519 081c 0C08A0E1 		mov	r0, ip, asl #16
 686:usblibrary/src/usb_regs.c ****   u32 BLsize = 0;
 1520              		.loc 1 686 0
 1521 0820 0060A093 		movls	r6, #0
 1522              	.LVL101:
 703:usblibrary/src/usb_regs.c ****       BLsize = 0x8000;
 1523              		.loc 1 703 0
 1524 0824 0269A083 		movhi	r6, #32768
 1525              	.LVL102:
 707:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) |= BLsize;
 1526              		.loc 1 707 0
 1527 0828 062082E1 		orr	r2, r2, r6
 1528              		.loc 1 708 0
 1529 082c 20C8A0E1 		mov	ip, r0, lsr #16
 707:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) |= BLsize;
 1530              		.loc 1 707 0
 1531 0830 832184E7 		str	r2, [r4, r3, asl #3]
 709:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) |= Blocks << 10;
 1532              		.loc 1 709 0
 1533 0834 500891E5 		ldr	r0, [r1, #2128]
 708:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) &= ~0x7C00;
 1534              		.loc 1 708 0
 1535 0838 46C28CE2 		add	ip, ip, #1610612740
 1536 083c 83419CE7 		ldr	r4, [ip, r3, asl #3]
 1537              		.loc 1 709 0
 1538 0840 0028A0E1 		mov	r2, r0, asl #16
 1539 0844 2208A0E1 		mov	r0, r2, lsr #16
 708:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) &= ~0x7C00;
 1540              		.loc 1 708 0
 1541 0848 1F4BC4E3 		bic	r4, r4, #31744
 1542 084c 83418CE7 		str	r4, [ip, r3, asl #3]
 710:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) &= 0xFFFFFC00;
 1543              		.loc 1 710 0
 1544 0850 502891E5 		ldr	r2, [r1, #2128]
 709:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) |= Blocks << 10;
 1545              		.loc 1 709 0
 1546 0854 460280E2 		add	r0, r0, #1610612740
 1547 0858 831190E7 		ldr	r1, [r0, r3, asl #3]
 1548              		.loc 1 710 0
 1549 085c 02C8A0E1 		mov	ip, r2, asl #16
 709:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) |= Blocks << 10;
 1550              		.loc 1 709 0
 1551 0860 051581E1 		orr	r1, r1, r5, asl #10
 1552              		.loc 1 710 0
 1553 0864 2C28A0E1 		mov	r2, ip, lsr #16
 709:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) |= Blocks << 10;
 1554              		.loc 1 709 0
 1555 0868 831180E7 		str	r1, [r0, r3, asl #3]
 1556              		.loc 1 710 0
 1557 086c 462282E2 		add	r2, r2, #1610612740
 1558 0870 83C192E7 		ldr	ip, [r2, r3, asl #3]
 1559 0874 FF0FCCE3 		bic	r0, ip, #1020
 1560 0878 0310C0E3 		bic	r1, r0, #3
 1561 087c 831182E7 		str	r1, [r2, r3, asl #3]
 1562              	.LVL103:
 1563              	.L103:
 711:usblibrary/src/usb_regs.c ****   }
 712:usblibrary/src/usb_regs.c **** #endif
 713:usblibrary/src/usb_regs.c **** }
 1564              		.loc 1 713 0
 1565 0880 7000BDE8 		ldmfd	sp!, {r4, r5, r6}
 1566 0884 1EFF2FE1 		bx	lr
 1567              	.LVL104:
 1568              	.L108:
 691:usblibrary/src/usb_regs.c ****     SetEPTxCount(bEpNum, wCount);
 1569              		.loc 1 691 0
 1570 0888 0210A0E1 		mov	r1, r2
 1571              	.LVL105:
 1572              		.loc 1 713 0
 1573 088c 7000BDE8 		ldmfd	sp!, {r4, r5, r6}
 691:usblibrary/src/usb_regs.c ****     SetEPTxCount(bEpNum, wCount);
 1574              		.loc 1 691 0
 1575 0890 FEFFFFEA 		b	SetEPTxCount
 1576              		.cfi_endproc
 1577              	.LFE50:
 1579              		.align	2
 1580              		.global	SetEPDblBuf1Count
 1582              	SetEPDblBuf1Count:
 1583              	.LFB51:
 714:usblibrary/src/usb_regs.c **** 
 715:usblibrary/src/usb_regs.c **** /*******************************************************************************
 716:usblibrary/src/usb_regs.c **** * Function Name  : SetEPDblBuf1Count.
 717:usblibrary/src/usb_regs.c **** * Description    : Set the number of bytes in the buffer 0 of a double Buffer
 718:usblibrary/src/usb_regs.c **** *                  endpoint.
 719:usblibrary/src/usb_regs.c **** * Input          : bEpNum,  bDir,  wCount.
 720:usblibrary/src/usb_regs.c **** * Output         : None.
 721:usblibrary/src/usb_regs.c **** * Return         : None.
 722:usblibrary/src/usb_regs.c **** *******************************************************************************/
 723:usblibrary/src/usb_regs.c **** void SetEPDblBuf1Count(u8 bEpNum, u8 bDir, u16 wCount)
 724:usblibrary/src/usb_regs.c **** {
 1584              		.loc 1 724 0
 1585              		.cfi_startproc
 1586              		@ args = 0, pretend = 0, frame = 0
 1587              		@ frame_needed = 0, uses_anonymous_args = 0
 1588              		@ link register save eliminated.
 1589              	.LVL106:
 725:usblibrary/src/usb_regs.c **** #ifdef STR7xx /*STR7xx family */
 726:usblibrary/src/usb_regs.c ****   _SetEPDblBuf1Count(bEpNum, bDir, wCount);
 727:usblibrary/src/usb_regs.c **** #endif
 728:usblibrary/src/usb_regs.c **** 
 729:usblibrary/src/usb_regs.c **** #ifdef STR91x /*STR91x family*/
 730:usblibrary/src/usb_regs.c ****   if (bDir == EP_DBUF_IN)
 1590              		.loc 1 730 0
 1591 0894 020051E3 		cmp	r1, #2
 724:usblibrary/src/usb_regs.c **** {
 1592              		.loc 1 724 0
 1593 0898 30002DE9 		stmfd	sp!, {r4, r5}
 1594              	.LCFI5:
 1595              		.cfi_def_cfa_offset 8
 1596              		.loc 1 730 0
 1597 089c 2E00000A 		beq	.L114
 1598              		.cfi_offset 5, -4
 1599              		.cfi_offset 4, -8
 731:usblibrary/src/usb_regs.c ****     /* IN double buffered endpoint */
 732:usblibrary/src/usb_regs.c ****   {
 733:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) &= 0x000FFFF;
 734:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) |= (wCount << 16);
 735:usblibrary/src/usb_regs.c ****   }
 736:usblibrary/src/usb_regs.c ****   else if (bDir == EP_DBUF_OUT)
 1600              		.loc 1 736 0
 1601 08a0 010051E3 		cmp	r1, #1
 1602 08a4 0100000A 		beq	.L115
 1603              	.LVL107:
 1604              	.L109:
 737:usblibrary/src/usb_regs.c ****   {
 738:usblibrary/src/usb_regs.c ****     /* OUT double buffered endpoint */
 739:usblibrary/src/usb_regs.c ****     _SetEPRxCount(bEpNum, wCount);
 740:usblibrary/src/usb_regs.c ****   }
 741:usblibrary/src/usb_regs.c **** #endif
 742:usblibrary/src/usb_regs.c **** }
 1605              		.loc 1 742 0
 1606 08a8 3000BDE8 		ldmfd	sp!, {r4, r5}
 1607 08ac 1EFF2FE1 		bx	lr
 1608              	.LVL108:
 1609              	.L115:
 1610              	.LBB14:
 739:usblibrary/src/usb_regs.c ****     _SetEPRxCount(bEpNum, wCount);
 1611              		.loc 1 739 0
 1612 08b0 0632A0E3 		mov	r3, #1610612736
 1613 08b4 50C893E5 		ldr	ip, [r3, #2128]
 1614 08b8 501893E5 		ldr	r1, [r3, #2128]
 1615              	.LVL109:
 1616 08bc 0C58A0E1 		mov	r5, ip, asl #16
 1617 08c0 25C8A0E1 		mov	ip, r5, lsr #16
 1618 08c4 46C28CE2 		add	ip, ip, #1610612740
 1619 08c8 80519CE7 		ldr	r5, [ip, r0, asl #3]
 1620 08cc 0118A0E1 		mov	r1, r1, asl #16
 1621 08d0 0251C5E3 		bic	r5, r5, #-2147483648
 1622 08d4 2118A0E1 		mov	r1, r1, lsr #16
 1623 08d8 80518CE7 		str	r5, [ip, r0, asl #3]
 1624 08dc 461281E2 		add	r1, r1, #1610612740
 1625 08e0 50C893E5 		ldr	ip, [r3, #2128]
 1626 08e4 805191E7 		ldr	r5, [r1, r0, asl #3]
 1627 08e8 3F0052E3 		cmp	r2, #63
 1628 08ec 0040A093 		movls	r4, #0
 1629 08f0 0241A083 		movhi	r4, #-2147483648
 1630 08f4 0CC8A0E1 		mov	ip, ip, asl #16
 1631 08f8 044085E1 		orr	r4, r5, r4
 1632 08fc 2CC8A0E1 		mov	ip, ip, lsr #16
 1633 0900 804181E7 		str	r4, [r1, r0, asl #3]
 1634 0904 46C28CE2 		add	ip, ip, #1610612740
 1635 0908 501893E5 		ldr	r1, [r3, #2128]
 1636 090c 80419CE7 		ldr	r4, [ip, r0, asl #3]
 1637 0910 0118A0E1 		mov	r1, r1, asl #16
 1638 0914 1F43C4E3 		bic	r4, r4, #2080374784
 1639 0918 2118A0E1 		mov	r1, r1, lsr #16
 1640 091c 80418CE7 		str	r4, [ip, r0, asl #3]
 1641 0920 461281E2 		add	r1, r1, #1610612740
 1642 0924 503893E5 		ldr	r3, [r3, #2128]
 1643 0928 80C191E7 		ldr	ip, [r1, r0, asl #3]
 1644 092c 0338A0E1 		mov	r3, r3, asl #16
 1645 0930 A220A091 		movls	r2, r2, lsr #1
 1646              	.LVL110:
 1647 0934 2223A081 		movhi	r2, r2, lsr #6
 1648              	.LVL111:
 1649 0938 022D8CE1 		orr	r2, ip, r2, asl #26
 1650              	.LVL112:
 1651 093c 23C8A0E1 		mov	ip, r3, lsr #16
 1652 0940 802181E7 		str	r2, [r1, r0, asl #3]
 1653 0944 46C28CE2 		add	ip, ip, #1610612740
 1654 0948 80319CE7 		ldr	r3, [ip, r0, asl #3]
 1655 094c FF17C3E3 		bic	r1, r3, #66846720
 1656 0950 0328C1E3 		bic	r2, r1, #196608
 1657 0954 80218CE7 		str	r2, [ip, r0, asl #3]
 1658 0958 D2FFFFEA 		b	.L109
 1659              	.LVL113:
 1660              	.L114:
 1661              	.LBE14:
 733:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) &= 0x000FFFF;
 1662              		.loc 1 733 0
 1663 095c 0632A0E3 		mov	r3, #1610612736
 1664 0960 501893E5 		ldr	r1, [r3, #2128]
 1665              	.LVL114:
 734:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) |= (wCount << 16);
 1666              		.loc 1 734 0
 1667 0964 503893E5 		ldr	r3, [r3, #2128]
 733:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) &= 0x000FFFF;
 1668              		.loc 1 733 0
 1669 0968 01C8A0E1 		mov	ip, r1, asl #16
 1670 096c 2C18A0E1 		mov	r1, ip, lsr #16
 1671 0970 461281E2 		add	r1, r1, #1610612740
 1672 0974 80C1A0E1 		mov	ip, r0, asl #3
 1673 0978 B1C09CE1 		ldrh	ip, [ip, r1]
 734:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) |= (wCount << 16);
 1674              		.loc 1 734 0
 1675 097c 0338A0E1 		mov	r3, r3, asl #16
 1676 0980 2338A0E1 		mov	r3, r3, lsr #16
 733:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) &= 0x000FFFF;
 1677              		.loc 1 733 0
 1678 0984 80C181E7 		str	ip, [r1, r0, asl #3]
 734:usblibrary/src/usb_regs.c ****     *_pEPBufCount(bEpNum) |= (wCount << 16);
 1679              		.loc 1 734 0
 1680 0988 463283E2 		add	r3, r3, #1610612740
 1681 098c 801193E7 		ldr	r1, [r3, r0, asl #3]
 1682 0990 022881E1 		orr	r2, r1, r2, asl #16
 1683              	.LVL115:
 1684 0994 802183E7 		str	r2, [r3, r0, asl #3]
 1685 0998 C2FFFFEA 		b	.L109
 1686              		.cfi_endproc
 1687              	.LFE51:
 1689              		.align	2
 1690              		.global	SetEPDblBuffCount
 1692              	SetEPDblBuffCount:
 1693              	.LFB49:
 660:usblibrary/src/usb_regs.c **** {
 1694              		.loc 1 660 0
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 0
 1697              		@ frame_needed = 0, uses_anonymous_args = 0
 1698              	.LVL116:
 1699 099c 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1700              	.LCFI6:
 1701              		.cfi_def_cfa_offset 16
 660:usblibrary/src/usb_regs.c **** {
 1702              		.loc 1 660 0
 1703 09a0 0060A0E1 		mov	r6, r0
 1704              		.cfi_offset 14, -4
 1705              		.cfi_offset 6, -8
 1706              		.cfi_offset 5, -12
 1707              		.cfi_offset 4, -16
 1708 09a4 0150A0E1 		mov	r5, r1
 1709 09a8 0240A0E1 		mov	r4, r2
 666:usblibrary/src/usb_regs.c ****   SetEPDblBuf0Count(bEpNum, bDir, wCount);
 1710              		.loc 1 666 0
 1711 09ac FEFFFFEB 		bl	SetEPDblBuf0Count
 1712              	.LVL117:
 667:usblibrary/src/usb_regs.c ****   SetEPDblBuf1Count(bEpNum, bDir, wCount);
 1713              		.loc 1 667 0
 1714 09b0 0600A0E1 		mov	r0, r6
 1715 09b4 0510A0E1 		mov	r1, r5
 1716 09b8 0420A0E1 		mov	r2, r4
 669:usblibrary/src/usb_regs.c **** }
 1717              		.loc 1 669 0
 1718 09bc 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 667:usblibrary/src/usb_regs.c ****   SetEPDblBuf1Count(bEpNum, bDir, wCount);
 1719              		.loc 1 667 0
 1720 09c0 FEFFFFEA 		b	SetEPDblBuf1Count
 1721              		.cfi_endproc
 1722              	.LFE49:
 1724              		.align	2
 1725              		.global	GetEPDblBuf0Count
 1727              	GetEPDblBuf0Count:
 1728              	.LFB52:
 743:usblibrary/src/usb_regs.c **** 
 744:usblibrary/src/usb_regs.c **** /*******************************************************************************
 745:usblibrary/src/usb_regs.c **** * Function Name  : GetEPDblBuf0Count.
 746:usblibrary/src/usb_regs.c **** * Description    : Returns the number of byte received in the buffer 0 of a
 747:usblibrary/src/usb_regs.c **** *                  double Buffer endpoint.
 748:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 749:usblibrary/src/usb_regs.c **** * Output         : None.
 750:usblibrary/src/usb_regs.c **** * Return         : Endpoint Buffer 0 count.
 751:usblibrary/src/usb_regs.c **** *******************************************************************************/
 752:usblibrary/src/usb_regs.c **** u16 GetEPDblBuf0Count(u8 bEpNum)
 753:usblibrary/src/usb_regs.c **** {
 1729              		.loc 1 753 0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 0
 1732              		@ frame_needed = 0, uses_anonymous_args = 0
 1733              		@ link register save eliminated.
 1734              	.LVL118:
 754:usblibrary/src/usb_regs.c ****   return(_GetEPDblBuf0Count(bEpNum));
 1735              		.loc 1 754 0
 1736 09c4 0632A0E3 		mov	r3, #1610612736
 1737 09c8 501893E5 		ldr	r1, [r3, #2128]
 1738 09cc 8001A0E1 		mov	r0, r0, asl #3
 1739              	.LVL119:
 1740 09d0 01C8A0E1 		mov	ip, r1, asl #16
 1741 09d4 2C2880E0 		add	r2, r0, ip, lsr #16
 1742 09d8 463282E2 		add	r3, r2, #1610612740
 1743 09dc 001093E5 		ldr	r1, [r3, #0]
 1744 09e0 010BA0E1 		mov	r0, r1, asl #22
 755:usblibrary/src/usb_regs.c **** }
 1745              		.loc 1 755 0
 1746 09e4 200BA0E1 		mov	r0, r0, lsr #22
 1747 09e8 1EFF2FE1 		bx	lr
 1748              		.cfi_endproc
 1749              	.LFE52:
 1751              		.align	2
 1752              		.global	GetEPDblBuf1Count
 1754              	GetEPDblBuf1Count:
 1755              	.LFB53:
 756:usblibrary/src/usb_regs.c **** 
 757:usblibrary/src/usb_regs.c **** /*******************************************************************************
 758:usblibrary/src/usb_regs.c **** * Function Name  : GetEPDblBuf1Count
 759:usblibrary/src/usb_regs.c **** * Description    : Returns the number of data received in the buffer 1 of a
 760:usblibrary/src/usb_regs.c **** *                  double Buffer endpoint.
 761:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 762:usblibrary/src/usb_regs.c **** * Output         : None.
 763:usblibrary/src/usb_regs.c **** * Return         : Endpoint Buffer 1 count.
 764:usblibrary/src/usb_regs.c **** *******************************************************************************/
 765:usblibrary/src/usb_regs.c **** u16 GetEPDblBuf1Count(u8 bEpNum)
 766:usblibrary/src/usb_regs.c **** {
 1756              		.loc 1 766 0
 1757              		.cfi_startproc
 1758              		@ args = 0, pretend = 0, frame = 0
 1759              		@ frame_needed = 0, uses_anonymous_args = 0
 1760              		@ link register save eliminated.
 1761              	.LVL120:
 767:usblibrary/src/usb_regs.c ****   return(_GetEPDblBuf1Count(bEpNum));
 1762              		.loc 1 767 0
 1763 09ec 0632A0E3 		mov	r3, #1610612736
 1764 09f0 501893E5 		ldr	r1, [r3, #2128]
 1765 09f4 8001A0E1 		mov	r0, r0, asl #3
 1766              	.LVL121:
 1767 09f8 01C8A0E1 		mov	ip, r1, asl #16
 1768 09fc 2C2880E0 		add	r2, r0, ip, lsr #16
 1769 0a00 463282E2 		add	r3, r2, #1610612740
 1770 0a04 B210D3E1 		ldrh	r1, [r3, #2]
 768:usblibrary/src/usb_regs.c **** }
 1771              		.loc 1 768 0
 1772 0a08 010BA0E1 		mov	r0, r1, asl #22
 1773 0a0c 200BA0E1 		mov	r0, r0, lsr #22
 1774 0a10 1EFF2FE1 		bx	lr
 1775              		.cfi_endproc
 1776              	.LFE53:
 1778              		.align	2
 1779              		.global	FreeUserBuffer
 1781              	FreeUserBuffer:
 1782              	.LFB54:
 769:usblibrary/src/usb_regs.c **** #ifdef STR7xx /*STR7xx family */
 770:usblibrary/src/usb_regs.c **** 
 771:usblibrary/src/usb_regs.c **** /*******************************************************************************
 772:usblibrary/src/usb_regs.c **** * Function Name  : GetEPDblBufDir.
 773:usblibrary/src/usb_regs.c **** * Description    : gets direction of the double buffered endpoint.
 774:usblibrary/src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 775:usblibrary/src/usb_regs.c **** * Output         : None.
 776:usblibrary/src/usb_regs.c **** * Return         : EP_DBUF_OUT, EP_DBUF_IN,
 777:usblibrary/src/usb_regs.c **** *                  EP_DBUF_ERR if the endpoint counter not yet programmed.
 778:usblibrary/src/usb_regs.c **** *******************************************************************************/
 779:usblibrary/src/usb_regs.c **** EP_DBUF_DIR GetEPDblBufDir(u8 bEpNum)
 780:usblibrary/src/usb_regs.c **** {
 781:usblibrary/src/usb_regs.c ****   if ((u16)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
 782:usblibrary/src/usb_regs.c ****   {
 783:usblibrary/src/usb_regs.c ****     return(EP_DBUF_OUT);
 784:usblibrary/src/usb_regs.c ****   }
 785:usblibrary/src/usb_regs.c ****   else if (((u16)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
 786:usblibrary/src/usb_regs.c ****   {
 787:usblibrary/src/usb_regs.c ****     return(EP_DBUF_IN);
 788:usblibrary/src/usb_regs.c ****   }
 789:usblibrary/src/usb_regs.c ****   else
 790:usblibrary/src/usb_regs.c ****   {
 791:usblibrary/src/usb_regs.c ****     return(EP_DBUF_ERR);
 792:usblibrary/src/usb_regs.c ****   }
 793:usblibrary/src/usb_regs.c **** }
 794:usblibrary/src/usb_regs.c **** #endif
 795:usblibrary/src/usb_regs.c **** 
 796:usblibrary/src/usb_regs.c **** /*******************************************************************************
 797:usblibrary/src/usb_regs.c **** * Function Name  : FreeUserBuffer.
 798:usblibrary/src/usb_regs.c **** * Description    : free buffer used from the application realizing it to the
 799:usblibrary/src/usb_regs.c **** *                  line toggles bit SW_BUF in the double buffered endpoint
 800:usblibrary/src/usb_regs.c **** *                  register.
 801:usblibrary/src/usb_regs.c **** * Input          : bEpNum, bDir.
 802:usblibrary/src/usb_regs.c **** * Output         : None.
 803:usblibrary/src/usb_regs.c **** * Return         : None.
 804:usblibrary/src/usb_regs.c **** *******************************************************************************/
 805:usblibrary/src/usb_regs.c **** void FreeUserBuffer(u8 bEpNum, u8 bDir)
 806:usblibrary/src/usb_regs.c **** {
 1783              		.loc 1 806 0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 0
 1786              		@ frame_needed = 0, uses_anonymous_args = 0
 1787              		@ link register save eliminated.
 1788              	.LVL122:
 807:usblibrary/src/usb_regs.c ****   if (bDir == EP_DBUF_OUT)
 1789              		.loc 1 807 0
 1790 0a14 010051E3 		cmp	r1, #1
 1791 0a18 0900000A 		beq	.L122
 808:usblibrary/src/usb_regs.c ****   { /* OUT double buffered endpoint */
 809:usblibrary/src/usb_regs.c ****     _ToggleDTOG_TX(bEpNum);
 810:usblibrary/src/usb_regs.c ****   }
 811:usblibrary/src/usb_regs.c ****   else if (bDir == EP_DBUF_IN)
 1792              		.loc 1 811 0
 1793 0a1c 020051E3 		cmp	r1, #2
 1794 0a20 1EFF2F11 		bxne	lr
 812:usblibrary/src/usb_regs.c ****   { /* IN double buffered endpoint */
 813:usblibrary/src/usb_regs.c ****     _ToggleDTOG_RX(bEpNum);
 1795              		.loc 1 813 0
 1796 0a24 0011A0E1 		mov	r1, r0, asl #2
 1797              	.LVL123:
 1798 0a28 061281E2 		add	r1, r1, #1610612736
 1799 0a2c 002891E5 		ldr	r2, [r1, #2048]
 1800 0a30 2C009FE5 		ldr	r0, .L123
 1801              	.LVL124:
 1802 0a34 00C002E0 		and	ip, r2, r0
 1803 0a38 01398CE3 		orr	r3, ip, #16384
 1804 0a3c 003881E5 		str	r3, [r1, #2048]
 1805 0a40 1EFF2FE1 		bx	lr
 1806              	.LVL125:
 1807              	.L122:
 809:usblibrary/src/usb_regs.c ****     _ToggleDTOG_TX(bEpNum);
 1808              		.loc 1 809 0
 1809 0a44 0001A0E1 		mov	r0, r0, asl #2
 1810              	.LVL126:
 1811 0a48 060280E2 		add	r0, r0, #1610612736
 1812 0a4c 002890E5 		ldr	r2, [r0, #2048]
 1813 0a50 0CC09FE5 		ldr	ip, .L123
 1814 0a54 0C1002E0 		and	r1, r2, ip
 1815              	.LVL127:
 1816 0a58 403081E3 		orr	r3, r1, #64
 1817 0a5c 003880E5 		str	r3, [r0, #2048]
 1818 0a60 1EFF2FE1 		bx	lr
 1819              	.L124:
 1820              		.align	2
 1821              	.L123:
 1822 0a64 8F8F0000 		.word	36751
 1823              		.cfi_endproc
 1824              	.LFE54:
 1826              		.align	2
 1827              		.global	ToWord
 1829              	ToWord:
 1830              	.LFB55:
 814:usblibrary/src/usb_regs.c ****   }
 815:usblibrary/src/usb_regs.c **** }
 816:usblibrary/src/usb_regs.c **** 
 817:usblibrary/src/usb_regs.c **** /*******************************************************************************
 818:usblibrary/src/usb_regs.c **** * Function Name  : ToWord
 819:usblibrary/src/usb_regs.c **** * Description    : merge two byte in a word.
 820:usblibrary/src/usb_regs.c **** * Input          : bh: byte high, bl: bytes low.
 821:usblibrary/src/usb_regs.c **** * Output         : None.
 822:usblibrary/src/usb_regs.c **** * Return         : resulted word.
 823:usblibrary/src/usb_regs.c **** *******************************************************************************/
 824:usblibrary/src/usb_regs.c **** u16 ToWord(u8 bh, u8 bl)
 825:usblibrary/src/usb_regs.c **** {
 1831              		.loc 1 825 0
 1832              		.cfi_startproc
 1833              		@ args = 0, pretend = 0, frame = 0
 1834              		@ frame_needed = 0, uses_anonymous_args = 0
 1835              		@ link register save eliminated.
 1836              	.LVL128:
 826:usblibrary/src/usb_regs.c ****   u16 wRet;
 827:usblibrary/src/usb_regs.c ****   wRet = (u16)bl | ((u16)bh << 8);
 828:usblibrary/src/usb_regs.c ****   return(wRet);
 829:usblibrary/src/usb_regs.c **** }
 1837              		.loc 1 829 0
 1838 0a68 000481E1 		orr	r0, r1, r0, asl #8
 1839              	.LVL129:
 1840 0a6c 1EFF2FE1 		bx	lr
 1841              		.cfi_endproc
 1842              	.LFE55:
 1844              		.align	2
 1845              		.global	ByteSwap
 1847              	ByteSwap:
 1848              	.LFB56:
 830:usblibrary/src/usb_regs.c **** 
 831:usblibrary/src/usb_regs.c **** /*******************************************************************************
 832:usblibrary/src/usb_regs.c **** * Function Name  : ByteSwap
 833:usblibrary/src/usb_regs.c **** * Description    : Swap two byte in a word.
 834:usblibrary/src/usb_regs.c **** * Input          : wSwW: word to Swap.
 835:usblibrary/src/usb_regs.c **** * Output         : None.
 836:usblibrary/src/usb_regs.c **** * Return         : resulted word.
 837:usblibrary/src/usb_regs.c **** *******************************************************************************/
 838:usblibrary/src/usb_regs.c **** u16 ByteSwap(u16 wSwW)
 839:usblibrary/src/usb_regs.c **** {
 1849              		.loc 1 839 0
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 0
 1852              		@ frame_needed = 0, uses_anonymous_args = 0
 1853              		@ link register save eliminated.
 1854              	.LVL130:
 840:usblibrary/src/usb_regs.c ****   u8 bTemp;
 841:usblibrary/src/usb_regs.c ****   u16 wRet;
 842:usblibrary/src/usb_regs.c ****   bTemp = (u8)(wSwW & 0xff);
 843:usblibrary/src/usb_regs.c ****   wRet = (wSwW >> 8) | ((u16)bTemp << 8);
 1855              		.loc 1 843 0
 1856 0a70 FF3000E2 		and	r3, r0, #255
 1857 0a74 2004A0E1 		mov	r0, r0, lsr #8
 1858              	.LVL131:
 844:usblibrary/src/usb_regs.c ****   return(wRet);
 845:usblibrary/src/usb_regs.c **** }
 1859              		.loc 1 845 0
 1860 0a78 030480E1 		orr	r0, r0, r3, asl #8
 1861 0a7c 1EFF2FE1 		bx	lr
 1862              		.cfi_endproc
 1863              	.LFE56:
 1865              		.align	2
 1866              		.global	SetDMABurstTxSize
 1868              	SetDMABurstTxSize:
 1869              	.LFB57:
 846:usblibrary/src/usb_regs.c **** 
 847:usblibrary/src/usb_regs.c **** /* DMA Functions only for STR91x */
 848:usblibrary/src/usb_regs.c **** #ifdef STR91x /*str91x family*/
 849:usblibrary/src/usb_regs.c **** /*******************************************************************************
 850:usblibrary/src/usb_regs.c **** * Function Name  : SetDMAburstTxSize.
 851:usblibrary/src/usb_regs.c **** * Description    : Configure the Burst Size for a Tx Endpoint.
 852:usblibrary/src/usb_regs.c **** * Input          : DestBsize: Destination Burst Size.
 853:usblibrary/src/usb_regs.c **** * Output         : None.
 854:usblibrary/src/usb_regs.c **** * Return         : None.
 855:usblibrary/src/usb_regs.c **** *******************************************************************************/
 856:usblibrary/src/usb_regs.c **** void SetDMABurstTxSize(u8 DestBsize)
 857:usblibrary/src/usb_regs.c **** {
 1870              		.loc 1 857 0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 0
 1873              		@ frame_needed = 0, uses_anonymous_args = 0
 1874              		@ link register save eliminated.
 1875              	.LVL132:
 858:usblibrary/src/usb_regs.c ****   *DMABSIZE &= ~0xEF;
 1876              		.loc 1 858 0
 1877 0a80 0632A0E3 		mov	r3, #1610612736
 1878 0a84 601893E5 		ldr	r1, [r3, #2144]
 859:usblibrary/src/usb_regs.c ****   *DMABSIZE = (DestBsize << 4);
 1879              		.loc 1 859 0
 1880 0a88 0002A0E1 		mov	r0, r0, asl #4
 1881              	.LVL133:
 858:usblibrary/src/usb_regs.c ****   *DMABSIZE &= ~0xEF;
 1882              		.loc 1 858 0
 1883 0a8c EF20C1E3 		bic	r2, r1, #239
 1884 0a90 602883E5 		str	r2, [r3, #2144]
 1885              		.loc 1 859 0
 1886 0a94 600883E5 		str	r0, [r3, #2144]
 860:usblibrary/src/usb_regs.c **** }
 1887              		.loc 1 860 0
 1888 0a98 1EFF2FE1 		bx	lr
 1889              		.cfi_endproc
 1890              	.LFE57:
 1892              		.align	2
 1893              		.global	SetDMABurstRxSize
 1895              	SetDMABurstRxSize:
 1896              	.LFB58:
 861:usblibrary/src/usb_regs.c **** 
 862:usblibrary/src/usb_regs.c **** /*******************************************************************************
 863:usblibrary/src/usb_regs.c **** * Function Name  : SetDMABurstRxSize.
 864:usblibrary/src/usb_regs.c **** * Description    : Configure the Burst Size for a Rx Endpoint.
 865:usblibrary/src/usb_regs.c **** * Input          : SrcBsize: Source Burst.
 866:usblibrary/src/usb_regs.c **** * Output         : None.
 867:usblibrary/src/usb_regs.c **** * Return         : None.
 868:usblibrary/src/usb_regs.c **** *******************************************************************************/
 869:usblibrary/src/usb_regs.c **** void SetDMABurstRxSize(u8 SrcBsize)
 870:usblibrary/src/usb_regs.c **** {
 1897              		.loc 1 870 0
 1898              		.cfi_startproc
 1899              		@ args = 0, pretend = 0, frame = 0
 1900              		@ frame_needed = 0, uses_anonymous_args = 0
 1901              		@ link register save eliminated.
 1902              	.LVL134:
 871:usblibrary/src/usb_regs.c ****   *DMABSIZE &= ~0x7;
 1903              		.loc 1 871 0
 1904 0a9c 0632A0E3 		mov	r3, #1610612736
 1905 0aa0 601893E5 		ldr	r1, [r3, #2144]
 1906 0aa4 0720C1E3 		bic	r2, r1, #7
 1907 0aa8 602883E5 		str	r2, [r3, #2144]
 872:usblibrary/src/usb_regs.c ****   *DMABSIZE = SrcBsize;
 1908              		.loc 1 872 0
 1909 0aac 600883E5 		str	r0, [r3, #2144]
 873:usblibrary/src/usb_regs.c **** }
 1910              		.loc 1 873 0
 1911 0ab0 1EFF2FE1 		bx	lr
 1912              		.cfi_endproc
 1913              	.LFE58:
 1915              		.align	2
 1916              		.global	DMAUnlinkedModeTxConfig
 1918              	DMAUnlinkedModeTxConfig:
 1919              	.LFB59:
 874:usblibrary/src/usb_regs.c **** 
 875:usblibrary/src/usb_regs.c **** /*******************************************************************************
 876:usblibrary/src/usb_regs.c **** * Function Name  : DMAUnlinkedModeTxConfig.
 877:usblibrary/src/usb_regs.c **** * Description    : Configure a Tx Endpoint to trigger TX Unlinked DMA request.
 878:usblibrary/src/usb_regs.c **** * Note           : Up to three endpoints could be configured to trigger DMA
 879:usblibrary/src/usb_regs.c ****                    request, an index[0:2] must be associated to an endpoint.
 880:usblibrary/src/usb_regs.c **** * Input          : -bEpNum: endpoint number[0:9].
 881:usblibrary/src/usb_regs.c **** *                  -index: 0,1 or 2.
 882:usblibrary/src/usb_regs.c **** * Output         : None.
 883:usblibrary/src/usb_regs.c **** * Return         : None.
 884:usblibrary/src/usb_regs.c **** *******************************************************************************/
 885:usblibrary/src/usb_regs.c **** void DMAUnlinkedModeTxConfig(u8 bEpNum , u8 index)
 886:usblibrary/src/usb_regs.c **** {
 1920              		.loc 1 886 0
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 0
 1923              		@ frame_needed = 0, uses_anonymous_args = 0
 1924              		@ link register save eliminated.
 1925              	.LVL135:
 887:usblibrary/src/usb_regs.c ****   *DMACR2 &= ~(0x0F << (4 * index));
 1926              		.loc 1 887 0
 1927 0ab4 0632A0E3 		mov	r3, #1610612736
 1928 0ab8 582893E5 		ldr	r2, [r3, #2136]
 1929 0abc 0111A0E1 		mov	r1, r1, asl #2
 1930              	.LVL136:
 1931 0ac0 0FC0A0E3 		mov	ip, #15
 1932 0ac4 1CC1C2E1 		bic	ip, r2, ip, asl r1
 1933 0ac8 58C883E5 		str	ip, [r3, #2136]
 888:usblibrary/src/usb_regs.c ****   *DMACR2 |= bEpNum << (4 * index);
 1934              		.loc 1 888 0
 1935 0acc 582893E5 		ldr	r2, [r3, #2136]
 1936 0ad0 101182E1 		orr	r1, r2, r0, asl r1
 1937 0ad4 581883E5 		str	r1, [r3, #2136]
 889:usblibrary/src/usb_regs.c **** }
 1938              		.loc 1 889 0
 1939 0ad8 1EFF2FE1 		bx	lr
 1940              		.cfi_endproc
 1941              	.LFE59:
 1943              		.align	2
 1944              		.global	DMAUnlinkedModeTxEnable
 1946              	DMAUnlinkedModeTxEnable:
 1947              	.LFB60:
 890:usblibrary/src/usb_regs.c **** 
 891:usblibrary/src/usb_regs.c **** /*******************************************************************************
 892:usblibrary/src/usb_regs.c **** * Function Name  : DMAUnlinkedModeTxEnable.
 893:usblibrary/src/usb_regs.c **** * Description    : Enable a Tx endpoint to trigger Tx DMA request.
 894:usblibrary/src/usb_regs.c **** * Input          : -index :0,1 or 2 = index associated to endpoint in function
 895:usblibrary/src/usb_regs.c **** *                   "DMAUnlinkedModeTxConfig".
 896:usblibrary/src/usb_regs.c **** * Output         : None.
 897:usblibrary/src/usb_regs.c **** * Return         : None.
 898:usblibrary/src/usb_regs.c **** *******************************************************************************/
 899:usblibrary/src/usb_regs.c **** void DMAUnlinkedModeTxEnable(u8 index)
 900:usblibrary/src/usb_regs.c **** {
 1948              		.loc 1 900 0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 0
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
 1953              	.LVL137:
 901:usblibrary/src/usb_regs.c ****   *DMACR3 &= ~0x01;  /*DMA Tx linked mode disabled*/
 1954              		.loc 1 901 0
 1955 0adc 0632A0E3 		mov	r3, #1610612736
 1956 0ae0 5CC893E5 		ldr	ip, [r3, #2140]
 902:usblibrary/src/usb_regs.c ****   *DMACR2 &= ~0x3000;
 903:usblibrary/src/usb_regs.c ****   *DMACR2 |= (index + 1) << 12;
 1957              		.loc 1 903 0
 1958 0ae4 011080E2 		add	r1, r0, #1
 901:usblibrary/src/usb_regs.c ****   *DMACR3 &= ~0x01;  /*DMA Tx linked mode disabled*/
 1959              		.loc 1 901 0
 1960 0ae8 0120CCE3 		bic	r2, ip, #1
 1961 0aec 5C2883E5 		str	r2, [r3, #2140]
 902:usblibrary/src/usb_regs.c ****   *DMACR2 &= ~0x3000;
 1962              		.loc 1 902 0
 1963 0af0 580893E5 		ldr	r0, [r3, #2136]
 1964              	.LVL138:
 1965 0af4 03CAC0E3 		bic	ip, r0, #12288
 1966 0af8 58C883E5 		str	ip, [r3, #2136]
 1967              		.loc 1 903 0
 1968 0afc 582893E5 		ldr	r2, [r3, #2136]
 1969 0b00 010682E1 		orr	r0, r2, r1, asl #12
 1970 0b04 580883E5 		str	r0, [r3, #2136]
 904:usblibrary/src/usb_regs.c **** }
 1971              		.loc 1 904 0
 1972 0b08 1EFF2FE1 		bx	lr
 1973              		.cfi_endproc
 1974              	.LFE60:
 1976              		.align	2
 1977              		.global	DMAUnlinkedModeTxDisable
 1979              	DMAUnlinkedModeTxDisable:
 1980              	.LFB61:
 905:usblibrary/src/usb_regs.c **** 
 906:usblibrary/src/usb_regs.c **** /*******************************************************************************
 907:usblibrary/src/usb_regs.c **** * Function Name  : DMAUnlinkedModeTxDisable.
 908:usblibrary/src/usb_regs.c **** * Description    : Enable a Tx endpoint to trigger Tx DMA request.
 909:usblibrary/src/usb_regs.c **** * Input          : index :0,1 or 2 = index associated to endpoint in function
 910:usblibrary/src/usb_regs.c **** *                   "DMAUnlinkedModeTxConfig".
 911:usblibrary/src/usb_regs.c **** * Output         : None.
 912:usblibrary/src/usb_regs.c **** * Return         : None.
 913:usblibrary/src/usb_regs.c **** *******************************************************************************/
 914:usblibrary/src/usb_regs.c **** void DMAUnlinkedModeTxDisable(u8 index)
 915:usblibrary/src/usb_regs.c **** {
 1981              		.loc 1 915 0
 1982              		.cfi_startproc
 1983              		@ args = 0, pretend = 0, frame = 0
 1984              		@ frame_needed = 0, uses_anonymous_args = 0
 1985              		@ link register save eliminated.
 1986              	.LVL139:
 916:usblibrary/src/usb_regs.c ****   *DMACR2 &= ~0x3000;
 1987              		.loc 1 916 0
 1988 0b0c 0632A0E3 		mov	r3, #1610612736
 1989 0b10 580893E5 		ldr	r0, [r3, #2136]
 1990              	.LVL140:
 1991 0b14 032AC0E3 		bic	r2, r0, #12288
 1992 0b18 582883E5 		str	r2, [r3, #2136]
 917:usblibrary/src/usb_regs.c **** }
 1993              		.loc 1 917 0
 1994 0b1c 1EFF2FE1 		bx	lr
 1995              		.cfi_endproc
 1996              	.LFE61:
 1998              		.align	2
 1999              		.global	DMAUnlinkedModeRxEnable
 2001              	DMAUnlinkedModeRxEnable:
 2002              	.LFB62:
 918:usblibrary/src/usb_regs.c **** 
 919:usblibrary/src/usb_regs.c **** /*******************************************************************************
 920:usblibrary/src/usb_regs.c **** * Function Name  : DMAUnlinkedModeRxEnable.
 921:usblibrary/src/usb_regs.c **** * Description    : Enable a Rx Endpoint to trigger Rx DMA.
 922:usblibrary/src/usb_regs.c **** * Input          : bEpNum: endpoint number[0:9].
 923:usblibrary/src/usb_regs.c **** * Output         : None.
 924:usblibrary/src/usb_regs.c **** * Return         : None.
 925:usblibrary/src/usb_regs.c **** *******************************************************************************/
 926:usblibrary/src/usb_regs.c **** void DMAUnlinkedModeRxEnable(u8 bEpNum)
 927:usblibrary/src/usb_regs.c **** {
 2003              		.loc 1 927 0
 2004              		.cfi_startproc
 2005              		@ args = 0, pretend = 0, frame = 0
 2006              		@ frame_needed = 0, uses_anonymous_args = 0
 2007              		@ link register save eliminated.
 2008              	.LVL141:
 928:usblibrary/src/usb_regs.c ****   *DMACR3 &= ~0x80;   /*DMA Rx linked mode disabled*/
 2009              		.loc 1 928 0
 2010 0b20 0632A0E3 		mov	r3, #1610612736
 2011 0b24 5CC893E5 		ldr	ip, [r3, #2140]
 929:usblibrary/src/usb_regs.c ****   *DMACR1 |= (0x1 << bEpNum);
 2012              		.loc 1 929 0
 2013 0b28 0110A0E3 		mov	r1, #1
 928:usblibrary/src/usb_regs.c ****   *DMACR3 &= ~0x80;   /*DMA Rx linked mode disabled*/
 2014              		.loc 1 928 0
 2015 0b2c 8020CCE3 		bic	r2, ip, #128
 2016 0b30 5C2883E5 		str	r2, [r3, #2140]
 2017              		.loc 1 929 0
 2018 0b34 54C893E5 		ldr	ip, [r3, #2132]
 2019 0b38 11208CE1 		orr	r2, ip, r1, asl r0
 2020 0b3c 542883E5 		str	r2, [r3, #2132]
 930:usblibrary/src/usb_regs.c **** }
 2021              		.loc 1 930 0
 2022 0b40 1EFF2FE1 		bx	lr
 2023              		.cfi_endproc
 2024              	.LFE62:
 2026              		.align	2
 2027              		.global	DMAUnlinkedModeRxDisable
 2029              	DMAUnlinkedModeRxDisable:
 2030              	.LFB63:
 931:usblibrary/src/usb_regs.c **** 
 932:usblibrary/src/usb_regs.c **** /*******************************************************************************
 933:usblibrary/src/usb_regs.c **** * Function Name  : DMAUnlinkedModeRxDisable.
 934:usblibrary/src/usb_regs.c **** * Description    : Disable a Rx Endpoint to trigger Rx DMA.
 935:usblibrary/src/usb_regs.c **** * Input          : bEpNum: endpoint number[0:9].
 936:usblibrary/src/usb_regs.c **** * Output         : None.
 937:usblibrary/src/usb_regs.c **** * Return         : None.
 938:usblibrary/src/usb_regs.c **** *******************************************************************************/
 939:usblibrary/src/usb_regs.c **** void DMAUnlinkedModeRxDisable(u8 bEpNum)
 940:usblibrary/src/usb_regs.c **** {
 2031              		.loc 1 940 0
 2032              		.cfi_startproc
 2033              		@ args = 0, pretend = 0, frame = 0
 2034              		@ frame_needed = 0, uses_anonymous_args = 0
 2035              		@ link register save eliminated.
 2036              	.LVL142:
 941:usblibrary/src/usb_regs.c ****   *DMACR1 &= ~(0x1 << bEpNum);
 2037              		.loc 1 941 0
 2038 0b44 0632A0E3 		mov	r3, #1610612736
 2039 0b48 54C893E5 		ldr	ip, [r3, #2132]
 2040 0b4c 0110A0E3 		mov	r1, #1
 2041 0b50 1120CCE1 		bic	r2, ip, r1, asl r0
 2042 0b54 542883E5 		str	r2, [r3, #2132]
 942:usblibrary/src/usb_regs.c **** }
 2043              		.loc 1 942 0
 2044 0b58 1EFF2FE1 		bx	lr
 2045              		.cfi_endproc
 2046              	.LFE63:
 2048              		.align	2
 2049              		.global	DMALinkedModeRxConfig
 2051              	DMALinkedModeRxConfig:
 2052              	.LFB64:
 943:usblibrary/src/usb_regs.c **** 
 944:usblibrary/src/usb_regs.c **** /*******************************************************************************
 945:usblibrary/src/usb_regs.c **** * Function Name  : DMALinkedModeRxConfig.
 946:usblibrary/src/usb_regs.c **** * Description    : Configure a Rx endpoint to trigger DMA linked request.
 947:usblibrary/src/usb_regs.c **** * Input          : bEpNum: endpoint number[0:9].
 948:usblibrary/src/usb_regs.c **** * Output         : None.
 949:usblibrary/src/usb_regs.c **** * Return         : None.
 950:usblibrary/src/usb_regs.c **** *******************************************************************************/
 951:usblibrary/src/usb_regs.c **** void DMALinkedModeRxConfig(u8 bEpNum)
 952:usblibrary/src/usb_regs.c **** {
 2053              		.loc 1 952 0
 2054              		.cfi_startproc
 2055              		@ args = 0, pretend = 0, frame = 0
 2056              		@ frame_needed = 0, uses_anonymous_args = 0
 2057              		@ link register save eliminated.
 2058              	.LVL143:
 953:usblibrary/src/usb_regs.c ****   *DMACR3 &= ~0x1E00;
 2059              		.loc 1 953 0
 2060 0b5c 0632A0E3 		mov	r3, #1610612736
 2061 0b60 5C2893E5 		ldr	r2, [r3, #2140]
 2062 0b64 1ECCC2E3 		bic	ip, r2, #7680
 2063 0b68 5CC883E5 		str	ip, [r3, #2140]
 954:usblibrary/src/usb_regs.c ****   *DMACR3 |= bEpNum << 9;
 2064              		.loc 1 954 0
 2065 0b6c 5C1893E5 		ldr	r1, [r3, #2140]
 2066 0b70 802481E1 		orr	r2, r1, r0, asl #9
 2067 0b74 5C2883E5 		str	r2, [r3, #2140]
 955:usblibrary/src/usb_regs.c **** }
 2068              		.loc 1 955 0
 2069 0b78 1EFF2FE1 		bx	lr
 2070              		.cfi_endproc
 2071              	.LFE64:
 2073              		.align	2
 2074              		.global	DMALinkedModeTxConfig
 2076              	DMALinkedModeTxConfig:
 2077              	.LFB65:
 956:usblibrary/src/usb_regs.c **** 
 957:usblibrary/src/usb_regs.c **** /*******************************************************************************
 958:usblibrary/src/usb_regs.c **** * Function Name  : DMALinkedModeTxConfig.
 959:usblibrary/src/usb_regs.c **** * Description    : Configure a Tx endpoint to trigger DMA linked request.
 960:usblibrary/src/usb_regs.c **** * Input          : bEpNum: endpoint number[0:9].
 961:usblibrary/src/usb_regs.c **** * Output         : None.
 962:usblibrary/src/usb_regs.c **** * Return         : None.
 963:usblibrary/src/usb_regs.c **** *******************************************************************************/
 964:usblibrary/src/usb_regs.c **** void DMALinkedModeTxConfig(u8 bEpNum)
 965:usblibrary/src/usb_regs.c **** {
 2078              		.loc 1 965 0
 2079              		.cfi_startproc
 2080              		@ args = 0, pretend = 0, frame = 0
 2081              		@ frame_needed = 0, uses_anonymous_args = 0
 2082              		@ link register save eliminated.
 2083              	.LVL144:
 966:usblibrary/src/usb_regs.c ****   *DMACR3 &= ~0x1E;
 2084              		.loc 1 966 0
 2085 0b7c 0632A0E3 		mov	r3, #1610612736
 2086 0b80 5C2893E5 		ldr	r2, [r3, #2140]
 2087 0b84 1EC0C2E3 		bic	ip, r2, #30
 2088 0b88 5CC883E5 		str	ip, [r3, #2140]
 967:usblibrary/src/usb_regs.c ****   *DMACR3 |= bEpNum << 1;
 2089              		.loc 1 967 0
 2090 0b8c 5C1893E5 		ldr	r1, [r3, #2140]
 2091 0b90 802081E1 		orr	r2, r1, r0, asl #1
 2092 0b94 5C2883E5 		str	r2, [r3, #2140]
 968:usblibrary/src/usb_regs.c **** }
 2093              		.loc 1 968 0
 2094 0b98 1EFF2FE1 		bx	lr
 2095              		.cfi_endproc
 2096              	.LFE65:
 2098              		.align	2
 2099              		.global	DMALinkedModeRxEnable
 2101              	DMALinkedModeRxEnable:
 2102              	.LFB66:
 969:usblibrary/src/usb_regs.c **** 
 970:usblibrary/src/usb_regs.c **** /*******************************************************************************
 971:usblibrary/src/usb_regs.c **** * Function Name  : DMALinkedModeRxEnable.
 972:usblibrary/src/usb_regs.c **** * Description    : Enable the DMA Linked Rx mode.
 973:usblibrary/src/usb_regs.c **** * Input          : None.
 974:usblibrary/src/usb_regs.c **** * Output         : None.
 975:usblibrary/src/usb_regs.c **** * Return         : None.
 976:usblibrary/src/usb_regs.c **** *******************************************************************************/
 977:usblibrary/src/usb_regs.c **** void DMALinkedModeRxEnable(void)
 978:usblibrary/src/usb_regs.c **** {
 2103              		.loc 1 978 0
 2104              		.cfi_startproc
 2105              		@ args = 0, pretend = 0, frame = 0
 2106              		@ frame_needed = 0, uses_anonymous_args = 0
 2107              		@ link register save eliminated.
 979:usblibrary/src/usb_regs.c ****   *DMACR3 |= 0x100;
 2108              		.loc 1 979 0
 2109 0b9c 0632A0E3 		mov	r3, #1610612736
 2110 0ba0 5CC893E5 		ldr	ip, [r3, #2140]
 2111 0ba4 011C8CE3 		orr	r1, ip, #256
 2112 0ba8 5C1883E5 		str	r1, [r3, #2140]
 980:usblibrary/src/usb_regs.c ****   *DMACR3 |= 0x2000;
 2113              		.loc 1 980 0
 2114 0bac 5C0893E5 		ldr	r0, [r3, #2140]
 2115 0bb0 022A80E3 		orr	r2, r0, #8192
 2116 0bb4 5C2883E5 		str	r2, [r3, #2140]
 981:usblibrary/src/usb_regs.c **** }
 2117              		.loc 1 981 0
 2118 0bb8 1EFF2FE1 		bx	lr
 2119              		.cfi_endproc
 2120              	.LFE66:
 2122              		.align	2
 2123              		.global	DMALinkedModeTxEnable
 2125              	DMALinkedModeTxEnable:
 2126              	.LFB67:
 982:usblibrary/src/usb_regs.c **** 
 983:usblibrary/src/usb_regs.c **** /*******************************************************************************
 984:usblibrary/src/usb_regs.c **** * Function Name  : DMALinkedModeTxEnable.
 985:usblibrary/src/usb_regs.c **** * Description    : Enable the DMA Linked Tx mode.
 986:usblibrary/src/usb_regs.c **** * Input          : None.
 987:usblibrary/src/usb_regs.c **** * Output         : None.
 988:usblibrary/src/usb_regs.c **** * Return         : None.
 989:usblibrary/src/usb_regs.c **** *******************************************************************************/
 990:usblibrary/src/usb_regs.c **** void DMALinkedModeTxEnable(void)
 991:usblibrary/src/usb_regs.c **** {
 2127              		.loc 1 991 0
 2128              		.cfi_startproc
 2129              		@ args = 0, pretend = 0, frame = 0
 2130              		@ frame_needed = 0, uses_anonymous_args = 0
 2131              		@ link register save eliminated.
 992:usblibrary/src/usb_regs.c ****   *DMACR3 |= 0x1;
 2132              		.loc 1 992 0
 2133 0bbc 0632A0E3 		mov	r3, #1610612736
 2134 0bc0 5CC893E5 		ldr	ip, [r3, #2140]
 2135 0bc4 01108CE3 		orr	r1, ip, #1
 2136 0bc8 5C1883E5 		str	r1, [r3, #2140]
 993:usblibrary/src/usb_regs.c ****   *DMACR3 |= 0x20;
 2137              		.loc 1 993 0
 2138 0bcc 5C0893E5 		ldr	r0, [r3, #2140]
 2139 0bd0 202080E3 		orr	r2, r0, #32
 2140 0bd4 5C2883E5 		str	r2, [r3, #2140]
 994:usblibrary/src/usb_regs.c **** }
 2141              		.loc 1 994 0
 2142 0bd8 1EFF2FE1 		bx	lr
 2143              		.cfi_endproc
 2144              	.LFE67:
 2146              		.align	2
 2147              		.global	DMALinkedModeRxDisable
 2149              	DMALinkedModeRxDisable:
 2150              	.LFB68:
 995:usblibrary/src/usb_regs.c **** /*******************************************************************************
 996:usblibrary/src/usb_regs.c **** * Function Name  : DMALinkedModeRxDisable.
 997:usblibrary/src/usb_regs.c **** * Description    : Disable the DMA Linked Rx mode.
 998:usblibrary/src/usb_regs.c **** * Input          : None.
 999:usblibrary/src/usb_regs.c **** * Output         : None.
1000:usblibrary/src/usb_regs.c **** * Return         : None.
1001:usblibrary/src/usb_regs.c **** *******************************************************************************/
1002:usblibrary/src/usb_regs.c **** void DMALinkedModeRxDisable(void)
1003:usblibrary/src/usb_regs.c **** {
 2151              		.loc 1 1003 0
 2152              		.cfi_startproc
 2153              		@ args = 0, pretend = 0, frame = 0
 2154              		@ frame_needed = 0, uses_anonymous_args = 0
 2155              		@ link register save eliminated.
1004:usblibrary/src/usb_regs.c ****   *DMACR3 &= ~0x100;
 2156              		.loc 1 1004 0
 2157 0bdc 0632A0E3 		mov	r3, #1610612736
 2158 0be0 5CC893E5 		ldr	ip, [r3, #2140]
 2159 0be4 011CCCE3 		bic	r1, ip, #256
 2160 0be8 5C1883E5 		str	r1, [r3, #2140]
1005:usblibrary/src/usb_regs.c ****   *DMACR3 &= ~0x2000;
 2161              		.loc 1 1005 0
 2162 0bec 5C0893E5 		ldr	r0, [r3, #2140]
 2163 0bf0 022AC0E3 		bic	r2, r0, #8192
 2164 0bf4 5C2883E5 		str	r2, [r3, #2140]
1006:usblibrary/src/usb_regs.c **** }
 2165              		.loc 1 1006 0
 2166 0bf8 1EFF2FE1 		bx	lr
 2167              		.cfi_endproc
 2168              	.LFE68:
 2170              		.align	2
 2171              		.global	DMALinkedModeTxDisable
 2173              	DMALinkedModeTxDisable:
 2174              	.LFB69:
1007:usblibrary/src/usb_regs.c **** 
1008:usblibrary/src/usb_regs.c **** /*******************************************************************************
1009:usblibrary/src/usb_regs.c **** * Function Name  : DMALinkedModeTxDisable.
1010:usblibrary/src/usb_regs.c **** * Description    : Disable the DMA Linked Tx mode.
1011:usblibrary/src/usb_regs.c **** * Input          : None.
1012:usblibrary/src/usb_regs.c **** * Output         : None.
1013:usblibrary/src/usb_regs.c **** * Return         : None.
1014:usblibrary/src/usb_regs.c **** *******************************************************************************/
1015:usblibrary/src/usb_regs.c **** void DMALinkedModeTxDisable(void)
1016:usblibrary/src/usb_regs.c **** {
 2175              		.loc 1 1016 0
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 0
 2178              		@ frame_needed = 0, uses_anonymous_args = 0
 2179              		@ link register save eliminated.
1017:usblibrary/src/usb_regs.c ****   *DMACR3 &= ~0x1;
 2180              		.loc 1 1017 0
 2181 0bfc 0632A0E3 		mov	r3, #1610612736
 2182 0c00 5CC893E5 		ldr	ip, [r3, #2140]
 2183 0c04 0110CCE3 		bic	r1, ip, #1
 2184 0c08 5C1883E5 		str	r1, [r3, #2140]
1018:usblibrary/src/usb_regs.c ****   *DMACR3 &= ~0x20;
 2185              		.loc 1 1018 0
 2186 0c0c 5C0893E5 		ldr	r0, [r3, #2140]
 2187 0c10 2020C0E3 		bic	r2, r0, #32
 2188 0c14 5C2883E5 		str	r2, [r3, #2140]
1019:usblibrary/src/usb_regs.c **** }
 2189              		.loc 1 1019 0
 2190 0c18 1EFF2FE1 		bx	lr
 2191              		.cfi_endproc
 2192              	.LFE69:
 2194              		.align	2
 2195              		.global	DMASynchEnable
 2197              	DMASynchEnable:
 2198              	.LFB70:
1020:usblibrary/src/usb_regs.c **** /*******************************************************************************
1021:usblibrary/src/usb_regs.c **** * Function Name  : USB_DMASynchEnable.
1022:usblibrary/src/usb_regs.c **** * Description    : Enable the Synchronization Logic.
1023:usblibrary/src/usb_regs.c **** * Input          : TRUE or FALSE.
1024:usblibrary/src/usb_regs.c **** * Output         : None.
1025:usblibrary/src/usb_regs.c **** * Return         : None.
1026:usblibrary/src/usb_regs.c **** *******************************************************************************/
1027:usblibrary/src/usb_regs.c **** void DMASynchEnable(void)
1028:usblibrary/src/usb_regs.c **** {
 2199              		.loc 1 1028 0
 2200              		.cfi_startproc
 2201              		@ args = 0, pretend = 0, frame = 0
 2202              		@ frame_needed = 0, uses_anonymous_args = 0
 2203              		@ link register save eliminated.
1029:usblibrary/src/usb_regs.c ****   *DMACR3 |= 0x40;
 2204              		.loc 1 1029 0
 2205 0c1c 0632A0E3 		mov	r3, #1610612736
 2206 0c20 5C0893E5 		ldr	r0, [r3, #2140]
 2207 0c24 402080E3 		orr	r2, r0, #64
 2208 0c28 5C2883E5 		str	r2, [r3, #2140]
1030:usblibrary/src/usb_regs.c **** }
 2209              		.loc 1 1030 0
 2210 0c2c 1EFF2FE1 		bx	lr
 2211              		.cfi_endproc
 2212              	.LFE70:
 2214              		.align	2
 2215              		.global	DMASynchDisable
 2217              	DMASynchDisable:
 2218              	.LFB71:
1031:usblibrary/src/usb_regs.c **** 
1032:usblibrary/src/usb_regs.c **** /*******************************************************************************
1033:usblibrary/src/usb_regs.c **** * Function Name  : USB_DMASynchDisable.
1034:usblibrary/src/usb_regs.c **** * Description    : Disable the Synchronization Logic.
1035:usblibrary/src/usb_regs.c **** * Input          : TRUE or FALSE.
1036:usblibrary/src/usb_regs.c **** * Output         : None.
1037:usblibrary/src/usb_regs.c **** * Return         : None.
1038:usblibrary/src/usb_regs.c **** *******************************************************************************/
1039:usblibrary/src/usb_regs.c **** void DMASynchDisable(void)
1040:usblibrary/src/usb_regs.c **** {
 2219              		.loc 1 1040 0
 2220              		.cfi_startproc
 2221              		@ args = 0, pretend = 0, frame = 0
 2222              		@ frame_needed = 0, uses_anonymous_args = 0
 2223              		@ link register save eliminated.
1041:usblibrary/src/usb_regs.c ****   *DMACR3 &= ~0x40;
 2224              		.loc 1 1041 0
 2225 0c30 0632A0E3 		mov	r3, #1610612736
 2226 0c34 5C0893E5 		ldr	r0, [r3, #2140]
 2227 0c38 4020C0E3 		bic	r2, r0, #64
 2228 0c3c 5C2883E5 		str	r2, [r3, #2140]
1042:usblibrary/src/usb_regs.c **** }
 2229              		.loc 1 1042 0
 2230 0c40 1EFF2FE1 		bx	lr
 2231              		.cfi_endproc
 2232              	.LFE71:
 2234              		.align	2
 2235              		.global	SetDMALLITxLength
 2237              	SetDMALLITxLength:
 2238              	.LFB72:
1043:usblibrary/src/usb_regs.c **** 
1044:usblibrary/src/usb_regs.c **** /*******************************************************************************
1045:usblibrary/src/usb_regs.c **** * Function Name  : SetDMALLITxLength.
1046:usblibrary/src/usb_regs.c **** * Description    : Set the DMA LLI Tx length.
1047:usblibrary/src/usb_regs.c **** * Input          : length.
1048:usblibrary/src/usb_regs.c **** * Output         : None.
1049:usblibrary/src/usb_regs.c **** * Return         : None.
1050:usblibrary/src/usb_regs.c **** *******************************************************************************/
1051:usblibrary/src/usb_regs.c **** void SetDMALLITxLength(u8 length)
1052:usblibrary/src/usb_regs.c **** {
 2239              		.loc 1 1052 0
 2240              		.cfi_startproc
 2241              		@ args = 0, pretend = 0, frame = 0
 2242              		@ frame_needed = 0, uses_anonymous_args = 0
 2243              		@ link register save eliminated.
 2244              	.LVL145:
1053:usblibrary/src/usb_regs.c ****   *DMALLI &= ~0xFF;
 2245              		.loc 1 1053 0
 2246 0c44 0632A0E3 		mov	r3, #1610612736
 2247 0c48 642893E5 		ldr	r2, [r3, #2148]
 2248 0c4c FFC0C2E3 		bic	ip, r2, #255
 2249 0c50 64C883E5 		str	ip, [r3, #2148]
1054:usblibrary/src/usb_regs.c ****   *DMALLI |= length;
 2250              		.loc 1 1054 0
 2251 0c54 641893E5 		ldr	r1, [r3, #2148]
 2252 0c58 012080E1 		orr	r2, r0, r1
 2253 0c5c 642883E5 		str	r2, [r3, #2148]
1055:usblibrary/src/usb_regs.c **** }
 2254              		.loc 1 1055 0
 2255 0c60 1EFF2FE1 		bx	lr
 2256              		.cfi_endproc
 2257              	.LFE72:
 2259              		.align	2
 2260              		.global	SetDMALLIRxLength
 2262              	SetDMALLIRxLength:
 2263              	.LFB73:
1056:usblibrary/src/usb_regs.c **** 
1057:usblibrary/src/usb_regs.c **** /*******************************************************************************
1058:usblibrary/src/usb_regs.c **** * Function Name  : SetDMALLIRxLength.
1059:usblibrary/src/usb_regs.c **** * Description    : Set the DMA LLI Rx length.
1060:usblibrary/src/usb_regs.c **** * Input          : length.
1061:usblibrary/src/usb_regs.c **** * Output         : None.
1062:usblibrary/src/usb_regs.c **** * Return         : None.
1063:usblibrary/src/usb_regs.c **** *******************************************************************************/
1064:usblibrary/src/usb_regs.c **** void SetDMALLIRxLength(u8 length )
1065:usblibrary/src/usb_regs.c **** {
 2264              		.loc 1 1065 0
 2265              		.cfi_startproc
 2266              		@ args = 0, pretend = 0, frame = 0
 2267              		@ frame_needed = 0, uses_anonymous_args = 0
 2268              		@ link register save eliminated.
 2269              	.LVL146:
1066:usblibrary/src/usb_regs.c ****   *DMALLI &= ~0xFF00;
 2270              		.loc 1 1066 0
 2271 0c64 0632A0E3 		mov	r3, #1610612736
 2272 0c68 642893E5 		ldr	r2, [r3, #2148]
 2273 0c6c FFCCC2E3 		bic	ip, r2, #65280
 2274 0c70 64C883E5 		str	ip, [r3, #2148]
1067:usblibrary/src/usb_regs.c ****   *DMALLI |= length << 8;
 2275              		.loc 1 1067 0
 2276 0c74 641893E5 		ldr	r1, [r3, #2148]
 2277 0c78 002481E1 		orr	r2, r1, r0, asl #8
 2278 0c7c 642883E5 		str	r2, [r3, #2148]
1068:usblibrary/src/usb_regs.c **** }
 2279              		.loc 1 1068 0
 2280 0c80 1EFF2FE1 		bx	lr
 2281              		.cfi_endproc
 2282              	.LFE73:
 2284              		.align	2
 2285              		.global	SetDMALLIRxPacketNum
 2287              	SetDMALLIRxPacketNum:
 2288              	.LFB74:
1069:usblibrary/src/usb_regs.c **** 
1070:usblibrary/src/usb_regs.c **** /*******************************************************************************
1071:usblibrary/src/usb_regs.c **** * Function Name  : SetDMALLIRxPacketNum.
1072:usblibrary/src/usb_regs.c **** * Description    : Set the LLI_RX_NPACKETS field in USB_DMABSIZE register.
1073:usblibrary/src/usb_regs.c **** * Input          : None.
1074:usblibrary/src/usb_regs.c **** * Output         : None.
1075:usblibrary/src/usb_regs.c **** * Return         : None.
1076:usblibrary/src/usb_regs.c **** *******************************************************************************/
1077:usblibrary/src/usb_regs.c **** void SetDMALLIRxPacketNum(u8 PacketNum)
1078:usblibrary/src/usb_regs.c **** {
 2289              		.loc 1 1078 0
 2290              		.cfi_startproc
 2291              		@ args = 0, pretend = 0, frame = 0
 2292              		@ frame_needed = 0, uses_anonymous_args = 0
 2293              		@ link register save eliminated.
 2294              	.LVL147:
1079:usblibrary/src/usb_regs.c ****   *DMABSIZE &= 0xFF;
 2295              		.loc 1 1079 0
 2296 0c84 0632A0E3 		mov	r3, #1610612736
 2297 0c88 602893E5 		ldr	r2, [r3, #2144]
 2298 0c8c FFC002E2 		and	ip, r2, #255
 2299 0c90 60C883E5 		str	ip, [r3, #2144]
1080:usblibrary/src/usb_regs.c ****   *DMABSIZE |= (PacketNum << 8);
 2300              		.loc 1 1080 0
 2301 0c94 601893E5 		ldr	r1, [r3, #2144]
 2302 0c98 002481E1 		orr	r2, r1, r0, asl #8
 2303 0c9c 602883E5 		str	r2, [r3, #2144]
1081:usblibrary/src/usb_regs.c **** }
 2304              		.loc 1 1081 0
 2305 0ca0 1EFF2FE1 		bx	lr
 2306              		.cfi_endproc
 2307              	.LFE74:
 2309              		.align	2
 2310              		.global	GetDMALLIRxPacketNum
 2312              	GetDMALLIRxPacketNum:
 2313              	.LFB75:
1082:usblibrary/src/usb_regs.c **** 
1083:usblibrary/src/usb_regs.c **** /*******************************************************************************
1084:usblibrary/src/usb_regs.c **** * Function Name  : GetDMALLIPacketNum.
1085:usblibrary/src/usb_regs.c **** * Description    : gets the LLI_RX_NPACKETS field value.
1086:usblibrary/src/usb_regs.c **** * Input          : None.
1087:usblibrary/src/usb_regs.c **** * Output         : None.
1088:usblibrary/src/usb_regs.c **** * Return         : LLI_RX_NPACKETS field value.
1089:usblibrary/src/usb_regs.c **** *******************************************************************************/
1090:usblibrary/src/usb_regs.c **** u8 GetDMALLIRxPacketNum(void)
1091:usblibrary/src/usb_regs.c **** {
 2314              		.loc 1 1091 0
 2315              		.cfi_startproc
 2316              		@ args = 0, pretend = 0, frame = 0
 2317              		@ frame_needed = 0, uses_anonymous_args = 0
 2318              		@ link register save eliminated.
1092:usblibrary/src/usb_regs.c ****   return((u8)(*DMABSIZE & 0xFF00) >> 8);
 2319              		.loc 1 1092 0
 2320 0ca4 0632A0E3 		mov	r3, #1610612736
 2321 0ca8 603893E5 		ldr	r3, [r3, #2144]
1093:usblibrary/src/usb_regs.c **** }
 2322              		.loc 1 1093 0
 2323 0cac 0000A0E3 		mov	r0, #0
 2324 0cb0 1EFF2FE1 		bx	lr
 2325              		.cfi_endproc
 2326              	.LFE75:
 2328              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 usb_regs.c
     /tmp/ccJTEgfQ.s:21     .text:00000000 $a
     /tmp/ccJTEgfQ.s:24     .text:00000000 SetCNTR
     /tmp/ccJTEgfQ.s:44     .text:0000000c GetCNTR
     /tmp/ccJTEgfQ.s:64     .text:00000020 SetISTR
     /tmp/ccJTEgfQ.s:83     .text:0000002c GetISTR
     /tmp/ccJTEgfQ.s:103    .text:00000040 GetFNR
     /tmp/ccJTEgfQ.s:123    .text:00000054 SetDADDR
     /tmp/ccJTEgfQ.s:142    .text:00000060 GetDADDR
     /tmp/ccJTEgfQ.s:162    .text:00000074 SetBTABLE
     /tmp/ccJTEgfQ.s:180    .text:00000088 $d
     /tmp/ccJTEgfQ.s:184    .text:0000008c $a
     /tmp/ccJTEgfQ.s:187    .text:0000008c GetBTABLE
     /tmp/ccJTEgfQ.s:207    .text:000000a0 SetENDPOINT
     /tmp/ccJTEgfQ.s:228    .text:000000b0 GetENDPOINT
     /tmp/ccJTEgfQ.s:251    .text:000000c8 SetEPType
     /tmp/ccJTEgfQ.s:279    .text:000000f0 GetEPType
     /tmp/ccJTEgfQ.s:301    .text:00000104 SetEPTxStatus
     /tmp/ccJTEgfQ.s:331    .text:00000130 $d
     /tmp/ccJTEgfQ.s:335    .text:00000134 $a
     /tmp/ccJTEgfQ.s:338    .text:00000134 SetEPRxStatus
     /tmp/ccJTEgfQ.s:368    .text:00000160 $d
     /tmp/ccJTEgfQ.s:372    .text:00000164 $a
     /tmp/ccJTEgfQ.s:375    .text:00000164 SetDouBleBuffEPStall
     /tmp/ccJTEgfQ.s:418    .text:00000198 GetEPTxStatus
     /tmp/ccJTEgfQ.s:440    .text:000001ac GetEPRxStatus
     /tmp/ccJTEgfQ.s:462    .text:000001c0 SetEPTxValid
     /tmp/ccJTEgfQ.s:487    .text:000001e0 $d
     /tmp/ccJTEgfQ.s:491    .text:000001e4 $a
     /tmp/ccJTEgfQ.s:494    .text:000001e4 SetEPRxValid
     /tmp/ccJTEgfQ.s:519    .text:00000204 $d
     /tmp/ccJTEgfQ.s:523    .text:00000208 $a
     /tmp/ccJTEgfQ.s:526    .text:00000208 SetEP_KIND
     /tmp/ccJTEgfQ.s:548    .text:00000228 $d
     /tmp/ccJTEgfQ.s:552    .text:0000022c $a
     /tmp/ccJTEgfQ.s:555    .text:0000022c ClearEP_KIND
     /tmp/ccJTEgfQ.s:576    .text:00000248 $d
     /tmp/ccJTEgfQ.s:580    .text:0000024c $a
     /tmp/ccJTEgfQ.s:583    .text:0000024c Clear_Status_Out
     /tmp/ccJTEgfQ.s:604    .text:00000268 $d
     /tmp/ccJTEgfQ.s:608    .text:0000026c $a
     /tmp/ccJTEgfQ.s:611    .text:0000026c Set_Status_Out
     /tmp/ccJTEgfQ.s:633    .text:0000028c $d
     /tmp/ccJTEgfQ.s:637    .text:00000290 $a
     /tmp/ccJTEgfQ.s:640    .text:00000290 SetEPDoubleBuff
     /tmp/ccJTEgfQ.s:662    .text:000002b0 $d
     /tmp/ccJTEgfQ.s:666    .text:000002b4 $a
     /tmp/ccJTEgfQ.s:669    .text:000002b4 ClearEPDoubleBuff
     /tmp/ccJTEgfQ.s:690    .text:000002d0 $d
     /tmp/ccJTEgfQ.s:694    .text:000002d4 $a
     /tmp/ccJTEgfQ.s:697    .text:000002d4 GetTxStallStatus
     /tmp/ccJTEgfQ.s:722    .text:000002f4 GetRxStallStatus
     /tmp/ccJTEgfQ.s:747    .text:00000314 ClearEP_CTR_RX
     /tmp/ccJTEgfQ.s:768    .text:00000330 $d
     /tmp/ccJTEgfQ.s:772    .text:00000334 $a
     /tmp/ccJTEgfQ.s:775    .text:00000334 ClearEP_CTR_TX
     /tmp/ccJTEgfQ.s:796    .text:00000350 $d
     /tmp/ccJTEgfQ.s:800    .text:00000354 $a
     /tmp/ccJTEgfQ.s:803    .text:00000354 ToggleDTOG_RX
     /tmp/ccJTEgfQ.s:825    .text:00000374 $d
     /tmp/ccJTEgfQ.s:829    .text:00000378 $a
     /tmp/ccJTEgfQ.s:832    .text:00000378 ToggleDTOG_TX
     /tmp/ccJTEgfQ.s:854    .text:00000398 $d
     /tmp/ccJTEgfQ.s:858    .text:0000039c $a
     /tmp/ccJTEgfQ.s:861    .text:0000039c ClearDTOG_RX
     /tmp/ccJTEgfQ.s:884    .text:000003c4 $d
     /tmp/ccJTEgfQ.s:888    .text:000003c8 $a
     /tmp/ccJTEgfQ.s:891    .text:000003c8 ClearDTOG_TX
     /tmp/ccJTEgfQ.s:914    .text:000003f0 $d
     /tmp/ccJTEgfQ.s:918    .text:000003f4 $a
     /tmp/ccJTEgfQ.s:921    .text:000003f4 SetEPAddress
     /tmp/ccJTEgfQ.s:943    .text:00000414 $d
     /tmp/ccJTEgfQ.s:947    .text:00000418 $a
     /tmp/ccJTEgfQ.s:950    .text:00000418 GetEPAddress
     /tmp/ccJTEgfQ.s:972    .text:0000042c SetEPTxAddr
     /tmp/ccJTEgfQ.s:1012   .text:00000480 $d
     /tmp/ccJTEgfQ.s:1016   .text:00000484 $a
     /tmp/ccJTEgfQ.s:1019   .text:00000484 SetEPRxAddr
     /tmp/ccJTEgfQ.s:1053   .text:000004c8 GetEPTxAddr
     /tmp/ccJTEgfQ.s:1078   .text:000004e8 GetEPRxAddr
     /tmp/ccJTEgfQ.s:1103   .text:00000508 SetEPTxCount
     /tmp/ccJTEgfQ.s:1136   .text:0000054c SetEPRxCount
     /tmp/ccJTEgfQ.s:1210   .text:00000600 GetEPTxCount
     /tmp/ccJTEgfQ.s:1237   .text:00000628 GetEPRxCount
     /tmp/ccJTEgfQ.s:1264   .text:00000650 SetEPDblBuffAddr
     /tmp/ccJTEgfQ.s:1322   .text:000006e0 $d
     /tmp/ccJTEgfQ.s:1326   .text:000006e4 $a
     /tmp/ccJTEgfQ.s:1329   .text:000006e4 SetEPDblBuf0Addr
     /tmp/ccJTEgfQ.s:1369   .text:00000738 $d
     /tmp/ccJTEgfQ.s:1373   .text:0000073c $a
     /tmp/ccJTEgfQ.s:1376   .text:0000073c SetEPDblBuf1Addr
     /tmp/ccJTEgfQ.s:1410   .text:00000780 GetEPDblBuf0Addr
     /tmp/ccJTEgfQ.s:1435   .text:000007a0 GetEPDblBuf1Addr
     /tmp/ccJTEgfQ.s:1460   .text:000007c0 SetEPDblBuf0Count
     /tmp/ccJTEgfQ.s:1582   .text:00000894 SetEPDblBuf1Count
     /tmp/ccJTEgfQ.s:1692   .text:0000099c SetEPDblBuffCount
     /tmp/ccJTEgfQ.s:1727   .text:000009c4 GetEPDblBuf0Count
     /tmp/ccJTEgfQ.s:1754   .text:000009ec GetEPDblBuf1Count
     /tmp/ccJTEgfQ.s:1781   .text:00000a14 FreeUserBuffer
     /tmp/ccJTEgfQ.s:1822   .text:00000a64 $d
     /tmp/ccJTEgfQ.s:1826   .text:00000a68 $a
     /tmp/ccJTEgfQ.s:1829   .text:00000a68 ToWord
     /tmp/ccJTEgfQ.s:1847   .text:00000a70 ByteSwap
     /tmp/ccJTEgfQ.s:1868   .text:00000a80 SetDMABurstTxSize
     /tmp/ccJTEgfQ.s:1895   .text:00000a9c SetDMABurstRxSize
     /tmp/ccJTEgfQ.s:1918   .text:00000ab4 DMAUnlinkedModeTxConfig
     /tmp/ccJTEgfQ.s:1946   .text:00000adc DMAUnlinkedModeTxEnable
     /tmp/ccJTEgfQ.s:1979   .text:00000b0c DMAUnlinkedModeTxDisable
     /tmp/ccJTEgfQ.s:2001   .text:00000b20 DMAUnlinkedModeRxEnable
     /tmp/ccJTEgfQ.s:2029   .text:00000b44 DMAUnlinkedModeRxDisable
     /tmp/ccJTEgfQ.s:2051   .text:00000b5c DMALinkedModeRxConfig
     /tmp/ccJTEgfQ.s:2076   .text:00000b7c DMALinkedModeTxConfig
     /tmp/ccJTEgfQ.s:2101   .text:00000b9c DMALinkedModeRxEnable
     /tmp/ccJTEgfQ.s:2125   .text:00000bbc DMALinkedModeTxEnable
     /tmp/ccJTEgfQ.s:2149   .text:00000bdc DMALinkedModeRxDisable
     /tmp/ccJTEgfQ.s:2173   .text:00000bfc DMALinkedModeTxDisable
     /tmp/ccJTEgfQ.s:2197   .text:00000c1c DMASynchEnable
     /tmp/ccJTEgfQ.s:2217   .text:00000c30 DMASynchDisable
     /tmp/ccJTEgfQ.s:2237   .text:00000c44 SetDMALLITxLength
     /tmp/ccJTEgfQ.s:2262   .text:00000c64 SetDMALLIRxLength
     /tmp/ccJTEgfQ.s:2287   .text:00000c84 SetDMALLIRxPacketNum
     /tmp/ccJTEgfQ.s:2312   .text:00000ca4 GetDMALLIRxPacketNum
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
