   1              		.cpu arm9e
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.file	"usb_mem.c"
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.align	2
  22              		.global	UserToPMABufferCopy
  24              	UserToPMABufferCopy:
  25              	.LFB0:
  26              		.file 1 "usblibrary/src/usb_mem.c"
   1:usblibrary/src/usb_mem.c **** /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
   2:usblibrary/src/usb_mem.c **** * File Name          : usb_mem.c
   3:usblibrary/src/usb_mem.c **** * Author             : MCD Application Team
   4:usblibrary/src/usb_mem.c **** * Version            : V4.0.0
   5:usblibrary/src/usb_mem.c **** * Date               : 09/29/2008
   6:usblibrary/src/usb_mem.c **** * Description        : Utility functions for memory transfers to/from PMA.
   7:usblibrary/src/usb_mem.c **** ********************************************************************************
   8:usblibrary/src/usb_mem.c **** * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
   9:usblibrary/src/usb_mem.c **** * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  10:usblibrary/src/usb_mem.c **** * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  11:usblibrary/src/usb_mem.c **** * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  12:usblibrary/src/usb_mem.c **** * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  13:usblibrary/src/usb_mem.c **** * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  14:usblibrary/src/usb_mem.c **** *******************************************************************************/
  15:usblibrary/src/usb_mem.c **** 
  16:usblibrary/src/usb_mem.c **** /* Includes ------------------------------------------------------------------*/
  17:usblibrary/src/usb_mem.c **** #include "usb_lib.h"
  18:usblibrary/src/usb_mem.c **** #include "usb_mem.h"
  19:usblibrary/src/usb_mem.c **** #include "usb_conf.h"
  20:usblibrary/src/usb_mem.c **** /* Private typedef -----------------------------------------------------------*/
  21:usblibrary/src/usb_mem.c **** /* Private define ------------------------------------------------------------*/
  22:usblibrary/src/usb_mem.c **** /* Private macro -------------------------------------------------------------*/
  23:usblibrary/src/usb_mem.c **** /* Private variables ---------------------------------------------------------*/
  24:usblibrary/src/usb_mem.c **** /* Private function prototypes -----------------------------------------------*/
  25:usblibrary/src/usb_mem.c **** /* Private functions ---------------------------------------------------------*/
  26:usblibrary/src/usb_mem.c **** 
  27:usblibrary/src/usb_mem.c **** /*******************************************************************************
  28:usblibrary/src/usb_mem.c **** * Function Name  : UserToPMABufferCopy
  29:usblibrary/src/usb_mem.c **** * Description    : Copy a buffer from user memory area to packet memory area (PMA)
  30:usblibrary/src/usb_mem.c **** * Input          : - pbUsrBuf: pointer to user memory area.
  31:usblibrary/src/usb_mem.c **** *                  - wPMABufAddr: address into PMA.
  32:usblibrary/src/usb_mem.c **** *                  - wNBytes: no. of bytes to be copied.
  33:usblibrary/src/usb_mem.c **** * Output         : None.
  34:usblibrary/src/usb_mem.c **** * Return         : None .
  35:usblibrary/src/usb_mem.c **** *******************************************************************************/
  36:usblibrary/src/usb_mem.c **** void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
  37:usblibrary/src/usb_mem.c **** {
  27              		.loc 1 37 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  38:usblibrary/src/usb_mem.c **** #ifdef STR7xx                   /* STR7xx family    */
  39:usblibrary/src/usb_mem.c ****   u32 n = (wNBytes + 1) >> 1;   /* n=(wNBytes+1)/2  */
  40:usblibrary/src/usb_mem.c ****   u32 i, temp1, temp2;
  41:usblibrary/src/usb_mem.c ****   u16 *pdwVal;
  42:usblibrary/src/usb_mem.c ****   pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  43:usblibrary/src/usb_mem.c **** 
  44:usblibrary/src/usb_mem.c ****   for (i = n; i != 0; i--)
  45:usblibrary/src/usb_mem.c ****   {
  46:usblibrary/src/usb_mem.c ****     temp1 = (u16) * pbUsrBuf;
  47:usblibrary/src/usb_mem.c ****     pbUsrBuf++;
  48:usblibrary/src/usb_mem.c ****     temp2 = temp1 | (u16) * pbUsrBuf << 8;
  49:usblibrary/src/usb_mem.c ****     *pdwVal++ = temp2;
  50:usblibrary/src/usb_mem.c ****     pdwVal++;
  51:usblibrary/src/usb_mem.c ****     pbUsrBuf++;
  52:usblibrary/src/usb_mem.c ****   }
  53:usblibrary/src/usb_mem.c **** #endif                  /* End of STR7xx family*/
  54:usblibrary/src/usb_mem.c **** 
  55:usblibrary/src/usb_mem.c **** #ifdef STR91x           /*STR91x family*/
  56:usblibrary/src/usb_mem.c **** 
  57:usblibrary/src/usb_mem.c ****   u32 n = (wNBytes + 3) >> 2;  /*n=(wNBytes+1)/4*/
  33              		.loc 1 57 0
  34 0000 032082E2 		add	r2, r2, #3
  35              	.LVL1:
  58:usblibrary/src/usb_mem.c ****   u32 i, temp1, temp2, temp3, temp4;
  59:usblibrary/src/usb_mem.c ****   u32 *pdwVal;
  60:usblibrary/src/usb_mem.c ****   pdwVal = (u32 *)(PMAAddr + (u32)((wPMABufAddr)));
  61:usblibrary/src/usb_mem.c ****   for (i = n; i != 0; i--)
  36              		.loc 1 61 0
  37 0004 4221B0E1 		movs	r2, r2, asr #2
  38              	.LVL2:
  37:usblibrary/src/usb_mem.c **** {
  39              		.loc 1 37 0
  40 0008 70002DE9 		stmfd	sp!, {r4, r5, r6}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 12
  43              		.loc 1 61 0
  44 000c 3600000A 		beq	.L1
  45              		.cfi_offset 6, -4
  46              		.cfi_offset 5, -8
  47              		.cfi_offset 4, -12
  62:usblibrary/src/usb_mem.c ****   {
  63:usblibrary/src/usb_mem.c ****     temp1 = (u32) * pbUsrBuf;
  64:usblibrary/src/usb_mem.c ****     temp2 = temp1 | (u32) * (pbUsrBuf + 1) << 8;
  65:usblibrary/src/usb_mem.c ****     temp3 = temp2 | (u32) * (pbUsrBuf + 2) << 16;
  48              		.loc 1 65 0
  49 0010 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
  64:usblibrary/src/usb_mem.c ****     temp2 = temp1 | (u32) * (pbUsrBuf + 1) << 8;
  50              		.loc 1 64 0
  51 0014 0150D0E5 		ldrb	r5, [r0, #1]	@ zero_extendqisi2
  63:usblibrary/src/usb_mem.c ****     temp1 = (u32) * pbUsrBuf;
  52              		.loc 1 63 0
  53 0018 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
  54              		.loc 1 65 0
  55 001c 0C48A0E1 		mov	r4, ip, asl #16
  64:usblibrary/src/usb_mem.c ****     temp2 = temp1 | (u32) * (pbUsrBuf + 1) << 8;
  56              		.loc 1 64 0
  57 0020 054484E1 		orr	r4, r4, r5, asl #8
  66:usblibrary/src/usb_mem.c ****     temp4 = temp3 | (u32) * (pbUsrBuf + 3) << 24;
  58              		.loc 1 66 0
  59 0024 03C0D0E5 		ldrb	ip, [r0, #3]	@ zero_extendqisi2
  60 0028 012042E2 		sub	r2, r2, #1
  61              	.LVL3:
  65:usblibrary/src/usb_mem.c ****     temp3 = temp2 | (u32) * (pbUsrBuf + 2) << 16;
  62              		.loc 1 65 0
  63 002c 034084E1 		orr	r4, r4, r3
  64              		.loc 1 66 0
  65 0030 0C4C84E1 		orr	r4, r4, ip, asl #24
  60:usblibrary/src/usb_mem.c ****   pdwVal = (u32 *)(PMAAddr + (u32)((wPMABufAddr)));
  66              		.loc 1 60 0
  67 0034 063281E2 		add	r3, r1, #1610612736
  61:usblibrary/src/usb_mem.c ****   for (i = n; i != 0; i--)
  68              		.loc 1 61 0
  69 0038 00C052E2 		subs	ip, r2, #0
  67:usblibrary/src/usb_mem.c ****     pbUsrBuf += 4;
  68:usblibrary/src/usb_mem.c ****     *pdwVal = temp4;
  70              		.loc 1 68 0
  71 003c 004083E5 		str	r4, [r3, #0]
  72 0040 012002E2 		and	r2, r2, #1
  73              	.LVL4:
  67:usblibrary/src/usb_mem.c ****     pbUsrBuf += 4;
  74              		.loc 1 67 0
  75 0044 040080E2 		add	r0, r0, #4
  76              	.LVL5:
  69:usblibrary/src/usb_mem.c **** 
  70:usblibrary/src/usb_mem.c ****     pdwVal++;
  77              		.loc 1 70 0
  78 0048 464281E2 		add	r4, r1, #1610612740
  79              	.LVL6:
  61:usblibrary/src/usb_mem.c ****   for (i = n; i != 0; i--)
  80              		.loc 1 61 0
  81 004c 2600000A 		beq	.L1
  82 0050 000052E3 		cmp	r2, #0
  83 0054 0C00000A 		beq	.L3
  65:usblibrary/src/usb_mem.c ****     temp3 = temp2 | (u32) * (pbUsrBuf + 2) << 16;
  84              		.loc 1 65 0
  85 0058 0220D0E5 		ldrb	r2, [r0, #2]	@ zero_extendqisi2
  64:usblibrary/src/usb_mem.c ****     temp2 = temp1 | (u32) * (pbUsrBuf + 1) << 8;
  86              		.loc 1 64 0
  87 005c 0160D0E5 		ldrb	r6, [r0, #1]	@ zero_extendqisi2
  63:usblibrary/src/usb_mem.c ****     temp1 = (u32) * pbUsrBuf;
  88              		.loc 1 63 0
  89 0060 0050D0E5 		ldrb	r5, [r0, #0]	@ zero_extendqisi2
  65:usblibrary/src/usb_mem.c ****     temp3 = temp2 | (u32) * (pbUsrBuf + 2) << 16;
  90              		.loc 1 65 0
  91 0064 0238A0E1 		mov	r3, r2, asl #16
  92              	.LVL7:
  64:usblibrary/src/usb_mem.c ****     temp2 = temp1 | (u32) * (pbUsrBuf + 1) << 8;
  93              		.loc 1 64 0
  94 0068 063483E1 		orr	r3, r3, r6, asl #8
  66:usblibrary/src/usb_mem.c ****     temp4 = temp3 | (u32) * (pbUsrBuf + 3) << 24;
  95              		.loc 1 66 0
  96 006c 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
  65:usblibrary/src/usb_mem.c ****     temp3 = temp2 | (u32) * (pbUsrBuf + 2) << 16;
  97              		.loc 1 65 0
  98 0070 053083E1 		orr	r3, r3, r5
  66:usblibrary/src/usb_mem.c ****     temp4 = temp3 | (u32) * (pbUsrBuf + 3) << 24;
  99              		.loc 1 66 0
 100 0074 023C83E1 		orr	r3, r3, r2, asl #24
  61:usblibrary/src/usb_mem.c ****   for (i = n; i != 0; i--)
 101              		.loc 1 61 0
 102 0078 01C05CE2 		subs	ip, ip, #1
 103              	.LVL8:
  68:usblibrary/src/usb_mem.c ****     *pdwVal = temp4;
 104              		.loc 1 68 0
 105 007c 003084E5 		str	r3, [r4, #0]
  67:usblibrary/src/usb_mem.c ****     pbUsrBuf += 4;
 106              		.loc 1 67 0
 107 0080 040080E2 		add	r0, r0, #4
 108              		.loc 1 70 0
 109 0084 864281E2 		add	r4, r1, #1610612744
  61:usblibrary/src/usb_mem.c ****   for (i = n; i != 0; i--)
 110              		.loc 1 61 0
 111 0088 1700000A 		beq	.L1
 112              	.LVL9:
 113              	.L3:
  65:usblibrary/src/usb_mem.c ****     temp3 = temp2 | (u32) * (pbUsrBuf + 2) << 16;
 114              		.loc 1 65 0 discriminator 2
 115 008c 0210D0E5 		ldrb	r1, [r0, #2]	@ zero_extendqisi2
  64:usblibrary/src/usb_mem.c ****     temp2 = temp1 | (u32) * (pbUsrBuf + 1) << 8;
 116              		.loc 1 64 0 discriminator 2
 117 0090 0150D0E5 		ldrb	r5, [r0, #1]	@ zero_extendqisi2
  63:usblibrary/src/usb_mem.c ****     temp1 = (u32) * pbUsrBuf;
 118              		.loc 1 63 0 discriminator 2
 119 0094 0020D0E5 		ldrb	r2, [r0, #0]	@ zero_extendqisi2
  65:usblibrary/src/usb_mem.c ****     temp3 = temp2 | (u32) * (pbUsrBuf + 2) << 16;
 120              		.loc 1 65 0 discriminator 2
 121 0098 0168A0E1 		mov	r6, r1, asl #16
  64:usblibrary/src/usb_mem.c ****     temp2 = temp1 | (u32) * (pbUsrBuf + 1) << 8;
 122              		.loc 1 64 0 discriminator 2
 123 009c 053486E1 		orr	r3, r6, r5, asl #8
  66:usblibrary/src/usb_mem.c ****     temp4 = temp3 | (u32) * (pbUsrBuf + 3) << 24;
 124              		.loc 1 66 0 discriminator 2
 125 00a0 0310D0E5 		ldrb	r1, [r0, #3]	@ zero_extendqisi2
  65:usblibrary/src/usb_mem.c ****     temp3 = temp2 | (u32) * (pbUsrBuf + 2) << 16;
 126              		.loc 1 65 0 discriminator 2
 127 00a4 026083E1 		orr	r6, r3, r2
  66:usblibrary/src/usb_mem.c ****     temp4 = temp3 | (u32) * (pbUsrBuf + 3) << 24;
 128              		.loc 1 66 0 discriminator 2
 129 00a8 015C86E1 		orr	r5, r6, r1, asl #24
  68:usblibrary/src/usb_mem.c ****     *pdwVal = temp4;
 130              		.loc 1 68 0 discriminator 2
 131 00ac 0420A0E1 		mov	r2, r4
 132 00b0 045082E4 		str	r5, [r2], #4
  65:usblibrary/src/usb_mem.c ****     temp3 = temp2 | (u32) * (pbUsrBuf + 2) << 16;
 133              		.loc 1 65 0 discriminator 2
 134 00b4 0610D0E5 		ldrb	r1, [r0, #6]	@ zero_extendqisi2
  64:usblibrary/src/usb_mem.c ****     temp2 = temp1 | (u32) * (pbUsrBuf + 1) << 8;
 135              		.loc 1 64 0 discriminator 2
 136 00b8 0560D0E5 		ldrb	r6, [r0, #5]	@ zero_extendqisi2
  63:usblibrary/src/usb_mem.c ****     temp1 = (u32) * pbUsrBuf;
 137              		.loc 1 63 0 discriminator 2
 138 00bc 0450D0E5 		ldrb	r5, [r0, #4]	@ zero_extendqisi2
  65:usblibrary/src/usb_mem.c ****     temp3 = temp2 | (u32) * (pbUsrBuf + 2) << 16;
 139              		.loc 1 65 0 discriminator 2
 140 00c0 0118A0E1 		mov	r1, r1, asl #16
  67:usblibrary/src/usb_mem.c ****     pbUsrBuf += 4;
 141              		.loc 1 67 0 discriminator 2
 142 00c4 043080E2 		add	r3, r0, #4
  64:usblibrary/src/usb_mem.c ****     temp2 = temp1 | (u32) * (pbUsrBuf + 1) << 8;
 143              		.loc 1 64 0 discriminator 2
 144 00c8 061481E1 		orr	r1, r1, r6, asl #8
  66:usblibrary/src/usb_mem.c ****     temp4 = temp3 | (u32) * (pbUsrBuf + 3) << 24;
 145              		.loc 1 66 0 discriminator 2
 146 00cc 0700D0E5 		ldrb	r0, [r0, #7]	@ zero_extendqisi2
  65:usblibrary/src/usb_mem.c ****     temp3 = temp2 | (u32) * (pbUsrBuf + 2) << 16;
 147              		.loc 1 65 0 discriminator 2
 148 00d0 051081E1 		orr	r1, r1, r5
  66:usblibrary/src/usb_mem.c ****     temp4 = temp3 | (u32) * (pbUsrBuf + 3) << 24;
 149              		.loc 1 66 0 discriminator 2
 150 00d4 001C81E1 		orr	r1, r1, r0, asl #24
  61:usblibrary/src/usb_mem.c ****   for (i = n; i != 0; i--)
 151              		.loc 1 61 0 discriminator 2
 152 00d8 02C05CE2 		subs	ip, ip, #2
  68:usblibrary/src/usb_mem.c ****     *pdwVal = temp4;
 153              		.loc 1 68 0 discriminator 2
 154 00dc 041084E5 		str	r1, [r4, #4]
  67:usblibrary/src/usb_mem.c ****     pbUsrBuf += 4;
 155              		.loc 1 67 0 discriminator 2
 156 00e0 040083E2 		add	r0, r3, #4
 157              		.loc 1 70 0 discriminator 2
 158 00e4 044082E2 		add	r4, r2, #4
  61:usblibrary/src/usb_mem.c ****   for (i = n; i != 0; i--)
 159              		.loc 1 61 0 discriminator 2
 160 00e8 E7FFFF1A 		bne	.L3
 161              	.L1:
  71:usblibrary/src/usb_mem.c ****   }
  72:usblibrary/src/usb_mem.c **** #endif /* End of STR91x family*/
  73:usblibrary/src/usb_mem.c **** }
 162              		.loc 1 73 0
 163 00ec 7000BDE8 		ldmfd	sp!, {r4, r5, r6}
 164 00f0 1EFF2FE1 		bx	lr
 165              		.cfi_endproc
 166              	.LFE0:
 168              		.align	2
 169              		.global	PMAToUserBufferCopy
 171              	PMAToUserBufferCopy:
 172              	.LFB1:
  74:usblibrary/src/usb_mem.c **** /*******************************************************************************
  75:usblibrary/src/usb_mem.c **** * Function Name  : PMAToUserBufferCopy
  76:usblibrary/src/usb_mem.c **** * Description    : Copy a buffer from user memory area to packet memory area (PMA)
  77:usblibrary/src/usb_mem.c **** * Input          : - pbUsrBuf    = pointer to user memory area.
  78:usblibrary/src/usb_mem.c **** *                  - wPMABufAddr = address into PMA.
  79:usblibrary/src/usb_mem.c **** *                  - wNBytes     = no. of bytes to be copied.
  80:usblibrary/src/usb_mem.c **** * Output         : None.
  81:usblibrary/src/usb_mem.c **** * Return         : None.
  82:usblibrary/src/usb_mem.c **** *******************************************************************************/
  83:usblibrary/src/usb_mem.c **** void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
  84:usblibrary/src/usb_mem.c **** {
 173              		.loc 1 84 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 178              	.LVL10:
  85:usblibrary/src/usb_mem.c **** #ifdef STR7xx /*STR7xx family*/
  86:usblibrary/src/usb_mem.c ****   u32 n = (wNBytes + 1) >> 1;/* /2*/
  87:usblibrary/src/usb_mem.c ****   u32 i;
  88:usblibrary/src/usb_mem.c ****   u32 *pdwVal;
  89:usblibrary/src/usb_mem.c ****   pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
  90:usblibrary/src/usb_mem.c ****   for (i = n; i != 0; i--)
  91:usblibrary/src/usb_mem.c ****   {
  92:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *(u8*)pdwVal;
  93:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *((u8*)pdwVal + 1);
  94:usblibrary/src/usb_mem.c ****     pdwVal ++;  
  95:usblibrary/src/usb_mem.c ****   }
  96:usblibrary/src/usb_mem.c **** 
  97:usblibrary/src/usb_mem.c **** #endif /* End of STR7xx family*/
  98:usblibrary/src/usb_mem.c **** 
  99:usblibrary/src/usb_mem.c **** #ifdef STR91x  /*STR91x family*/
 100:usblibrary/src/usb_mem.c ****   u8 *pbVal;
 101:usblibrary/src/usb_mem.c ****   u16 wNTrasf = wNBytes;
 102:usblibrary/src/usb_mem.c ****   if ((wNBytes) == 0)
 179              		.loc 1 102 0
 180 00f4 000052E3 		cmp	r2, #0
 181              	.LVL11:
  84:usblibrary/src/usb_mem.c **** {
 182              		.loc 1 84 0
 183 00f8 04402DE5 		str	r4, [sp, #-4]!
 184              	.LCFI1:
 185              		.cfi_def_cfa_offset 4
 186              		.loc 1 102 0
 187 00fc 2500000A 		beq	.L11
 188              		.cfi_offset 4, -4
 189 0100 023042E2 		sub	r3, r2, #2
 190 0104 0348A0E1 		mov	r4, r3, asl #16
 191 0108 020814E3 		tst	r4, #131072
 103:usblibrary/src/usb_mem.c ****   {
 104:usblibrary/src/usb_mem.c ****     return;
 105:usblibrary/src/usb_mem.c ****   }
 106:usblibrary/src/usb_mem.c ****   pbVal = (u8 *)(PMAAddr + wPMABufAddr);
 192              		.loc 1 106 0
 193 010c 063281E2 		add	r3, r1, #1610612736
 194              	.LVL12:
 195 0110 26C281E2 		add	ip, r1, #1610612738
 196 0114 2448A0E1 		mov	r4, r4, lsr #16
 197 0118 2000001A 		bne	.L17
 198              	.LVL13:
 199              	.L13:
 107:usblibrary/src/usb_mem.c ****   while (1)
 108:usblibrary/src/usb_mem.c ****   {
 109:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 200              		.loc 1 109 0
 201 011c 0040D3E5 		ldrb	r4, [r3, #0]	@ zero_extendqisi2
 110:usblibrary/src/usb_mem.c ****     if ((--wNTrasf) == 0)
 111:usblibrary/src/usb_mem.c ****     {
 112:usblibrary/src/usb_mem.c ****       return;
 113:usblibrary/src/usb_mem.c ****     }
 114:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 202              		.loc 1 114 0
 203 0120 021042E2 		sub	r1, r2, #2
 204              	.LVL14:
 110:usblibrary/src/usb_mem.c ****     if ((--wNTrasf) == 0)
 205              		.loc 1 110 0
 206 0124 010052E3 		cmp	r2, #1
 207              		.loc 1 114 0
 208 0128 0118A0E1 		mov	r1, r1, asl #16
 109:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 209              		.loc 1 109 0
 210 012c 0040C0E5 		strb	r4, [r0, #0]
 211              	.LVL15:
 110:usblibrary/src/usb_mem.c ****     if ((--wNTrasf) == 0)
 212              		.loc 1 110 0
 213 0130 1800000A 		beq	.L11
 214              	.LVL16:
 215              	.L19:
 216              		.loc 1 114 0
 217 0134 01205CE5 		ldrb	r2, [ip, #-1]	@ zero_extendqisi2
 115:usblibrary/src/usb_mem.c ****     if ((--wNTrasf) == 0)
 218              		.loc 1 115 0
 219 0138 2118B0E1 		movs	r1, r1, lsr #16
 114:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 220              		.loc 1 114 0
 221 013c 0120C0E5 		strb	r2, [r0, #1]
 222 0140 02C08CE2 		add	ip, ip, #2
 223              		.loc 1 115 0
 224 0144 1300000A 		beq	.L11
 109:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 225              		.loc 1 109 0
 226 0148 0220D3E5 		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 110:usblibrary/src/usb_mem.c ****     if ((--wNTrasf) == 0)
 227              		.loc 1 110 0
 228 014c 010051E3 		cmp	r1, #1
 109:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 229              		.loc 1 109 0
 230 0150 0220C0E5 		strb	r2, [r0, #2]
  83:usblibrary/src/usb_mem.c **** void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
 231              		.loc 1 83 0
 232 0154 023083E2 		add	r3, r3, #2
 233 0158 020080E2 		add	r0, r0, #2
 110:usblibrary/src/usb_mem.c ****     if ((--wNTrasf) == 0)
 234              		.loc 1 110 0
 235 015c 0D00000A 		beq	.L11
 114:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 236              		.loc 1 114 0
 237 0160 01405CE5 		ldrb	r4, [ip, #-1]	@ zero_extendqisi2
 238 0164 022041E2 		sub	r2, r1, #2
 239 0168 0218A0E1 		mov	r1, r2, asl #16
 240 016c 0140C0E5 		strb	r4, [r0, #1]
  83:usblibrary/src/usb_mem.c **** void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
 241              		.loc 1 83 0
 242 0170 023083E2 		add	r3, r3, #2
 114:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 243              		.loc 1 114 0
 244 0174 2128A0E1 		mov	r2, r1, lsr #16
 245              	.LVL17:
 109:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 246              		.loc 1 109 0
 247 0178 0040D3E5 		ldrb	r4, [r3, #0]	@ zero_extendqisi2
  83:usblibrary/src/usb_mem.c **** void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
 248              		.loc 1 83 0
 249 017c 020080E2 		add	r0, r0, #2
 250              	.LVL18:
 114:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 251              		.loc 1 114 0
 252 0180 021042E2 		sub	r1, r2, #2
 110:usblibrary/src/usb_mem.c ****     if ((--wNTrasf) == 0)
 253              		.loc 1 110 0
 254 0184 010052E3 		cmp	r2, #1
 114:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 255              		.loc 1 114 0
 256 0188 02C08CE2 		add	ip, ip, #2
 257 018c 0118A0E1 		mov	r1, r1, asl #16
 109:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 258              		.loc 1 109 0
 259 0190 0040C0E5 		strb	r4, [r0, #0]
 260              	.LVL19:
 110:usblibrary/src/usb_mem.c ****     if ((--wNTrasf) == 0)
 261              		.loc 1 110 0
 262 0194 E6FFFF1A 		bne	.L19
 263              	.LVL20:
 264              	.L11:
 116:usblibrary/src/usb_mem.c ****     {
 117:usblibrary/src/usb_mem.c ****       return;
 118:usblibrary/src/usb_mem.c ****     }
 119:usblibrary/src/usb_mem.c ****   }
 120:usblibrary/src/usb_mem.c **** #endif /* End of STR91x family*/
 121:usblibrary/src/usb_mem.c **** }
 265              		.loc 1 121 0
 266 0198 04409DE4 		ldmfd	sp!, {r4}
 267 019c 1EFF2FE1 		bx	lr
 268              	.LVL21:
 269              	.L17:
 109:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 270              		.loc 1 109 0
 271 01a0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 272              	.LVL22:
 110:usblibrary/src/usb_mem.c ****     if ((--wNTrasf) == 0)
 273              		.loc 1 110 0
 274 01a4 010052E3 		cmp	r2, #1
 109:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 275              		.loc 1 109 0
 276 01a8 0030C0E5 		strb	r3, [r0, #0]
 277              	.LVL23:
 110:usblibrary/src/usb_mem.c ****     if ((--wNTrasf) == 0)
 278              		.loc 1 110 0
 279 01ac F9FFFF0A 		beq	.L11
 114:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 280              		.loc 1 114 0
 281 01b0 01C05CE5 		ldrb	ip, [ip, #-1]	@ zero_extendqisi2
 282 01b4 0420A0E1 		mov	r2, r4
 283 01b8 01C0C0E5 		strb	ip, [r0, #1]
 284              	.LVL24:
  83:usblibrary/src/usb_mem.c **** void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
 285              		.loc 1 83 0
 286 01bc 263281E2 		add	r3, r1, #1610612738
 114:usblibrary/src/usb_mem.c ****     *pbUsrBuf++ = *pbVal++;
 287              		.loc 1 114 0
 288 01c0 46C281E2 		add	ip, r1, #1610612740
  83:usblibrary/src/usb_mem.c **** void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
 289              		.loc 1 83 0
 290 01c4 020080E2 		add	r0, r0, #2
 291              	.LVL25:
 292 01c8 D3FFFFEA 		b	.L13
 293              		.cfi_endproc
 294              	.LFE1:
 296              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 usb_mem.c
     /tmp/ccQ5JDxL.s:21     .text:00000000 $a
     /tmp/ccQ5JDxL.s:24     .text:00000000 UserToPMABufferCopy
     /tmp/ccQ5JDxL.s:171    .text:000000f4 PMAToUserBufferCopy
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
